
hello:     file format elf32-littleriscv
hello
architecture: riscv, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000200

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x0000022c memsz 0x0000022c flags r-x
    LOAD off    0x00002000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x0000513c memsz 0x0000519c flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e24  00010000  00010000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000118  00013e24  00013e24  00005e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init_array   00000008  00013f3c  00013f3c  00005f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  00013f44  00013f44  00005f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .eh_frame     00000984  00013f48  00013f48  00005f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .jcr          00000004  000148cc  000148cc  000068cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000848  000148d0  000148d0  000068d0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .sdata        0000001c  00015120  00015120  00007120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .sbss         00000010  00015140  00015140  0000713c  2**2
                  ALLOC
  9 .bss          0000004c  00015150  00015150  0000713c  2**2
                  ALLOC
 10 .startup      0000022c  00000000  00000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .comment      00000011  00000000  00000000  0000713c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c761  00000000  00000000  0000714d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002dde  00000000  00000000  000138ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003b0  00000000  00000000  0001668c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000073dd  00000000  00000000  00016a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001bfc  00000000  00000000  0001de19  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000055a3  00000000  00000000  0001fa15  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000520  00000000  00000000  00024fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00013e24 l    d  .rodata	00000000 .rodata
00013f3c l    d  .init_array	00000000 .init_array
00013f44 l    d  .fini_array	00000000 .fini_array
00013f48 l    d  .eh_frame	00000000 .eh_frame
000148cc l    d  .jcr	00000000 .jcr
000148d0 l    d  .data	00000000 .data
00015120 l    d  .sdata	00000000 .sdata
00015140 l    d  .sbss	00000000 .sbss
00015150 l    d  .bss	00000000 .bss
00000000 l    d  .startup	00000000 .startup
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 crtstuff.c
00013f48 l     O .eh_frame	00000000 __EH_FRAME_BEGIN__
000148cc l     O .jcr	00000000 __JCR_LIST__
0001004c l     F .text	00000000 deregister_tm_clones
00010080 l     F .text	00000000 register_tm_clones
000100c0 l     F .text	00000000 __do_global_dtors_aux
00015150 l     O .bss	00000001 completed.3082
00013f44 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
00010104 l     F .text	00000000 frame_dummy
00015154 l     O .bss	00000018 object.3087
00013f3c l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 syscalls.c
0001516c l     O .bss	00000004 heap_end.1982
00000000 l    df *ABS*	00000000 htif.c
000106f4 l     F .text	00000068 htif_tohost
0001075c l     F .text	00000044 htif_fromhost
00000000 l    df *ABS*	00000000 riscv_counters.c
00000000 l    df *ABS*	00000000 ns16550.c
00015128 l     O .sdata	00000004 pio
000108e4 l     F .text	000000b0 ns16550_init
00000000 l    df *ABS*	00000000 hello.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000148d0 l     O .data	00000440 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0001308c l     F .text	00000008 __fp_unlock
000130a0 l     F .text	0000018c __sinit.part.1
00013230 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 crtstuff.c
000148c8 l     O .eh_frame	00000000 __FRAME_END__
000148cc l     O .jcr	00000000 __JCR_END__
00000000 l    df *ABS*	00000000 
00013f48 l       .fini_array	00000000 __fini_array_end
00013f44 l       .fini_array	00000000 __fini_array_start
00013f44 l       .init_array	00000000 __init_array_end
00013f3c l       .init_array	00000000 __preinit_array_end
00013f3c l       .init_array	00000000 __init_array_start
00013f3c l       .init_array	00000000 __preinit_array_start
00011538 g     F .text	000000b0 _puts_r
00010ac4 g     F .text	000004d0 .hidden __divdi3
000148d0 g       .data	00000000 _fdata
00013cb4 g     F .text	00000068 __sseek
000133c0 g     F .text	00000010 __sinit
00013238 g     F .text	00000070 __sfmoreglue
000126a0 g     F .text	00000004 __malloc_unlock
0001257c g     F .text	00000120 memmove
000133b0 g     F .text	00000010 _cleanup
00010848 g     F .text	00000034 read_cycle
00010474 g     F .text	00000024 times
00015198 g     O .bss	00000004 errno
00013c34 g     F .text	00000008 __seofread
00013f3c g       .rodata	00000000 _etext
00015920 g       *ABS*	00000000 _gp
00010188 g     F .text	00000034 execve
00010218 g     F .text	00000020 getpid
0001245c g     F .text	00000120 memcpy
00015118 g     O .data	00000000 .hidden __TMC_END__
00013094 g     F .text	0000000c _cleanup_r
000115e8 g     F .text	0000000c puts
00010994 g     F .text	00000034 ns16550_rxready
00000000  w      *UND*	00000000 malloc
00010238 g     F .text	00000024 isatty
00010654 g     F .text	000000a0 sleep
00015150 g       .bss	00000000 _bss_start
0001514c g     O .sbss	00000004 __malloc_top_pad
00010a08 g     F .text	0000004c ns16550_txchar
00015120 g     O .sdata	00000000 .hidden __dso_handle
000107a0 g     F .text	00000040 htif_putc
00011778 g     F .text	00000498 __sfvwrite_r
00013d28 g     F .text	000000f0 _fclose_r
0001306c g     F .text	00000020 fflush
00015148 g     O .sbss	00000004 __malloc_max_sbrked_mem
000102bc g     F .text	0000002c lseek
0001512c g     O .sdata	00000004 _global_impure_ptr
000126a4 g     F .text	00000588 _realloc_r
00011498 g     F .text	000000a0 __libc_init_array
000133e0 g     F .text	00000010 __fp_lock_all
0001087c g     F .text	00000034 read_time
00010048 g       .text	00000000 _init
00011438 g     F .text	00000060 __libc_fini_array
000104f0 g     F .text	0000006c write
00015124 g     O .sdata	00000004 environ
000101e4 g     F .text	00000034 fstat
0001025c g     F .text	00000030 kill
00000000  w      *UND*	00000000 __deregister_frame_info
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
000133d0 g     F .text	00000000 __sfp_lock_acquire
00012388 g     F .text	000000d4 memchr
00013500 g     F .text	000002dc _free_r
000104c4 g     F .text	0000002c wait
00010000 g       .text	00000000 _ftext
00015134 g     O .sdata	00000004 __malloc_sbrk_base
00010000 g       .text	00000000 _start
00010314 g     F .text	000000bc read
00011684 g     F .text	000000f4 __register_exitproc
000108b0 g     F .text	00000034 read_instret
00015170 g     O .bss	00000028 __malloc_current_mallinfo
00010498 g     F .text	0000002c unlink
000101bc g     F .text	00000028 fork
00012c2c g     F .text	00000154 __swsetup_r
000132a8 g     F .text	00000108 __sfp
00014d10 g     O .data	00000408 __malloc_av_
000133dc g     F .text	00000004 __sinit_lock_release
00013bb8 g     F .text	0000007c __sread
00015140 g     O .sbss	00000004 __env
0001269c g     F .text	00000004 __malloc_lock
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
000103d0 g     F .text	00000070 sbrk
00013010 g     F .text	0000005c _fflush_r
0001055c g     F .text	000000f8 gettimeofday
00013adc g       .text	00000000 memset
00010a88 g     F .text	0000003c main
00015144 g     O .sbss	00000004 __malloc_max_total_mem
00013d20 g     F .text	00000008 __sclose
00013e18 g     F .text	0000000c fclose
00011c10 g     F .text	00000778 _malloc_r
000137dc g     F .text	000000b0 _fwalk
00013400 g     F .text	00000100 _malloc_trim_r
00010048 g       .text	00000000 _fini
00013e34 g     O .rodata	00000100 .hidden __clz_tab
00011424 g     F .text	00000014 atexit
00015130 g     O .sdata	00000004 _impure_ptr
00012d80 g     F .text	00000290 __sflush_r
000133f0 g     F .text	00000010 __fp_unlock_all
00010440 g     F .text	00000034 stat
00000200 g       .startup	00000000 _reset
00015118 g       .data	00000000 _edata
000151a0 g       .bss	00000000 _end
00013c3c g     F .text	00000078 __swrite
00015138 g     O .sdata	00000004 __malloc_trim_threshold
0001028c g     F .text	00000030 link
00010150 g     F .text	00000014 exit
000107e0 g     F .text	00000068 htif_getc
0001388c g     F .text	000000c0 _fwalk_reent
000133d4 g     F .text	00000004 __sfp_lock_release
00010f94 g     F .text	00000490 .hidden __moddi3
0001394c g     F .text	00000190 __smakebuf_r
000115f4 g     F .text	00000090 strlen
000102e8 g     F .text	0000002c open
00010a54 g     F .text	00000034 ns16550_flush
000109c8 g     F .text	00000040 ns16550_rxchar
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00015140 g       .sbss	00000000 _fbss
00000000  w      *UND*	00000000 __register_frame_info
00010164 g     F .text	00000024 close
000133d8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .text:

00010000 <_ftext>:
   10000:	00006197          	auipc	gp,0x6
   10004:	92018193          	addi	gp,gp,-1760 # 15920 <_gp>
   10008:	00005297          	auipc	t0,0x5
   1000c:	13828293          	addi	t0,t0,312 # 15140 <__env>
   10010:	00005317          	auipc	t1,0x5
   10014:	19030313          	addi	t1,t1,400 # 151a0 <_end>
   10018:	0002a023          	sw	zero,0(t0)
   1001c:	00428293          	addi	t0,t0,4
   10020:	fe62ece3          	bltu	t0,t1,10018 <_ftext+0x18>
   10024:	00001517          	auipc	a0,0x1
   10028:	41450513          	addi	a0,a0,1044 # 11438 <__libc_fini_array>
   1002c:	3f8010ef          	jal	11424 <atexit>
   10030:	468010ef          	jal	11498 <__libc_init_array>
   10034:	00012503          	lw	a0,0(sp)
   10038:	00410593          	addi	a1,sp,4
   1003c:	00000613          	li	a2,0
   10040:	249000ef          	jal	10a88 <main>
   10044:	10c0006f          	j	10150 <exit>

00010048 <_fini>:
   10048:	00008067          	ret

0001004c <deregister_tm_clones>:
   1004c:	00015537          	lui	a0,0x15
   10050:	000157b7          	lui	a5,0x15
   10054:	11850713          	addi	a4,a0,280 # 15118 <__TMC_END__>
   10058:	11b78793          	addi	a5,a5,283 # 1511b <__TMC_END__+0x3>
   1005c:	40e787b3          	sub	a5,a5,a4
   10060:	00600713          	li	a4,6
   10064:	00f77c63          	bleu	a5,a4,1007c <deregister_tm_clones+0x30>
   10068:	00000293          	li	t0,0
   1006c:	00028863          	beqz	t0,1007c <deregister_tm_clones+0x30>
   10070:	11850513          	addi	a0,a0,280
   10074:	00028313          	mv	t1,t0
   10078:	00030067          	jr	t1
   1007c:	00008067          	ret

00010080 <register_tm_clones>:
   10080:	00015537          	lui	a0,0x15
   10084:	000157b7          	lui	a5,0x15
   10088:	11850593          	addi	a1,a0,280 # 15118 <__TMC_END__>
   1008c:	11878793          	addi	a5,a5,280 # 15118 <__TMC_END__>
   10090:	40b787b3          	sub	a5,a5,a1
   10094:	4027d793          	srai	a5,a5,0x2
   10098:	01f7d593          	srli	a1,a5,0x1f
   1009c:	00f585b3          	add	a1,a1,a5
   100a0:	4015d593          	srai	a1,a1,0x1
   100a4:	00058c63          	beqz	a1,100bc <register_tm_clones+0x3c>
   100a8:	00000293          	li	t0,0
   100ac:	00028863          	beqz	t0,100bc <register_tm_clones+0x3c>
   100b0:	11850513          	addi	a0,a0,280
   100b4:	00028313          	mv	t1,t0
   100b8:	00030067          	jr	t1
   100bc:	00008067          	ret

000100c0 <__do_global_dtors_aux>:
   100c0:	ff010113          	addi	sp,sp,-16
   100c4:	00812423          	sw	s0,8(sp)
   100c8:	8301c783          	lbu	a5,-2000(gp) # 15150 <_bss_start>
   100cc:	00112623          	sw	ra,12(sp)
   100d0:	02079263          	bnez	a5,100f4 <__do_global_dtors_aux+0x34>
   100d4:	f79ff0ef          	jal	1004c <deregister_tm_clones>
   100d8:	00000793          	li	a5,0
   100dc:	00078863          	beqz	a5,100ec <__do_global_dtors_aux+0x2c>
   100e0:	00014537          	lui	a0,0x14
   100e4:	f4850513          	addi	a0,a0,-184 # 13f48 <__fini_array_end>
   100e8:	f19ef0ef          	jal	0 <_reset-0x200>
   100ec:	00100793          	li	a5,1
   100f0:	82f18823          	sb	a5,-2000(gp) # 15150 <_bss_start>
   100f4:	00c12083          	lw	ra,12(sp)
   100f8:	00812403          	lw	s0,8(sp)
   100fc:	01010113          	addi	sp,sp,16
   10100:	00008067          	ret

00010104 <frame_dummy>:
   10104:	ff010113          	addi	sp,sp,-16
   10108:	00000793          	li	a5,0
   1010c:	00112623          	sw	ra,12(sp)
   10110:	00078a63          	beqz	a5,10124 <frame_dummy+0x20>
   10114:	00014537          	lui	a0,0x14
   10118:	83418593          	addi	a1,gp,-1996 # 15154 <object.3087>
   1011c:	f4850513          	addi	a0,a0,-184 # 13f48 <__fini_array_end>
   10120:	ee1ef0ef          	jal	0 <_reset-0x200>
   10124:	00015537          	lui	a0,0x15
   10128:	8cc50513          	addi	a0,a0,-1844 # 148cc <__JCR_END__>
   1012c:	00052783          	lw	a5,0(a0)
   10130:	00079863          	bnez	a5,10140 <frame_dummy+0x3c>
   10134:	00c12083          	lw	ra,12(sp)
   10138:	01010113          	addi	sp,sp,16
   1013c:	f45ff06f          	j	10080 <register_tm_clones>
   10140:	00000793          	li	a5,0
   10144:	fe0788e3          	beqz	a5,10134 <frame_dummy+0x30>
   10148:	000780e7          	jalr	a5
   1014c:	fe9ff06f          	j	10134 <frame_dummy+0x30>

00010150 <exit>:
register char * stack_ptr asm ("sp");

#undef errno
int errno;

void exit (int status) {
   10150:	fe010113          	addi	sp,sp,-32
   10154:	00812e23          	sw	s0,28(sp)
   10158:	02010413          	addi	s0,sp,32
   1015c:	fea42623          	sw	a0,-20(s0)
  while (1)
    ;
   10160:	0000006f          	j	10160 <exit+0x10>

00010164 <close>:
}

int close(int file) {
   10164:	fe010113          	addi	sp,sp,-32
   10168:	00812e23          	sw	s0,28(sp)
   1016c:	02010413          	addi	s0,sp,32
   10170:	fea42623          	sw	a0,-20(s0)
  return -1;
   10174:	fff00793          	li	a5,-1
}
   10178:	00078513          	mv	a0,a5
   1017c:	01c12403          	lw	s0,28(sp)
   10180:	02010113          	addi	sp,sp,32
   10184:	00008067          	ret

00010188 <execve>:

char *__env[1] = { 0 };
char **environ = __env;

int execve(char *name, char **argv, char **env) {
   10188:	fe010113          	addi	sp,sp,-32
   1018c:	00812e23          	sw	s0,28(sp)
   10190:	02010413          	addi	s0,sp,32
   10194:	fea42623          	sw	a0,-20(s0)
   10198:	feb42423          	sw	a1,-24(s0)
   1019c:	fec42223          	sw	a2,-28(s0)
  errno = ENOMEM;
   101a0:	00c00713          	li	a4,12
   101a4:	86e1ac23          	sw	a4,-1928(gp) # 15198 <errno>
  return -1;
   101a8:	fff00793          	li	a5,-1
}
   101ac:	00078513          	mv	a0,a5
   101b0:	01c12403          	lw	s0,28(sp)
   101b4:	02010113          	addi	sp,sp,32
   101b8:	00008067          	ret

000101bc <fork>:

int fork(void) {
   101bc:	ff010113          	addi	sp,sp,-16
   101c0:	00812623          	sw	s0,12(sp)
   101c4:	01010413          	addi	s0,sp,16
  errno = EAGAIN;
   101c8:	00b00713          	li	a4,11
   101cc:	86e1ac23          	sw	a4,-1928(gp) # 15198 <errno>
  return -1;
   101d0:	fff00793          	li	a5,-1
}
   101d4:	00078513          	mv	a0,a5
   101d8:	00c12403          	lw	s0,12(sp)
   101dc:	01010113          	addi	sp,sp,16
   101e0:	00008067          	ret

000101e4 <fstat>:

int fstat(int file, struct stat *st) {
   101e4:	fe010113          	addi	sp,sp,-32
   101e8:	00812e23          	sw	s0,28(sp)
   101ec:	02010413          	addi	s0,sp,32
   101f0:	fea42623          	sw	a0,-20(s0)
   101f4:	feb42423          	sw	a1,-24(s0)
  st->st_mode = S_IFCHR;
   101f8:	fe842783          	lw	a5,-24(s0)
   101fc:	00002737          	lui	a4,0x2
   10200:	00e7a823          	sw	a4,16(a5)
  return 0;
   10204:	00000793          	li	a5,0
}
   10208:	00078513          	mv	a0,a5
   1020c:	01c12403          	lw	s0,28(sp)
   10210:	02010113          	addi	sp,sp,32
   10214:	00008067          	ret

00010218 <getpid>:

int getpid(void) {
   10218:	ff010113          	addi	sp,sp,-16
   1021c:	00812623          	sw	s0,12(sp)
   10220:	01010413          	addi	s0,sp,16
  return 1;
   10224:	00100793          	li	a5,1
}
   10228:	00078513          	mv	a0,a5
   1022c:	00c12403          	lw	s0,12(sp)
   10230:	01010113          	addi	sp,sp,16
   10234:	00008067          	ret

00010238 <isatty>:

int isatty(int file) {
   10238:	fe010113          	addi	sp,sp,-32
   1023c:	00812e23          	sw	s0,28(sp)
   10240:	02010413          	addi	s0,sp,32
   10244:	fea42623          	sw	a0,-20(s0)
  return 1;
   10248:	00100793          	li	a5,1
}
   1024c:	00078513          	mv	a0,a5
   10250:	01c12403          	lw	s0,28(sp)
   10254:	02010113          	addi	sp,sp,32
   10258:	00008067          	ret

0001025c <kill>:

int kill(int pid, int sig) {
   1025c:	fe010113          	addi	sp,sp,-32
   10260:	00812e23          	sw	s0,28(sp)
   10264:	02010413          	addi	s0,sp,32
   10268:	fea42623          	sw	a0,-20(s0)
   1026c:	feb42423          	sw	a1,-24(s0)
  errno = EINVAL;
   10270:	01600713          	li	a4,22
   10274:	86e1ac23          	sw	a4,-1928(gp) # 15198 <errno>
  return -1;
   10278:	fff00793          	li	a5,-1
}
   1027c:	00078513          	mv	a0,a5
   10280:	01c12403          	lw	s0,28(sp)
   10284:	02010113          	addi	sp,sp,32
   10288:	00008067          	ret

0001028c <link>:

int link(char *old, char *new) {
   1028c:	fe010113          	addi	sp,sp,-32
   10290:	00812e23          	sw	s0,28(sp)
   10294:	02010413          	addi	s0,sp,32
   10298:	fea42623          	sw	a0,-20(s0)
   1029c:	feb42423          	sw	a1,-24(s0)
  errno = EMLINK;
   102a0:	01f00713          	li	a4,31
   102a4:	86e1ac23          	sw	a4,-1928(gp) # 15198 <errno>
  return -1;
   102a8:	fff00793          	li	a5,-1
}
   102ac:	00078513          	mv	a0,a5
   102b0:	01c12403          	lw	s0,28(sp)
   102b4:	02010113          	addi	sp,sp,32
   102b8:	00008067          	ret

000102bc <lseek>:

int lseek(int file, int ptr, int dir) {
   102bc:	fe010113          	addi	sp,sp,-32
   102c0:	00812e23          	sw	s0,28(sp)
   102c4:	02010413          	addi	s0,sp,32
   102c8:	fea42623          	sw	a0,-20(s0)
   102cc:	feb42423          	sw	a1,-24(s0)
   102d0:	fec42223          	sw	a2,-28(s0)
  return 0;
   102d4:	00000793          	li	a5,0
}
   102d8:	00078513          	mv	a0,a5
   102dc:	01c12403          	lw	s0,28(sp)
   102e0:	02010113          	addi	sp,sp,32
   102e4:	00008067          	ret

000102e8 <open>:

int open(const char *name, int flags, int mode) {
   102e8:	fe010113          	addi	sp,sp,-32
   102ec:	00812e23          	sw	s0,28(sp)
   102f0:	02010413          	addi	s0,sp,32
   102f4:	fea42623          	sw	a0,-20(s0)
   102f8:	feb42423          	sw	a1,-24(s0)
   102fc:	fec42223          	sw	a2,-28(s0)
  return -1;
   10300:	fff00793          	li	a5,-1
}
   10304:	00078513          	mv	a0,a5
   10308:	01c12403          	lw	s0,28(sp)
   1030c:	02010113          	addi	sp,sp,32
   10310:	00008067          	ret

00010314 <read>:

int read(int file, char *ptr, int len) {
   10314:	fd010113          	addi	sp,sp,-48
   10318:	02112623          	sw	ra,44(sp)
   1031c:	02812423          	sw	s0,40(sp)
   10320:	02912223          	sw	s1,36(sp)
   10324:	03010413          	addi	s0,sp,48
   10328:	fca42e23          	sw	a0,-36(s0)
   1032c:	fcb42c23          	sw	a1,-40(s0)
   10330:	fcc42a23          	sw	a2,-44(s0)
  int todo;
  if(len == 0)
   10334:	fd442783          	lw	a5,-44(s0)
   10338:	00079663          	bnez	a5,10344 <read+0x30>
    return 0;
   1033c:	00000793          	li	a5,0
   10340:	0780006f          	j	103b8 <read+0xa4>
    // note: this is always blocking
    *ptr++ = htif_getc();
  }
#endif
#ifdef CONSOLE_UART
  *ptr++ = ns16550_rxchar();
   10344:	fd842483          	lw	s1,-40(s0)
   10348:	00148793          	addi	a5,s1,1
   1034c:	fcf42c23          	sw	a5,-40(s0)
   10350:	678000ef          	jal	109c8 <ns16550_rxchar>
   10354:	00050793          	mv	a5,a0
   10358:	0ff7f793          	andi	a5,a5,255
   1035c:	00f48023          	sb	a5,0(s1)
  for(todo = 1; todo < len; todo++) {
   10360:	00100793          	li	a5,1
   10364:	fef42623          	sw	a5,-20(s0)
   10368:	0380006f          	j	103a0 <read+0x8c>
    if (!ns16550_rxready())
   1036c:	628000ef          	jal	10994 <ns16550_rxready>
   10370:	00050793          	mv	a5,a0
   10374:	02078e63          	beqz	a5,103b0 <read+0x9c>
      break;
    *ptr++ = ns16550_rxchar();
   10378:	fd842483          	lw	s1,-40(s0)
   1037c:	00148793          	addi	a5,s1,1
   10380:	fcf42c23          	sw	a5,-40(s0)
   10384:	644000ef          	jal	109c8 <ns16550_rxchar>
   10388:	00050793          	mv	a5,a0
   1038c:	0ff7f793          	andi	a5,a5,255
   10390:	00f48023          	sb	a5,0(s1)
    *ptr++ = htif_getc();
  }
#endif
#ifdef CONSOLE_UART
  *ptr++ = ns16550_rxchar();
  for(todo = 1; todo < len; todo++) {
   10394:	fec42783          	lw	a5,-20(s0)
   10398:	00178793          	addi	a5,a5,1
   1039c:	fef42623          	sw	a5,-20(s0)
   103a0:	fec42703          	lw	a4,-20(s0)
   103a4:	fd442783          	lw	a5,-44(s0)
   103a8:	fcf742e3          	blt	a4,a5,1036c <read+0x58>
   103ac:	0080006f          	j	103b4 <read+0xa0>
    if (!ns16550_rxready())
      break;
   103b0:	00000013          	nop
    *ptr++ = ns16550_rxchar();
  }
#endif
  return todo;
   103b4:	fec42783          	lw	a5,-20(s0)
}
   103b8:	00078513          	mv	a0,a5
   103bc:	02c12083          	lw	ra,44(sp)
   103c0:	02812403          	lw	s0,40(sp)
   103c4:	02412483          	lw	s1,36(sp)
   103c8:	03010113          	addi	sp,sp,48
   103cc:	00008067          	ret

000103d0 <sbrk>:

caddr_t sbrk(int incr) {
   103d0:	fd010113          	addi	sp,sp,-48
   103d4:	02812623          	sw	s0,44(sp)
   103d8:	03010413          	addi	s0,sp,48
   103dc:	fca42e23          	sw	a0,-36(s0)
  extern char _end;		/* Defined by the linker */
  static char *heap_end;
  char *prev_heap_end;

  if (heap_end == 0) {
   103e0:	84c1a783          	lw	a5,-1972(gp) # 1516c <heap_end.1982>
   103e4:	00079663          	bnez	a5,103f0 <sbrk+0x20>
    heap_end = &_end;
   103e8:	88018713          	addi	a4,gp,-1920 # 151a0 <_end>
   103ec:	84e1a623          	sw	a4,-1972(gp) # 1516c <heap_end.1982>
  }
  prev_heap_end = heap_end;
   103f0:	84c1a783          	lw	a5,-1972(gp) # 1516c <heap_end.1982>
   103f4:	fef42623          	sw	a5,-20(s0)
  if (heap_end + incr > stack_ptr) {
   103f8:	84c1a703          	lw	a4,-1972(gp) # 1516c <heap_end.1982>
   103fc:	fdc42783          	lw	a5,-36(s0)
   10400:	00f707b3          	add	a5,a4,a5
   10404:	00010713          	mv	a4,sp
   10408:	00f77a63          	bleu	a5,a4,1041c <sbrk+0x4c>
    errno = ENOMEM;
   1040c:	00c00713          	li	a4,12
   10410:	86e1ac23          	sw	a4,-1928(gp) # 15198 <errno>
    return (caddr_t) -1;
   10414:	fff00793          	li	a5,-1
   10418:	0180006f          	j	10430 <sbrk+0x60>
  }

  heap_end += incr;
   1041c:	84c1a703          	lw	a4,-1972(gp) # 1516c <heap_end.1982>
   10420:	fdc42783          	lw	a5,-36(s0)
   10424:	00f70733          	add	a4,a4,a5
   10428:	84e1a623          	sw	a4,-1972(gp) # 1516c <heap_end.1982>
  return (caddr_t) prev_heap_end;
   1042c:	fec42783          	lw	a5,-20(s0)
}
   10430:	00078513          	mv	a0,a5
   10434:	02c12403          	lw	s0,44(sp)
   10438:	03010113          	addi	sp,sp,48
   1043c:	00008067          	ret

00010440 <stat>:

int stat(const char *file, struct stat *st) {
   10440:	fe010113          	addi	sp,sp,-32
   10444:	00812e23          	sw	s0,28(sp)
   10448:	02010413          	addi	s0,sp,32
   1044c:	fea42623          	sw	a0,-20(s0)
   10450:	feb42423          	sw	a1,-24(s0)
  st->st_mode = S_IFCHR;
   10454:	fe842783          	lw	a5,-24(s0)
   10458:	00002737          	lui	a4,0x2
   1045c:	00e7a823          	sw	a4,16(a5)
  return 0;
   10460:	00000793          	li	a5,0
}
   10464:	00078513          	mv	a0,a5
   10468:	01c12403          	lw	s0,28(sp)
   1046c:	02010113          	addi	sp,sp,32
   10470:	00008067          	ret

00010474 <times>:

clock_t times(struct tms *buf) {
   10474:	fe010113          	addi	sp,sp,-32
   10478:	00812e23          	sw	s0,28(sp)
   1047c:	02010413          	addi	s0,sp,32
   10480:	fea42623          	sw	a0,-20(s0)
  return -1;
   10484:	fff00793          	li	a5,-1
}
   10488:	00078513          	mv	a0,a5
   1048c:	01c12403          	lw	s0,28(sp)
   10490:	02010113          	addi	sp,sp,32
   10494:	00008067          	ret

00010498 <unlink>:

int unlink(char *name) {
   10498:	fe010113          	addi	sp,sp,-32
   1049c:	00812e23          	sw	s0,28(sp)
   104a0:	02010413          	addi	s0,sp,32
   104a4:	fea42623          	sw	a0,-20(s0)
  errno = ENOENT;
   104a8:	00200713          	li	a4,2
   104ac:	86e1ac23          	sw	a4,-1928(gp) # 15198 <errno>
  return -1;
   104b0:	fff00793          	li	a5,-1
}
   104b4:	00078513          	mv	a0,a5
   104b8:	01c12403          	lw	s0,28(sp)
   104bc:	02010113          	addi	sp,sp,32
   104c0:	00008067          	ret

000104c4 <wait>:

int wait(int *status) {
   104c4:	fe010113          	addi	sp,sp,-32
   104c8:	00812e23          	sw	s0,28(sp)
   104cc:	02010413          	addi	s0,sp,32
   104d0:	fea42623          	sw	a0,-20(s0)
  errno = ECHILD;
   104d4:	00a00713          	li	a4,10
   104d8:	86e1ac23          	sw	a4,-1928(gp) # 15198 <errno>
  return -1;
   104dc:	fff00793          	li	a5,-1
}
   104e0:	00078513          	mv	a0,a5
   104e4:	01c12403          	lw	s0,28(sp)
   104e8:	02010113          	addi	sp,sp,32
   104ec:	00008067          	ret

000104f0 <write>:

int write(int file, char *ptr, int len) {
   104f0:	fd010113          	addi	sp,sp,-48
   104f4:	02112623          	sw	ra,44(sp)
   104f8:	02812423          	sw	s0,40(sp)
   104fc:	03010413          	addi	s0,sp,48
   10500:	fca42e23          	sw	a0,-36(s0)
   10504:	fcb42c23          	sw	a1,-40(s0)
   10508:	fcc42a23          	sw	a2,-44(s0)
  for (todo = 0; todo < len; todo++) {
    htif_putc (*ptr++);
  }
#endif
#ifdef CONSOLE_UART
  for (todo = 0; todo < len; todo++) {
   1050c:	fe042623          	sw	zero,-20(s0)
   10510:	0280006f          	j	10538 <write+0x48>
    ns16550_txchar (*ptr++);
   10514:	fd842783          	lw	a5,-40(s0)
   10518:	00178713          	addi	a4,a5,1
   1051c:	fce42c23          	sw	a4,-40(s0)
   10520:	0007c783          	lbu	a5,0(a5)
   10524:	00078513          	mv	a0,a5
   10528:	4e0000ef          	jal	10a08 <ns16550_txchar>
  for (todo = 0; todo < len; todo++) {
    htif_putc (*ptr++);
  }
#endif
#ifdef CONSOLE_UART
  for (todo = 0; todo < len; todo++) {
   1052c:	fec42783          	lw	a5,-20(s0)
   10530:	00178793          	addi	a5,a5,1
   10534:	fef42623          	sw	a5,-20(s0)
   10538:	fec42703          	lw	a4,-20(s0)
   1053c:	fd442783          	lw	a5,-44(s0)
   10540:	fcf74ae3          	blt	a4,a5,10514 <write+0x24>
    ns16550_txchar (*ptr++);
  }
#endif
  return len;
   10544:	fd442783          	lw	a5,-44(s0)
}
   10548:	00078513          	mv	a0,a5
   1054c:	02c12083          	lw	ra,44(sp)
   10550:	02812403          	lw	s0,40(sp)
   10554:	03010113          	addi	sp,sp,48
   10558:	00008067          	ret

0001055c <gettimeofday>:

#define CLOCK_PERIOD  (10000000)

int gettimeofday(struct timeval *ptimeval, void *ptimezone)
{
   1055c:	fd010113          	addi	sp,sp,-48
   10560:	02112623          	sw	ra,44(sp)
   10564:	02812423          	sw	s0,40(sp)
   10568:	03010413          	addi	s0,sp,48
   1056c:	fca42e23          	sw	a0,-36(s0)
   10570:	fcb42c23          	sw	a1,-40(s0)
    if (ptimeval)
   10574:	fdc42583          	lw	a1,-36(s0)
   10578:	0c058263          	beqz	a1,1063c <gettimeofday+0xe0>
#ifdef __riscv64
	asm ("rdtime %0" : "=r" (tv));
#else
	unsigned int tvh;
	unsigned int tvl;
	asm ("rdtime %0;"
   1057c:	c0102573          	rdtime	a0
   10580:	c81025f3          	rdtimeh	a1
   10584:	fea42623          	sw	a0,-20(s0)
   10588:	feb42423          	sw	a1,-24(s0)
	    "rdtimeh %1 " : "=r" (tvl), "=r" (tvh));
	tv = ((long long)tvh) << 32 | tvl;
   1058c:	fe842583          	lw	a1,-24(s0)
   10590:	00058813          	mv	a6,a1
   10594:	00000893          	li	a7,0
   10598:	00081793          	slli	a5,a6,0x0
   1059c:	00000713          	li	a4,0
   105a0:	fec42583          	lw	a1,-20(s0)
   105a4:	00058613          	mv	a2,a1
   105a8:	00000693          	li	a3,0
   105ac:	00c765b3          	or	a1,a4,a2
   105b0:	feb42023          	sw	a1,-32(s0)
   105b4:	00d7e7b3          	or	a5,a5,a3
   105b8:	fef42223          	sw	a5,-28(s0)
#endif
	ptimeval->tv_sec = tv / CLOCK_PERIOD;
   105bc:	fe042703          	lw	a4,-32(s0)
   105c0:	fe442783          	lw	a5,-28(s0)
   105c4:	00989637          	lui	a2,0x989
   105c8:	68060613          	addi	a2,a2,1664 # 989680 <_gp+0x973d60>
   105cc:	00000693          	li	a3,0
   105d0:	00070513          	mv	a0,a4
   105d4:	00078593          	mv	a1,a5
   105d8:	4ec000ef          	jal	10ac4 <__divdi3>
   105dc:	00050713          	mv	a4,a0
   105e0:	00058793          	mv	a5,a1
   105e4:	fdc42683          	lw	a3,-36(s0)
   105e8:	00e6a023          	sw	a4,0(a3)
   105ec:	00f6a223          	sw	a5,4(a3)
	ptimeval->tv_usec = tv % CLOCK_PERIOD / (CLOCK_PERIOD / 1000000);
   105f0:	fe042703          	lw	a4,-32(s0)
   105f4:	fe442783          	lw	a5,-28(s0)
   105f8:	00989637          	lui	a2,0x989
   105fc:	68060613          	addi	a2,a2,1664 # 989680 <_gp+0x973d60>
   10600:	00000693          	li	a3,0
   10604:	00070513          	mv	a0,a4
   10608:	00078593          	mv	a1,a5
   1060c:	189000ef          	jal	10f94 <__moddi3>
   10610:	00050713          	mv	a4,a0
   10614:	00058793          	mv	a5,a1
   10618:	00a00613          	li	a2,10
   1061c:	00000693          	li	a3,0
   10620:	00070513          	mv	a0,a4
   10624:	00078593          	mv	a1,a5
   10628:	49c000ef          	jal	10ac4 <__divdi3>
   1062c:	00050713          	mv	a4,a0
   10630:	00058793          	mv	a5,a1
   10634:	fdc42783          	lw	a5,-36(s0)
   10638:	00e7a423          	sw	a4,8(a5)
    }

    return 0;
   1063c:	00000793          	li	a5,0
}
   10640:	00078513          	mv	a0,a5
   10644:	02c12083          	lw	ra,44(sp)
   10648:	02812403          	lw	s0,40(sp)
   1064c:	03010113          	addi	sp,sp,48
   10650:	00008067          	ret

00010654 <sleep>:

unsigned int sleep(unsigned int seconds)
{
   10654:	fd010113          	addi	sp,sp,-48
   10658:	02112623          	sw	ra,44(sp)
   1065c:	02812423          	sw	s0,40(sp)
   10660:	03212223          	sw	s2,36(sp)
   10664:	03312023          	sw	s3,32(sp)
   10668:	03010413          	addi	s0,sp,48
   1066c:	fca42e23          	sw	a0,-36(s0)
    struct timeval tv;
    gettimeofday(&tv, NULL);
   10670:	fe040793          	addi	a5,s0,-32
   10674:	00000593          	li	a1,0
   10678:	00078513          	mv	a0,a5
   1067c:	ee1ff0ef          	jal	1055c <gettimeofday>
    seconds += tv.tv_sec;
   10680:	fe042703          	lw	a4,-32(s0)
   10684:	fe442783          	lw	a5,-28(s0)
   10688:	fdc42783          	lw	a5,-36(s0)
   1068c:	00e787b3          	add	a5,a5,a4
   10690:	fcf42e23          	sw	a5,-36(s0)

    while (tv.tv_sec < seconds)
   10694:	0140006f          	j	106a8 <sleep+0x54>
	gettimeofday(&tv, NULL);
   10698:	fe040793          	addi	a5,s0,-32
   1069c:	00000593          	li	a1,0
   106a0:	00078513          	mv	a0,a5
   106a4:	eb9ff0ef          	jal	1055c <gettimeofday>
{
    struct timeval tv;
    gettimeofday(&tv, NULL);
    seconds += tv.tv_sec;

    while (tv.tv_sec < seconds)
   106a8:	fe042703          	lw	a4,-32(s0)
   106ac:	fe442783          	lw	a5,-28(s0)
   106b0:	fdc42683          	lw	a3,-36(s0)
   106b4:	00068913          	mv	s2,a3
   106b8:	00000993          	li	s3,0
   106bc:	00078693          	mv	a3,a5
   106c0:	fd36ece3          	bltu	a3,s3,10698 <sleep+0x44>
   106c4:	00078693          	mv	a3,a5
   106c8:	00d99663          	bne	s3,a3,106d4 <sleep+0x80>
   106cc:	00070793          	mv	a5,a4
   106d0:	fd27e4e3          	bltu	a5,s2,10698 <sleep+0x44>
	gettimeofday(&tv, NULL);

    return 0;
   106d4:	00000793          	li	a5,0
}
   106d8:	00078513          	mv	a0,a5
   106dc:	02c12083          	lw	ra,44(sp)
   106e0:	02812403          	lw	s0,40(sp)
   106e4:	02412903          	lw	s2,36(sp)
   106e8:	02012983          	lw	s3,32(sp)
   106ec:	03010113          	addi	sp,sp,48
   106f0:	00008067          	ret

000106f4 <htif_tohost>:
#define HTIF_CMD_WRITE      (0x01UL)
#define HTIF_CMD_IDENTITY   (0xFFUL)

static inline void htif_tohost(unsigned long dev,
	unsigned long cmd, unsigned long data)
{
   106f4:	fd010113          	addi	sp,sp,-48
   106f8:	02812623          	sw	s0,44(sp)
   106fc:	03010413          	addi	s0,sp,48
   10700:	fca42e23          	sw	a0,-36(s0)
   10704:	fcb42c23          	sw	a1,-40(s0)
   10708:	fcc42a23          	sw	a2,-44(s0)
	unsigned long packet;
	packet = (dev << HTIF_DEV_SHIFT) | (cmd << HTIF_CMD_SHIFT) | data;
   1070c:	fdc42783          	lw	a5,-36(s0)
   10710:	01879713          	slli	a4,a5,0x18
   10714:	fd842783          	lw	a5,-40(s0)
   10718:	01079793          	slli	a5,a5,0x10
   1071c:	00f76733          	or	a4,a4,a5
   10720:	fd442783          	lw	a5,-44(s0)
   10724:	00f767b3          	or	a5,a4,a5
   10728:	fef42623          	sw	a5,-20(s0)
	while (csr_swap(mtohost, packet) != 0);
   1072c:	00000013          	nop
   10730:	fec42783          	lw	a5,-20(s0)
   10734:	fef42423          	sw	a5,-24(s0)
   10738:	fe842783          	lw	a5,-24(s0)
   1073c:	780797f3          	csrrw	a5,mtohost,a5
   10740:	fef42423          	sw	a5,-24(s0)
   10744:	fe842783          	lw	a5,-24(s0)
   10748:	fe0794e3          	bnez	a5,10730 <htif_tohost+0x3c>
}
   1074c:	00000013          	nop
   10750:	02c12403          	lw	s0,44(sp)
   10754:	03010113          	addi	sp,sp,48
   10758:	00008067          	ret

0001075c <htif_fromhost>:

static inline unsigned long htif_fromhost(void)
{
   1075c:	fe010113          	addi	sp,sp,-32
   10760:	00812e23          	sw	s0,28(sp)
   10764:	02010413          	addi	s0,sp,32
	unsigned long data;
	while ((data = csr_swap(mfromhost, 0)) == 0);
   10768:	00000013          	nop
   1076c:	fe042623          	sw	zero,-20(s0)
   10770:	fec42783          	lw	a5,-20(s0)
   10774:	781797f3          	csrrw	a5,mfromhost,a5
   10778:	fef42623          	sw	a5,-20(s0)
   1077c:	fec42783          	lw	a5,-20(s0)
   10780:	fef42423          	sw	a5,-24(s0)
   10784:	fe842783          	lw	a5,-24(s0)
   10788:	fe0782e3          	beqz	a5,1076c <htif_fromhost+0x10>
	return data;
   1078c:	fe842783          	lw	a5,-24(s0)
}
   10790:	00078513          	mv	a0,a5
   10794:	01c12403          	lw	s0,28(sp)
   10798:	02010113          	addi	sp,sp,32
   1079c:	00008067          	ret

000107a0 <htif_putc>:

#define HTIF_DEV_CONSOLE        (1U)

void htif_putc(char c)
{
   107a0:	fe010113          	addi	sp,sp,-32
   107a4:	00112e23          	sw	ra,28(sp)
   107a8:	00812c23          	sw	s0,24(sp)
   107ac:	02010413          	addi	s0,sp,32
   107b0:	00050793          	mv	a5,a0
   107b4:	fef407a3          	sb	a5,-17(s0)
    htif_tohost(HTIF_DEV_CONSOLE, HTIF_CMD_WRITE, c);
   107b8:	fef44783          	lbu	a5,-17(s0)
   107bc:	00078613          	mv	a2,a5
   107c0:	00100593          	li	a1,1
   107c4:	00100513          	li	a0,1
   107c8:	f2dff0ef          	jal	106f4 <htif_tohost>
}
   107cc:	00000013          	nop
   107d0:	01c12083          	lw	ra,28(sp)
   107d4:	01812403          	lw	s0,24(sp)
   107d8:	02010113          	addi	sp,sp,32
   107dc:	00008067          	ret

000107e0 <htif_getc>:

char htif_getc(void)
{
   107e0:	fe010113          	addi	sp,sp,-32
   107e4:	00112e23          	sw	ra,28(sp)
   107e8:	00812c23          	sw	s0,24(sp)
   107ec:	02010413          	addi	s0,sp,32
    htif_tohost(HTIF_DEV_CONSOLE, HTIF_CMD_READ, 0);
   107f0:	00000613          	li	a2,0
   107f4:	00000593          	li	a1,0
   107f8:	00100513          	li	a0,1
   107fc:	ef9ff0ef          	jal	106f4 <htif_tohost>

    // poll interrupt
    unsigned long mip = csr_read(mip);
   10800:	344027f3          	csrr	a5,mip
   10804:	00078093          	mv	ra,a5
   10808:	00008793          	mv	a5,ra
   1080c:	fef42623          	sw	a5,-20(s0)
    while (!(mip & 0x40000000))
   10810:	00000013          	nop
   10814:	fec42703          	lw	a4,-20(s0)
   10818:	400007b7          	lui	a5,0x40000
   1081c:	00f777b3          	and	a5,a4,a5
   10820:	fe078ae3          	beqz	a5,10814 <htif_getc+0x34>
	;  // nothing

    unsigned long data = htif_fromhost();
   10824:	f39ff0ef          	jal	1075c <htif_fromhost>
   10828:	fea42423          	sw	a0,-24(s0)
    return data;
   1082c:	fe842783          	lw	a5,-24(s0)
   10830:	0ff7f793          	andi	a5,a5,255
}
   10834:	00078513          	mv	a0,a5
   10838:	01c12083          	lw	ra,28(sp)
   1083c:	01812403          	lw	s0,24(sp)
   10840:	02010113          	addi	sp,sp,32
   10844:	00008067          	ret

00010848 <read_cycle>:
// The following are interfaces to inline RISC-V assembly instructions
//     RDCYCLE, RDTIME, RDINSTRET
// For all of them, the result is left in v0 (= x2) per calling convention

uint64_t  read_cycle (void)
{
   10848:	fe010113          	addi	sp,sp,-32
   1084c:	00812e23          	sw	s0,28(sp)
   10850:	02010413          	addi	s0,sp,32
    uint64_t result;

    asm volatile ("RDCYCLE %0" : "=r" (result));
   10854:	c0002773          	rdcycle	a4
   10858:	fee42423          	sw	a4,-24(s0)
   1085c:	fef42623          	sw	a5,-20(s0)
    return result;
   10860:	fe842703          	lw	a4,-24(s0)
   10864:	fec42783          	lw	a5,-20(s0)
}
   10868:	00070513          	mv	a0,a4
   1086c:	00078593          	mv	a1,a5
   10870:	01c12403          	lw	s0,28(sp)
   10874:	02010113          	addi	sp,sp,32
   10878:	00008067          	ret

0001087c <read_time>:

uint64_t  read_time (void)
{
   1087c:	fe010113          	addi	sp,sp,-32
   10880:	00812e23          	sw	s0,28(sp)
   10884:	02010413          	addi	s0,sp,32
    uint64_t result;

    asm volatile ("RDTIME %0" : "=r" (result));
   10888:	c0102773          	rdtime	a4
   1088c:	fee42423          	sw	a4,-24(s0)
   10890:	fef42623          	sw	a5,-20(s0)
    return result;
   10894:	fe842703          	lw	a4,-24(s0)
   10898:	fec42783          	lw	a5,-20(s0)
}
   1089c:	00070513          	mv	a0,a4
   108a0:	00078593          	mv	a1,a5
   108a4:	01c12403          	lw	s0,28(sp)
   108a8:	02010113          	addi	sp,sp,32
   108ac:	00008067          	ret

000108b0 <read_instret>:

uint64_t  read_instret (void)
{
   108b0:	fe010113          	addi	sp,sp,-32
   108b4:	00812e23          	sw	s0,28(sp)
   108b8:	02010413          	addi	s0,sp,32
    uint64_t result;

    asm volatile ("RDINSTRET %0" : "=r" (result));
   108bc:	c0202773          	rdinstret	a4
   108c0:	fee42423          	sw	a4,-24(s0)
   108c4:	fef42623          	sw	a5,-20(s0)
    return result;
   108c8:	fe842703          	lw	a4,-24(s0)
   108cc:	fec42783          	lw	a5,-20(s0)
}
   108d0:	00070513          	mv	a0,a4
   108d4:	00078593          	mv	a1,a5
   108d8:	01c12403          	lw	s0,28(sp)
   108dc:	02010113          	addi	sp,sp,32
   108e0:	00008067          	ret

000108e4 <ns16550_init>:
static struct ns16550_pio * pio = (void*)NS16550_BASE;

#ifdef CONSOLE_UART
__attribute__ ((constructor))
static int ns16550_init(void)
{
   108e4:	fe010113          	addi	sp,sp,-32
   108e8:	00812e23          	sw	s0,28(sp)
   108ec:	02010413          	addi	s0,sp,32
  uint32_t divisor;

  pio->ier = 0;
   108f0:	8081a783          	lw	a5,-2040(gp) # 15128 <pio>
   108f4:	00078223          	sb	zero,4(a5) # 40000004 <_gp+0x3ffea6e4>

  divisor = NS16550_CLOCK_RATE / (16 * DEFAULT_BAUDRATE);
   108f8:	01a00793          	li	a5,26
   108fc:	fef42623          	sw	a5,-20(s0)
  pio->lcr |= LCR_DLAB;
   10900:	8081a783          	lw	a5,-2040(gp) # 15128 <pio>
   10904:	8081a703          	lw	a4,-2040(gp) # 15128 <pio>
   10908:	00c74703          	lbu	a4,12(a4) # 200c <_reset+0x1e0c>
   1090c:	0ff77713          	andi	a4,a4,255
   10910:	f8076713          	ori	a4,a4,-128
   10914:	0ff77713          	andi	a4,a4,255
   10918:	00e78623          	sb	a4,12(a5)
  pio->dll = divisor & 0xff;
   1091c:	8081a783          	lw	a5,-2040(gp) # 15128 <pio>
   10920:	fec42703          	lw	a4,-20(s0)
   10924:	0ff77713          	andi	a4,a4,255
   10928:	00e78023          	sb	a4,0(a5)
  pio->dlm = (divisor >> 8) & 0xff;
   1092c:	8081a783          	lw	a5,-2040(gp) # 15128 <pio>
   10930:	fec42703          	lw	a4,-20(s0)
   10934:	00875713          	srli	a4,a4,0x8
   10938:	0ff77713          	andi	a4,a4,255
   1093c:	00e78223          	sb	a4,4(a5)
  pio->lcr &= ~LCR_DLAB;
   10940:	8081a783          	lw	a5,-2040(gp) # 15128 <pio>
   10944:	8081a703          	lw	a4,-2040(gp) # 15128 <pio>
   10948:	00c74703          	lbu	a4,12(a4)
   1094c:	0ff77713          	andi	a4,a4,255
   10950:	07f77713          	andi	a4,a4,127
   10954:	0ff77713          	andi	a4,a4,255
   10958:	00e78623          	sb	a4,12(a5)

  pio->lcr = LCR_WLS8;
   1095c:	8081a783          	lw	a5,-2040(gp) # 15128 <pio>
   10960:	00300713          	li	a4,3
   10964:	00e78623          	sb	a4,12(a5)
  pio->fcr = FCR_FE;
   10968:	8081a783          	lw	a5,-2040(gp) # 15128 <pio>
   1096c:	00100713          	li	a4,1
   10970:	00e78423          	sb	a4,8(a5)
  pio->mcr = MCR_RTS;
   10974:	8081a783          	lw	a5,-2040(gp) # 15128 <pio>
   10978:	00200713          	li	a4,2
   1097c:	00e78823          	sb	a4,16(a5)

  return 0;
   10980:	00000793          	li	a5,0
}
   10984:	00078513          	mv	a0,a5
   10988:	01c12403          	lw	s0,28(sp)
   1098c:	02010113          	addi	sp,sp,32
   10990:	00008067          	ret

00010994 <ns16550_rxready>:
#endif


int ns16550_rxready(void)
{
   10994:	ff010113          	addi	sp,sp,-16
   10998:	00812623          	sw	s0,12(sp)
   1099c:	01010413          	addi	s0,sp,16
  return (pio->lsr & LSR_DR) != 0;
   109a0:	8081a783          	lw	a5,-2040(gp) # 15128 <pio>
   109a4:	0147c783          	lbu	a5,20(a5)
   109a8:	0ff7f793          	andi	a5,a5,255
   109ac:	0017f793          	andi	a5,a5,1
   109b0:	00f037b3          	snez	a5,a5
   109b4:	0ff7f793          	andi	a5,a5,255
}
   109b8:	00078513          	mv	a0,a5
   109bc:	00c12403          	lw	s0,12(sp)
   109c0:	01010113          	addi	sp,sp,16
   109c4:	00008067          	ret

000109c8 <ns16550_rxchar>:


int ns16550_rxchar(void)
{
   109c8:	ff010113          	addi	sp,sp,-16
   109cc:	00812623          	sw	s0,12(sp)
   109d0:	01010413          	addi	s0,sp,16
  while ((pio->lsr & LSR_DR) == 0)
   109d4:	00000013          	nop
   109d8:	8081a783          	lw	a5,-2040(gp) # 15128 <pio>
   109dc:	0147c783          	lbu	a5,20(a5)
   109e0:	0ff7f793          	andi	a5,a5,255
   109e4:	0017f793          	andi	a5,a5,1
   109e8:	fe0788e3          	beqz	a5,109d8 <ns16550_rxchar+0x10>
    ;  // nothing

  return pio->rbr;
   109ec:	8081a783          	lw	a5,-2040(gp) # 15128 <pio>
   109f0:	0007c783          	lbu	a5,0(a5)
   109f4:	0ff7f793          	andi	a5,a5,255
}
   109f8:	00078513          	mv	a0,a5
   109fc:	00c12403          	lw	s0,12(sp)
   10a00:	01010113          	addi	sp,sp,16
   10a04:	00008067          	ret

00010a08 <ns16550_txchar>:


int ns16550_txchar(int c)
{
   10a08:	fe010113          	addi	sp,sp,-32
   10a0c:	00812e23          	sw	s0,28(sp)
   10a10:	02010413          	addi	s0,sp,32
   10a14:	fea42623          	sw	a0,-20(s0)
  while ((pio->lsr & LSR_THRE) == 0)
   10a18:	00000013          	nop
   10a1c:	8081a783          	lw	a5,-2040(gp) # 15128 <pio>
   10a20:	0147c783          	lbu	a5,20(a5)
   10a24:	0ff7f793          	andi	a5,a5,255
   10a28:	0207f793          	andi	a5,a5,32
   10a2c:	fe0788e3          	beqz	a5,10a1c <ns16550_txchar+0x14>
    ;  // nothing

  pio->thr = c;
   10a30:	8081a783          	lw	a5,-2040(gp) # 15128 <pio>
   10a34:	fec42703          	lw	a4,-20(s0)
   10a38:	0ff77713          	andi	a4,a4,255
   10a3c:	00e78023          	sb	a4,0(a5)

  return c;
   10a40:	fec42783          	lw	a5,-20(s0)
}
   10a44:	00078513          	mv	a0,a5
   10a48:	01c12403          	lw	s0,28(sp)
   10a4c:	02010113          	addi	sp,sp,32
   10a50:	00008067          	ret

00010a54 <ns16550_flush>:


void ns16550_flush(void)
{
   10a54:	ff010113          	addi	sp,sp,-16
   10a58:	00812623          	sw	s0,12(sp)
   10a5c:	01010413          	addi	s0,sp,16
  while ((pio->lsr & LSR_TEMT) == 0)
   10a60:	00000013          	nop
   10a64:	8081a783          	lw	a5,-2040(gp) # 15128 <pio>
   10a68:	0147c783          	lbu	a5,20(a5)
   10a6c:	0ff7f793          	andi	a5,a5,255
   10a70:	0407f793          	andi	a5,a5,64
   10a74:	fe0788e3          	beqz	a5,10a64 <ns16550_flush+0x10>
    ;  // nothing
}
   10a78:	00000013          	nop
   10a7c:	00c12403          	lw	s0,12(sp)
   10a80:	01010113          	addi	sp,sp,16
   10a84:	00008067          	ret

00010a88 <main>:
#include <stdio.h>

int main (int argc, char *argv[])
{
   10a88:	fe010113          	addi	sp,sp,-32
   10a8c:	00112e23          	sw	ra,28(sp)
   10a90:	00812c23          	sw	s0,24(sp)
   10a94:	02010413          	addi	s0,sp,32
   10a98:	fea42623          	sw	a0,-20(s0)
   10a9c:	feb42423          	sw	a1,-24(s0)
    printf ("Hello World!\n");
   10aa0:	000147b7          	lui	a5,0x14
   10aa4:	e2478513          	addi	a0,a5,-476 # 13e24 <fclose+0xc>
   10aa8:	341000ef          	jal	115e8 <puts>
    return 0;
   10aac:	00000793          	li	a5,0
}
   10ab0:	00078513          	mv	a0,a5
   10ab4:	01c12083          	lw	ra,28(sp)
   10ab8:	01812403          	lw	s0,24(sp)
   10abc:	02010113          	addi	sp,sp,32
   10ac0:	00008067          	ret

00010ac4 <__divdi3>:
  Wtype c = 0;
  DWunion uu = {.ll = u};
  DWunion vv = {.ll = v};
  DWtype w;

  if (uu.s.high < 0)
   10ac4:	2605ce63          	bltz	a1,10d40 <__divdi3+0x27c>
   10ac8:	00050313          	mv	t1,a0
   10acc:	00058793          	mv	a5,a1

#ifdef L_divdi3
DWtype
__divdi3 (DWtype u, DWtype v)
{
  Wtype c = 0;
   10ad0:	00000893          	li	a7,0
  DWtype w;

  if (uu.s.high < 0)
    c = ~c,
    uu.ll = -uu.ll;
  if (vv.s.high < 0)
   10ad4:	2406ca63          	bltz	a3,10d28 <__divdi3+0x264>
  DWunion rr;
  UWtype d0, d1, n0, n1, n2;
  UWtype q0, q1;
  UWtype b, bm;

  d0 = dd.s.low;
   10ad8:	00060293          	mv	t0,a2
  d1 = dd.s.high;
  n0 = nn.s.low;
   10adc:	00030393          	mv	t2,t1
  n1 = nn.s.high;
   10ae0:	00078593          	mv	a1,a5
	}
    }

#else /* UDIV_NEEDS_NORMALIZATION */

  if (d1 == 0)
   10ae4:	0e069e63          	bnez	a3,10be0 <__divdi3+0x11c>
    {
      if (d0 > n1)
   10ae8:	16c7f263          	bleu	a2,a5,10c4c <__divdi3+0x188>
	{
	  /* 0q = nn / 0D */

	  count_leading_zeros (bm, d0);
   10aec:	00010737          	lui	a4,0x10
   10af0:	26e66c63          	bltu	a2,a4,10d68 <__divdi3+0x2a4>
   10af4:	01000737          	lui	a4,0x1000
   10af8:	00e63733          	sltu	a4,a2,a4
   10afc:	00174713          	xori	a4,a4,1
   10b00:	40e00733          	neg	a4,a4
   10b04:	00877713          	andi	a4,a4,8
   10b08:	01070713          	addi	a4,a4,16 # 1000010 <_gp+0xfea6f0>
   10b0c:	000146b7          	lui	a3,0x14
   10b10:	00e65533          	srl	a0,a2,a4
   10b14:	e3468693          	addi	a3,a3,-460 # 13e34 <__clz_tab>
   10b18:	00d506b3          	add	a3,a0,a3
   10b1c:	0006c683          	lbu	a3,0(a3)
   10b20:	00e68733          	add	a4,a3,a4
   10b24:	02000693          	li	a3,32
   10b28:	40e686b3          	sub	a3,a3,a4

	  if (bm != 0)
   10b2c:	00068c63          	beqz	a3,10b44 <__divdi3+0x80>
	    {
	      /* Normalize, i.e. make the most significant bit of the
		 denominator set.  */

	      d0 = d0 << bm;
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
   10b30:	00d797b3          	sll	a5,a5,a3
   10b34:	00e35733          	srl	a4,t1,a4
	  if (bm != 0)
	    {
	      /* Normalize, i.e. make the most significant bit of the
		 denominator set.  */

	      d0 = d0 << bm;
   10b38:	00d612b3          	sll	t0,a2,a3
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
   10b3c:	00f765b3          	or	a1,a4,a5
	      n0 = n0 << bm;
   10b40:	00d313b3          	sll	t2,t1,a3
	    }

	  udiv_qrnnd (q0, n0, n1, n0, d0);
   10b44:	0102d613          	srli	a2,t0,0x10
   10b48:	02c5d533          	divu	a0,a1,a2
   10b4c:	01029693          	slli	a3,t0,0x10
   10b50:	0106d693          	srli	a3,a3,0x10
   10b54:	0103d713          	srli	a4,t2,0x10
   10b58:	02c5f7b3          	remu	a5,a1,a2
   10b5c:	02a68833          	mul	a6,a3,a0
   10b60:	01079793          	slli	a5,a5,0x10
   10b64:	00f765b3          	or	a1,a4,a5
   10b68:	0105fc63          	bleu	a6,a1,10b80 <__divdi3+0xbc>
   10b6c:	005585b3          	add	a1,a1,t0
   10b70:	fff50793          	addi	a5,a0,-1
   10b74:	0055e463          	bltu	a1,t0,10b7c <__divdi3+0xb8>
   10b78:	4105e263          	bltu	a1,a6,10f7c <__divdi3+0x4b8>
   10b7c:	00078513          	mv	a0,a5
   10b80:	410585b3          	sub	a1,a1,a6
   10b84:	02c5d7b3          	divu	a5,a1,a2
   10b88:	01039393          	slli	t2,t2,0x10
   10b8c:	0103d393          	srli	t2,t2,0x10
   10b90:	02c5f5b3          	remu	a1,a1,a2
   10b94:	02f686b3          	mul	a3,a3,a5
   10b98:	01059593          	slli	a1,a1,0x10
   10b9c:	00b3e5b3          	or	a1,t2,a1
   10ba0:	00d5fe63          	bleu	a3,a1,10bbc <__divdi3+0xf8>
   10ba4:	00b285b3          	add	a1,t0,a1
   10ba8:	fff78713          	addi	a4,a5,-1
   10bac:	0055e663          	bltu	a1,t0,10bb8 <__divdi3+0xf4>
   10bb0:	ffe78793          	addi	a5,a5,-2
   10bb4:	00d5e463          	bltu	a1,a3,10bbc <__divdi3+0xf8>
   10bb8:	00070793          	mv	a5,a4
   10bbc:	01051513          	slli	a0,a0,0x10
   10bc0:	00f56533          	or	a0,a0,a5
   10bc4:	00000593          	li	a1,0
  if (vv.s.high < 0)
    c = ~c,
    vv.ll = -vv.ll;

  w = __udivmoddi4 (uu.ll, vv.ll, (UDWtype *) 0);
  if (c)
   10bc8:	00088a63          	beqz	a7,10bdc <__divdi3+0x118>
    w = -w;
   10bcc:	40a00533          	neg	a0,a0
   10bd0:	00a037b3          	snez	a5,a0
   10bd4:	40b005b3          	neg	a1,a1
   10bd8:	40f585b3          	sub	a1,a1,a5

  return w;
}
   10bdc:	00008067          	ret
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
   10be0:	00d7f863          	bleu	a3,a5,10bf0 <__divdi3+0x12c>
   10be4:	00000593          	li	a1,0
   10be8:	00000513          	li	a0,0
   10bec:	fddff06f          	j	10bc8 <__divdi3+0x104>
	}
      else
	{
	  /* 0q = NN / dd */

	  count_leading_zeros (bm, d1);
   10bf0:	00010737          	lui	a4,0x10
   10bf4:	18e6e263          	bltu	a3,a4,10d78 <__divdi3+0x2b4>
   10bf8:	01000737          	lui	a4,0x1000
   10bfc:	00e6b733          	sltu	a4,a3,a4
   10c00:	00174713          	xori	a4,a4,1
   10c04:	40e00733          	neg	a4,a4
   10c08:	00877713          	andi	a4,a4,8
   10c0c:	01070713          	addi	a4,a4,16 # 1000010 <_gp+0xfea6f0>
   10c10:	000145b7          	lui	a1,0x14
   10c14:	00e6d533          	srl	a0,a3,a4
   10c18:	e3458593          	addi	a1,a1,-460 # 13e34 <__clz_tab>
   10c1c:	00b505b3          	add	a1,a0,a1
   10c20:	0005c803          	lbu	a6,0(a1)
   10c24:	02000293          	li	t0,32
   10c28:	00e80833          	add	a6,a6,a4
   10c2c:	410282b3          	sub	t0,t0,a6
	  if (bm == 0)
   10c30:	14029c63          	bnez	t0,10d88 <__divdi3+0x2c4>

		 This special case is necessary, not an optimization.  */

	      /* The condition on the next line takes advantage of that
		 n1 >= d1 (true due to program flow).  */
	      if (n1 > d1 || n0 >= d0)
   10c34:	00000593          	li	a1,0
   10c38:	00100513          	li	a0,1
   10c3c:	f8f6e6e3          	bltu	a3,a5,10bc8 <__divdi3+0x104>
   10c40:	00c33533          	sltu	a0,t1,a2
   10c44:	00154513          	xori	a0,a0,1
   10c48:	f81ff06f          	j	10bc8 <__divdi3+0x104>
	}
      else
	{
	  /* qq = NN / 0d */

	  if (d0 == 0)
   10c4c:	00061663          	bnez	a2,10c58 <__divdi3+0x194>
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
   10c50:	00100293          	li	t0,1
   10c54:	02d2d2b3          	divu	t0,t0,a3

	  count_leading_zeros (bm, d0);
   10c58:	00010737          	lui	a4,0x10
   10c5c:	0ee2ee63          	bltu	t0,a4,10d58 <__divdi3+0x294>
   10c60:	01000737          	lui	a4,0x1000
   10c64:	00e2b733          	sltu	a4,t0,a4
   10c68:	00174713          	xori	a4,a4,1
   10c6c:	40e00733          	neg	a4,a4
   10c70:	00877713          	andi	a4,a4,8
   10c74:	01070713          	addi	a4,a4,16 # 1000010 <_gp+0xfea6f0>
   10c78:	000146b7          	lui	a3,0x14
   10c7c:	00e2d633          	srl	a2,t0,a4
   10c80:	e3468693          	addi	a3,a3,-460 # 13e34 <__clz_tab>
   10c84:	00d606b3          	add	a3,a2,a3
   10c88:	0006c503          	lbu	a0,0(a3)
   10c8c:	02000e13          	li	t3,32
   10c90:	00e50533          	add	a0,a0,a4
   10c94:	40ae0e33          	sub	t3,t3,a0

	  if (bm == 0)
   10c98:	1e0e1663          	bnez	t3,10e84 <__divdi3+0x3c0>
   10c9c:	01029813          	slli	a6,t0,0x10
		 leading quotient digit q1 = 1).

		 This special case is necessary, not an optimization.
		 (Shifts counts of W_TYPE_SIZE are undefined.)  */

	      n1 -= d0;
   10ca0:	405786b3          	sub	a3,a5,t0
   10ca4:	0102d613          	srli	a2,t0,0x10
   10ca8:	01085813          	srli	a6,a6,0x10
   10cac:	00100593          	li	a1,1
	      udiv_qrnnd (q1, n1, n2, n1, d0);
	    }

	  /* n1 != d0...  */

	  udiv_qrnnd (q0, n0, n1, n0, d0);
   10cb0:	0103d793          	srli	a5,t2,0x10
   10cb4:	02c6d533          	divu	a0,a3,a2
   10cb8:	02c6f6b3          	remu	a3,a3,a2
   10cbc:	03050733          	mul	a4,a0,a6
   10cc0:	01069693          	slli	a3,a3,0x10
   10cc4:	00d7e7b3          	or	a5,a5,a3
   10cc8:	00e7fc63          	bleu	a4,a5,10ce0 <__divdi3+0x21c>
   10ccc:	005787b3          	add	a5,a5,t0
   10cd0:	fff50693          	addi	a3,a0,-1
   10cd4:	0057e463          	bltu	a5,t0,10cdc <__divdi3+0x218>
   10cd8:	2ae7e863          	bltu	a5,a4,10f88 <__divdi3+0x4c4>
   10cdc:	00068513          	mv	a0,a3
   10ce0:	40e78733          	sub	a4,a5,a4
   10ce4:	02c757b3          	divu	a5,a4,a2
   10ce8:	01039393          	slli	t2,t2,0x10
   10cec:	0103d393          	srli	t2,t2,0x10
   10cf0:	02c77733          	remu	a4,a4,a2
   10cf4:	03078833          	mul	a6,a5,a6
   10cf8:	01071713          	slli	a4,a4,0x10
   10cfc:	00e3e733          	or	a4,t2,a4
   10d00:	01077e63          	bleu	a6,a4,10d1c <__divdi3+0x258>
   10d04:	00e28733          	add	a4,t0,a4
   10d08:	fff78693          	addi	a3,a5,-1
   10d0c:	00576663          	bltu	a4,t0,10d18 <__divdi3+0x254>
   10d10:	ffe78793          	addi	a5,a5,-2
   10d14:	01076463          	bltu	a4,a6,10d1c <__divdi3+0x258>
   10d18:	00068793          	mv	a5,a3
   10d1c:	01051513          	slli	a0,a0,0x10
   10d20:	00f56533          	or	a0,a0,a5
   10d24:	ea5ff06f          	j	10bc8 <__divdi3+0x104>
  if (uu.s.high < 0)
    c = ~c,
    uu.ll = -uu.ll;
  if (vv.s.high < 0)
    c = ~c,
    vv.ll = -vv.ll;
   10d28:	40c00633          	neg	a2,a2
   10d2c:	00c03733          	snez	a4,a2
   10d30:	40d006b3          	neg	a3,a3

  if (uu.s.high < 0)
    c = ~c,
    uu.ll = -uu.ll;
  if (vv.s.high < 0)
    c = ~c,
   10d34:	fff8c893          	not	a7,a7
    vv.ll = -vv.ll;
   10d38:	40e686b3          	sub	a3,a3,a4
   10d3c:	d9dff06f          	j	10ad8 <__divdi3+0x14>
  DWunion vv = {.ll = v};
  DWtype w;

  if (uu.s.high < 0)
    c = ~c,
    uu.ll = -uu.ll;
   10d40:	40a00333          	neg	t1,a0
   10d44:	00603733          	snez	a4,t1
   10d48:	40b007b3          	neg	a5,a1
   10d4c:	40e787b3          	sub	a5,a5,a4
  DWunion uu = {.ll = u};
  DWunion vv = {.ll = v};
  DWtype w;

  if (uu.s.high < 0)
    c = ~c,
   10d50:	fff00893          	li	a7,-1
   10d54:	d81ff06f          	j	10ad4 <__divdi3+0x10>
	  /* qq = NN / 0d */

	  if (d0 == 0)
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */

	  count_leading_zeros (bm, d0);
   10d58:	0ff00713          	li	a4,255
   10d5c:	00573733          	sltu	a4,a4,t0
   10d60:	00371713          	slli	a4,a4,0x3
   10d64:	f15ff06f          	j	10c78 <__divdi3+0x1b4>
    {
      if (d0 > n1)
	{
	  /* 0q = nn / 0D */

	  count_leading_zeros (bm, d0);
   10d68:	0ff00713          	li	a4,255
   10d6c:	00c73733          	sltu	a4,a4,a2
   10d70:	00371713          	slli	a4,a4,0x3
   10d74:	d99ff06f          	j	10b0c <__divdi3+0x48>
	}
      else
	{
	  /* 0q = NN / dd */

	  count_leading_zeros (bm, d1);
   10d78:	0ff00713          	li	a4,255
   10d7c:	00d73733          	sltu	a4,a4,a3
   10d80:	00371713          	slli	a4,a4,0x3
   10d84:	e8dff06f          	j	10c10 <__divdi3+0x14c>
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
   10d88:	01065733          	srl	a4,a2,a6
   10d8c:	005696b3          	sll	a3,a3,t0
   10d90:	00e6e6b3          	or	a3,a3,a4
	      d0 = d0 << bm;
	      n2 = n1 >> b;
   10d94:	0107d5b3          	srl	a1,a5,a6
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   10d98:	0106de93          	srli	t4,a3,0x10
   10d9c:	03d5de33          	divu	t3,a1,t4
   10da0:	01069393          	slli	t2,a3,0x10
   10da4:	0103d393          	srli	t2,t2,0x10
	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
   10da8:	005797b3          	sll	a5,a5,t0
   10dac:	01035833          	srl	a6,t1,a6
   10db0:	00f867b3          	or	a5,a6,a5
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   10db4:	0107d713          	srli	a4,a5,0x10
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
   10db8:	00561633          	sll	a2,a2,t0
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   10dbc:	03d5f5b3          	remu	a1,a1,t4
   10dc0:	03c38533          	mul	a0,t2,t3
   10dc4:	01059593          	slli	a1,a1,0x10
   10dc8:	00b76733          	or	a4,a4,a1
   10dcc:	00a77e63          	bleu	a0,a4,10de8 <__divdi3+0x324>
   10dd0:	00d70733          	add	a4,a4,a3
   10dd4:	fffe0593          	addi	a1,t3,-1
   10dd8:	18d76e63          	bltu	a4,a3,10f74 <__divdi3+0x4b0>
   10ddc:	18a77c63          	bleu	a0,a4,10f74 <__divdi3+0x4b0>
   10de0:	ffee0e13          	addi	t3,t3,-2
   10de4:	00d70733          	add	a4,a4,a3
   10de8:	40a70733          	sub	a4,a4,a0
   10dec:	03d75833          	divu	a6,a4,t4
   10df0:	01079793          	slli	a5,a5,0x10
   10df4:	0107d793          	srli	a5,a5,0x10
   10df8:	03d77733          	remu	a4,a4,t4
   10dfc:	030385b3          	mul	a1,t2,a6
   10e00:	01071713          	slli	a4,a4,0x10
   10e04:	00e7e7b3          	or	a5,a5,a4
   10e08:	00b7fe63          	bleu	a1,a5,10e24 <__divdi3+0x360>
   10e0c:	00d787b3          	add	a5,a5,a3
   10e10:	fff80713          	addi	a4,a6,-1
   10e14:	14d7e863          	bltu	a5,a3,10f64 <__divdi3+0x4a0>
   10e18:	14b7f663          	bleu	a1,a5,10f64 <__divdi3+0x4a0>
   10e1c:	ffe80813          	addi	a6,a6,-2
   10e20:	00d787b3          	add	a5,a5,a3
   10e24:	010e1e13          	slli	t3,t3,0x10
	      umul_ppmm (m1, m0, q0, d0);
   10e28:	000103b7          	lui	t2,0x10
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   10e2c:	010e6533          	or	a0,t3,a6
	      umul_ppmm (m1, m0, q0, d0);
   10e30:	fff38713          	addi	a4,t2,-1 # ffff <_reset+0xfdff>
   10e34:	00e576b3          	and	a3,a0,a4
   10e38:	01055813          	srli	a6,a0,0x10
   10e3c:	00e67733          	and	a4,a2,a4
   10e40:	01065613          	srli	a2,a2,0x10
   10e44:	02e68e33          	mul	t3,a3,a4
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   10e48:	40b787b3          	sub	a5,a5,a1
   10e4c:	02c686b3          	mul	a3,a3,a2
	      umul_ppmm (m1, m0, q0, d0);
   10e50:	010e5593          	srli	a1,t3,0x10
   10e54:	02e80733          	mul	a4,a6,a4
   10e58:	00e686b3          	add	a3,a3,a4
   10e5c:	00d586b3          	add	a3,a1,a3
   10e60:	02c80633          	mul	a2,a6,a2
   10e64:	00e6f463          	bleu	a4,a3,10e6c <__divdi3+0x3a8>
   10e68:	00760633          	add	a2,a2,t2
   10e6c:	0106d813          	srli	a6,a3,0x10
   10e70:	00c80633          	add	a2,a6,a2

	      if (m1 > n1 || (m1 == n1 && m0 > n0))
   10e74:	0cc7ee63          	bltu	a5,a2,10f50 <__divdi3+0x48c>
   10e78:	0ac78c63          	beq	a5,a2,10f30 <__divdi3+0x46c>
		{
		  q0--;
   10e7c:	00000593          	li	a1,0
   10e80:	d49ff06f          	j	10bc8 <__divdi3+0x104>
	    {
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
   10e84:	01c292b3          	sll	t0,t0,t3
	      n2 = n1 >> b;
   10e88:	00a7d833          	srl	a6,a5,a0
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q1, n1, n2, n1, d0);
   10e8c:	0102d713          	srli	a4,t0,0x10
   10e90:	02e85eb3          	divu	t4,a6,a4
   10e94:	01029f13          	slli	t5,t0,0x10

	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
   10e98:	01c796b3          	sll	a3,a5,t3
	      n0 = n0 << bm;

	      udiv_qrnnd (q1, n1, n2, n1, d0);
   10e9c:	010f5f13          	srli	t5,t5,0x10

	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
   10ea0:	00a35533          	srl	a0,t1,a0
   10ea4:	00d56533          	or	a0,a0,a3
	      n0 = n0 << bm;

	      udiv_qrnnd (q1, n1, n2, n1, d0);
   10ea8:	01055613          	srli	a2,a0,0x10
	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;
   10eac:	01c313b3          	sll	t2,t1,t3

	      udiv_qrnnd (q1, n1, n2, n1, d0);
   10eb0:	02e87833          	remu	a6,a6,a4
   10eb4:	03df06b3          	mul	a3,t5,t4
   10eb8:	01081813          	slli	a6,a6,0x10
   10ebc:	01066633          	or	a2,a2,a6
   10ec0:	00d67e63          	bleu	a3,a2,10edc <__divdi3+0x418>
   10ec4:	00560633          	add	a2,a2,t0
   10ec8:	fffe8793          	addi	a5,t4,-1
   10ecc:	0a566063          	bltu	a2,t0,10f6c <__divdi3+0x4a8>
   10ed0:	08d67e63          	bleu	a3,a2,10f6c <__divdi3+0x4a8>
   10ed4:	ffee8e93          	addi	t4,t4,-2
   10ed8:	00560633          	add	a2,a2,t0
   10edc:	40d60633          	sub	a2,a2,a3
   10ee0:	02e655b3          	divu	a1,a2,a4
   10ee4:	01051513          	slli	a0,a0,0x10
   10ee8:	01055513          	srli	a0,a0,0x10
   10eec:	02e67633          	remu	a2,a2,a4
   10ef0:	02bf07b3          	mul	a5,t5,a1
   10ef4:	01061613          	slli	a2,a2,0x10
   10ef8:	00c566b3          	or	a3,a0,a2
   10efc:	00f6fe63          	bleu	a5,a3,10f18 <__divdi3+0x454>
   10f00:	005686b3          	add	a3,a3,t0
   10f04:	fff58613          	addi	a2,a1,-1
   10f08:	0456ea63          	bltu	a3,t0,10f5c <__divdi3+0x498>
   10f0c:	04f6f863          	bleu	a5,a3,10f5c <__divdi3+0x498>
   10f10:	ffe58593          	addi	a1,a1,-2
   10f14:	005686b3          	add	a3,a3,t0
   10f18:	010e9e93          	slli	t4,t4,0x10
   10f1c:	40f686b3          	sub	a3,a3,a5
   10f20:	00bee5b3          	or	a1,t4,a1
   10f24:	000f0813          	mv	a6,t5
   10f28:	00070613          	mv	a2,a4
   10f2c:	d85ff06f          	j	10cb0 <__divdi3+0x1ec>
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
	      umul_ppmm (m1, m0, q0, d0);

	      if (m1 > n1 || (m1 == n1 && m0 > n0))
   10f30:	000107b7          	lui	a5,0x10
   10f34:	fff78793          	addi	a5,a5,-1 # ffff <_reset+0xfdff>
   10f38:	00f6f6b3          	and	a3,a3,a5
   10f3c:	01069693          	slli	a3,a3,0x10
   10f40:	00fe77b3          	and	a5,t3,a5
   10f44:	00531333          	sll	t1,t1,t0
   10f48:	00f687b3          	add	a5,a3,a5
   10f4c:	f2f378e3          	bleu	a5,t1,10e7c <__divdi3+0x3b8>
   10f50:	fff50513          	addi	a0,a0,-1
		{
		  q0--;
   10f54:	00000593          	li	a1,0
   10f58:	c71ff06f          	j	10bc8 <__divdi3+0x104>
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q1, n1, n2, n1, d0);
   10f5c:	00060593          	mv	a1,a2
   10f60:	fb9ff06f          	j	10f18 <__divdi3+0x454>
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   10f64:	00070813          	mv	a6,a4
   10f68:	ebdff06f          	j	10e24 <__divdi3+0x360>
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q1, n1, n2, n1, d0);
   10f6c:	00078e93          	mv	t4,a5
   10f70:	f6dff06f          	j	10edc <__divdi3+0x418>
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   10f74:	00058e13          	mv	t3,a1
   10f78:	e71ff06f          	j	10de8 <__divdi3+0x324>
	      d0 = d0 << bm;
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
	      n0 = n0 << bm;
	    }

	  udiv_qrnnd (q0, n0, n1, n0, d0);
   10f7c:	ffe50513          	addi	a0,a0,-2
   10f80:	005585b3          	add	a1,a1,t0
   10f84:	bfdff06f          	j	10b80 <__divdi3+0xbc>
	      udiv_qrnnd (q1, n1, n2, n1, d0);
	    }

	  /* n1 != d0...  */

	  udiv_qrnnd (q0, n0, n1, n0, d0);
   10f88:	ffe50513          	addi	a0,a0,-2
   10f8c:	005787b3          	add	a5,a5,t0
   10f90:	d51ff06f          	j	10ce0 <__divdi3+0x21c>

00010f94 <__moddi3>:

#ifdef L_moddi3
DWtype
__moddi3 (DWtype u, DWtype v)
{
  Wtype c = 0;
   10f94:	00000813          	li	a6,0
  DWunion uu = {.ll = u};
  DWunion vv = {.ll = v};
  DWtype w;

  if (uu.s.high < 0)
   10f98:	1605c863          	bltz	a1,11108 <__moddi3+0x174>
    c = ~c,
    uu.ll = -uu.ll;
  if (vv.s.high < 0)
   10f9c:	1806c263          	bltz	a3,11120 <__moddi3+0x18c>
  DWunion rr;
  UWtype d0, d1, n0, n1, n2;
  UWtype q0, q1;
  UWtype b, bm;

  d0 = dd.s.low;
   10fa0:	00060893          	mv	a7,a2
  d1 = dd.s.high;
  n0 = nn.s.low;
   10fa4:	00050313          	mv	t1,a0
  n1 = nn.s.high;
   10fa8:	00058393          	mv	t2,a1
	}
    }

#else /* UDIV_NEEDS_NORMALIZATION */

  if (d1 == 0)
   10fac:	0e069663          	bnez	a3,11098 <__moddi3+0x104>
    {
      if (d0 > n1)
   10fb0:	18c5f263          	bleu	a2,a1,11134 <__moddi3+0x1a0>
	{
	  /* 0q = nn / 0D */

	  count_leading_zeros (bm, d0);
   10fb4:	000107b7          	lui	a5,0x10
   10fb8:	24f66063          	bltu	a2,a5,111f8 <__moddi3+0x264>
   10fbc:	010002b7          	lui	t0,0x1000
   10fc0:	005632b3          	sltu	t0,a2,t0
   10fc4:	0012c293          	xori	t0,t0,1
   10fc8:	405002b3          	neg	t0,t0
   10fcc:	0082f293          	andi	t0,t0,8
   10fd0:	01028293          	addi	t0,t0,16 # 1000010 <_gp+0xfea6f0>
   10fd4:	000147b7          	lui	a5,0x14
   10fd8:	00565733          	srl	a4,a2,t0
   10fdc:	e3478793          	addi	a5,a5,-460 # 13e34 <__clz_tab>
   10fe0:	00f707b3          	add	a5,a4,a5
   10fe4:	0007c783          	lbu	a5,0(a5)
   10fe8:	005787b3          	add	a5,a5,t0
   10fec:	02000293          	li	t0,32
   10ff0:	40f282b3          	sub	t0,t0,a5

	  if (bm != 0)
   10ff4:	00028c63          	beqz	t0,1100c <__moddi3+0x78>
	    {
	      /* Normalize, i.e. make the most significant bit of the
		 denominator set.  */

	      d0 = d0 << bm;
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
   10ff8:	005595b3          	sll	a1,a1,t0
   10ffc:	00f557b3          	srl	a5,a0,a5
	  if (bm != 0)
	    {
	      /* Normalize, i.e. make the most significant bit of the
		 denominator set.  */

	      d0 = d0 << bm;
   11000:	005618b3          	sll	a7,a2,t0
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
   11004:	00b7e3b3          	or	t2,a5,a1
	      n0 = n0 << bm;
   11008:	00551333          	sll	t1,a0,t0
	    }

	  udiv_qrnnd (q0, n0, n1, n0, d0);
   1100c:	0108de13          	srli	t3,a7,0x10
   11010:	03c3d633          	divu	a2,t2,t3
   11014:	01089693          	slli	a3,a7,0x10
   11018:	0106d693          	srli	a3,a3,0x10
   1101c:	01035713          	srli	a4,t1,0x10
   11020:	03c3f5b3          	remu	a1,t2,t3
   11024:	02c68633          	mul	a2,a3,a2
   11028:	01059593          	slli	a1,a1,0x10
   1102c:	00b76733          	or	a4,a4,a1
   11030:	00c77863          	bleu	a2,a4,11040 <__moddi3+0xac>
   11034:	01170733          	add	a4,a4,a7
   11038:	01176463          	bltu	a4,a7,11040 <__moddi3+0xac>
   1103c:	3cc76863          	bltu	a4,a2,1140c <__moddi3+0x478>
   11040:	40c70733          	sub	a4,a4,a2
   11044:	03c757b3          	divu	a5,a4,t3
   11048:	01031313          	slli	t1,t1,0x10
   1104c:	01035313          	srli	t1,t1,0x10
   11050:	03c77733          	remu	a4,a4,t3
   11054:	02f68533          	mul	a0,a3,a5
   11058:	01071713          	slli	a4,a4,0x10
   1105c:	00e367b3          	or	a5,t1,a4
   11060:	00a7fa63          	bleu	a0,a5,11074 <__moddi3+0xe0>
	      udiv_qrnnd (q1, n1, n2, n1, d0);
	    }

	  /* n1 != d0...  */

	  udiv_qrnnd (q0, n0, n1, n0, d0);
   11064:	011787b3          	add	a5,a5,a7
   11068:	0117e663          	bltu	a5,a7,11074 <__moddi3+0xe0>
   1106c:	00a7f463          	bleu	a0,a5,11074 <__moddi3+0xe0>
   11070:	011787b3          	add	a5,a5,a7
   11074:	40a787b3          	sub	a5,a5,a0
	  /* Remainder in n0 >> bm.  */
	}

      if (rp != 0)
	{
	  rr.s.low = n0 >> bm;
   11078:	0057d533          	srl	a0,a5,t0
	  rr.s.high = 0;
	  *rp = rr.ll;
   1107c:	00000593          	li	a1,0
    uu.ll = -uu.ll;
  if (vv.s.high < 0)
    vv.ll = -vv.ll;

  (void) __udivmoddi4 (uu.ll, vv.ll, (UDWtype*)&w);
  if (c)
   11080:	00080a63          	beqz	a6,11094 <__moddi3+0x100>
    w = -w;
   11084:	40a00533          	neg	a0,a0
   11088:	00a037b3          	snez	a5,a0
   1108c:	40b005b3          	neg	a1,a1
   11090:	40f585b3          	sub	a1,a1,a5

  return w;
}
   11094:	00008067          	ret
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
   11098:	fed5e4e3          	bltu	a1,a3,11080 <__moddi3+0xec>
	}
      else
	{
	  /* 0q = NN / dd */

	  count_leading_zeros (bm, d1);
   1109c:	000107b7          	lui	a5,0x10
   110a0:	16f6e463          	bltu	a3,a5,11208 <__moddi3+0x274>
   110a4:	010008b7          	lui	a7,0x1000
   110a8:	0116b8b3          	sltu	a7,a3,a7
   110ac:	0018c893          	xori	a7,a7,1
   110b0:	411008b3          	neg	a7,a7
   110b4:	0088f893          	andi	a7,a7,8
   110b8:	01088893          	addi	a7,a7,16 # 1000010 <_gp+0xfea6f0>
   110bc:	000147b7          	lui	a5,0x14
   110c0:	0116d733          	srl	a4,a3,a7
   110c4:	e3478793          	addi	a5,a5,-460 # 13e34 <__clz_tab>
   110c8:	00f707b3          	add	a5,a4,a5
   110cc:	0007ce83          	lbu	t4,0(a5)
   110d0:	02000e13          	li	t3,32
   110d4:	011e8eb3          	add	t4,t4,a7
   110d8:	41de0e33          	sub	t3,t3,t4
	  if (bm == 0)
   110dc:	1c0e1863          	bnez	t3,112ac <__moddi3+0x318>

		 This special case is necessary, not an optimization.  */

	      /* The condition on the next line takes advantage of that
		 n1 >= d1 (true due to program flow).  */
	      if (n1 > d1 || n0 >= d0)
   110e0:	00b6e663          	bltu	a3,a1,110ec <__moddi3+0x158>
   110e4:	00050793          	mv	a5,a0
   110e8:	00c56a63          	bltu	a0,a2,110fc <__moddi3+0x168>
		{
		  q0 = 1;
		  sub_ddmmss (n1, n0, n1, n0, d1, d0);
   110ec:	40c507b3          	sub	a5,a0,a2
   110f0:	40d585b3          	sub	a1,a1,a3
   110f4:	00f53533          	sltu	a0,a0,a5
   110f8:	40a583b3          	sub	t2,a1,a0

	      if (rp != 0)
		{
		  rr.s.low = n0;
		  rr.s.high = n1;
		  *rp = rr.ll;
   110fc:	00078513          	mv	a0,a5
   11100:	00038593          	mv	a1,t2
   11104:	f7dff06f          	j	11080 <__moddi3+0xec>
  DWunion vv = {.ll = v};
  DWtype w;

  if (uu.s.high < 0)
    c = ~c,
    uu.ll = -uu.ll;
   11108:	40a00533          	neg	a0,a0
   1110c:	00a037b3          	snez	a5,a0
   11110:	40b00733          	neg	a4,a1
   11114:	40f705b3          	sub	a1,a4,a5
  DWunion uu = {.ll = u};
  DWunion vv = {.ll = v};
  DWtype w;

  if (uu.s.high < 0)
    c = ~c,
   11118:	fff00813          	li	a6,-1
    uu.ll = -uu.ll;
  if (vv.s.high < 0)
   1111c:	e806d2e3          	bgez	a3,10fa0 <__moddi3+0xc>
    vv.ll = -vv.ll;
   11120:	40c00633          	neg	a2,a2
   11124:	00c037b3          	snez	a5,a2
   11128:	40d006b3          	neg	a3,a3
   1112c:	40f686b3          	sub	a3,a3,a5
   11130:	e71ff06f          	j	10fa0 <__moddi3+0xc>
	}
      else
	{
	  /* qq = NN / 0d */

	  if (d0 == 0)
   11134:	00061663          	bnez	a2,11140 <__moddi3+0x1ac>
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
   11138:	00100893          	li	a7,1
   1113c:	02d8d8b3          	divu	a7,a7,a3

	  count_leading_zeros (bm, d0);
   11140:	000107b7          	lui	a5,0x10
   11144:	0af8e263          	bltu	a7,a5,111e8 <__moddi3+0x254>
   11148:	010007b7          	lui	a5,0x1000
   1114c:	00f8b7b3          	sltu	a5,a7,a5
   11150:	0017c793          	xori	a5,a5,1
   11154:	40f007b3          	neg	a5,a5
   11158:	0087f793          	andi	a5,a5,8
   1115c:	01078793          	addi	a5,a5,16 # 1000010 <_gp+0xfea6f0>
   11160:	00014737          	lui	a4,0x14
   11164:	00f8d6b3          	srl	a3,a7,a5
   11168:	e3470713          	addi	a4,a4,-460 # 13e34 <__clz_tab>
   1116c:	00e68733          	add	a4,a3,a4
   11170:	00074703          	lbu	a4,0(a4)
   11174:	02000293          	li	t0,32
   11178:	00f707b3          	add	a5,a4,a5
   1117c:	40f282b3          	sub	t0,t0,a5

	  if (bm == 0)
   11180:	08029c63          	bnez	t0,11218 <__moddi3+0x284>
   11184:	01089793          	slli	a5,a7,0x10
		 leading quotient digit q1 = 1).

		 This special case is necessary, not an optimization.
		 (Shifts counts of W_TYPE_SIZE are undefined.)  */

	      n1 -= d0;
   11188:	411585b3          	sub	a1,a1,a7
   1118c:	0108d693          	srli	a3,a7,0x10
   11190:	0107d793          	srli	a5,a5,0x10
	      udiv_qrnnd (q1, n1, n2, n1, d0);
	    }

	  /* n1 != d0...  */

	  udiv_qrnnd (q0, n0, n1, n0, d0);
   11194:	01035713          	srli	a4,t1,0x10
   11198:	02d5d633          	divu	a2,a1,a3
   1119c:	02d5f5b3          	remu	a1,a1,a3
   111a0:	02f60633          	mul	a2,a2,a5
   111a4:	01059593          	slli	a1,a1,0x10
   111a8:	00b76733          	or	a4,a4,a1
   111ac:	00c77a63          	bleu	a2,a4,111c0 <__moddi3+0x22c>
   111b0:	01170733          	add	a4,a4,a7
   111b4:	01176663          	bltu	a4,a7,111c0 <__moddi3+0x22c>
   111b8:	00c77463          	bleu	a2,a4,111c0 <__moddi3+0x22c>
   111bc:	01170733          	add	a4,a4,a7
   111c0:	40c70733          	sub	a4,a4,a2
   111c4:	02d75633          	divu	a2,a4,a3
   111c8:	01031313          	slli	t1,t1,0x10
   111cc:	01035313          	srli	t1,t1,0x10
   111d0:	02d77733          	remu	a4,a4,a3
   111d4:	02f60533          	mul	a0,a2,a5
   111d8:	01071713          	slli	a4,a4,0x10
   111dc:	00e367b3          	or	a5,t1,a4
   111e0:	e8a7fae3          	bleu	a0,a5,11074 <__moddi3+0xe0>
   111e4:	e81ff06f          	j	11064 <__moddi3+0xd0>
	  /* qq = NN / 0d */

	  if (d0 == 0)
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */

	  count_leading_zeros (bm, d0);
   111e8:	0ff00793          	li	a5,255
   111ec:	0117b7b3          	sltu	a5,a5,a7
   111f0:	00379793          	slli	a5,a5,0x3
   111f4:	f6dff06f          	j	11160 <__moddi3+0x1cc>
    {
      if (d0 > n1)
	{
	  /* 0q = nn / 0D */

	  count_leading_zeros (bm, d0);
   111f8:	0ff00293          	li	t0,255
   111fc:	00c2b2b3          	sltu	t0,t0,a2
   11200:	00329293          	slli	t0,t0,0x3
   11204:	dd1ff06f          	j	10fd4 <__moddi3+0x40>
	}
      else
	{
	  /* 0q = NN / dd */

	  count_leading_zeros (bm, d1);
   11208:	0ff00893          	li	a7,255
   1120c:	00d8b8b3          	sltu	a7,a7,a3
   11210:	00389893          	slli	a7,a7,0x3
   11214:	ea9ff06f          	j	110bc <__moddi3+0x128>
	    {
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
   11218:	005898b3          	sll	a7,a7,t0
	      n2 = n1 >> b;
   1121c:	00f5de33          	srl	t3,a1,a5
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q1, n1, n2, n1, d0);
   11220:	0108d713          	srli	a4,a7,0x10
   11224:	02ee5633          	divu	a2,t3,a4
   11228:	01089393          	slli	t2,a7,0x10

	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
   1122c:	005595b3          	sll	a1,a1,t0
	      n0 = n0 << bm;

	      udiv_qrnnd (q1, n1, n2, n1, d0);
   11230:	0103d393          	srli	t2,t2,0x10

	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
   11234:	00f557b3          	srl	a5,a0,a5
   11238:	00b7e7b3          	or	a5,a5,a1
	      n0 = n0 << bm;

	      udiv_qrnnd (q1, n1, n2, n1, d0);
   1123c:	0107d693          	srli	a3,a5,0x10
	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;
   11240:	00551333          	sll	t1,a0,t0

	      udiv_qrnnd (q1, n1, n2, n1, d0);
   11244:	02ee7e33          	remu	t3,t3,a4
   11248:	02c385b3          	mul	a1,t2,a2
   1124c:	010e1e13          	slli	t3,t3,0x10
   11250:	01c6e633          	or	a2,a3,t3
   11254:	00b67a63          	bleu	a1,a2,11268 <__moddi3+0x2d4>
   11258:	01160633          	add	a2,a2,a7
   1125c:	01166663          	bltu	a2,a7,11268 <__moddi3+0x2d4>
   11260:	00b67463          	bleu	a1,a2,11268 <__moddi3+0x2d4>
   11264:	01160633          	add	a2,a2,a7
   11268:	40b60633          	sub	a2,a2,a1
   1126c:	02e655b3          	divu	a1,a2,a4
   11270:	01079793          	slli	a5,a5,0x10
   11274:	0107d793          	srli	a5,a5,0x10
   11278:	02e67633          	remu	a2,a2,a4
   1127c:	02b385b3          	mul	a1,t2,a1
   11280:	01061613          	slli	a2,a2,0x10
   11284:	00c7e6b3          	or	a3,a5,a2
   11288:	00b6fa63          	bleu	a1,a3,1129c <__moddi3+0x308>
   1128c:	011686b3          	add	a3,a3,a7
   11290:	0116e663          	bltu	a3,a7,1129c <__moddi3+0x308>
   11294:	00b6f463          	bleu	a1,a3,1129c <__moddi3+0x308>
   11298:	011686b3          	add	a3,a3,a7
   1129c:	40b685b3          	sub	a1,a3,a1
   112a0:	00038793          	mv	a5,t2
   112a4:	00070693          	mv	a3,a4
   112a8:	eedff06f          	j	11194 <__moddi3+0x200>
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
   112ac:	01c696b3          	sll	a3,a3,t3
   112b0:	01d653b3          	srl	t2,a2,t4
   112b4:	0076e3b3          	or	t2,a3,t2
	      d0 = d0 << bm;
	      n2 = n1 >> b;
   112b8:	01d5d333          	srl	t1,a1,t4
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   112bc:	0103d893          	srli	a7,t2,0x10
   112c0:	031357b3          	divu	a5,t1,a7
   112c4:	01039713          	slli	a4,t2,0x10
	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
   112c8:	01c596b3          	sll	a3,a1,t3
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   112cc:	01075713          	srli	a4,a4,0x10
	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
   112d0:	01d555b3          	srl	a1,a0,t4
   112d4:	00d5e6b3          	or	a3,a1,a3
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   112d8:	0106d293          	srli	t0,a3,0x10
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
   112dc:	01c61633          	sll	a2,a2,t3
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;
   112e0:	01c51533          	sll	a0,a0,t3

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   112e4:	03137333          	remu	t1,t1,a7
   112e8:	02f705b3          	mul	a1,a4,a5
   112ec:	01031313          	slli	t1,t1,0x10
   112f0:	0062e2b3          	or	t0,t0,t1
   112f4:	00b2fe63          	bleu	a1,t0,11310 <__moddi3+0x37c>
   112f8:	007282b3          	add	t0,t0,t2
   112fc:	fff78313          	addi	t1,a5,-1
   11300:	1072e263          	bltu	t0,t2,11404 <__moddi3+0x470>
   11304:	10b2f063          	bleu	a1,t0,11404 <__moddi3+0x470>
   11308:	ffe78793          	addi	a5,a5,-2
   1130c:	007282b3          	add	t0,t0,t2
   11310:	40b282b3          	sub	t0,t0,a1
   11314:	0312d333          	divu	t1,t0,a7
   11318:	01069693          	slli	a3,a3,0x10
   1131c:	0106d693          	srli	a3,a3,0x10
   11320:	0312f2b3          	remu	t0,t0,a7
   11324:	02670733          	mul	a4,a4,t1
   11328:	01029893          	slli	a7,t0,0x10
   1132c:	0116e8b3          	or	a7,a3,a7
   11330:	00e8fe63          	bleu	a4,a7,1134c <__moddi3+0x3b8>
   11334:	007888b3          	add	a7,a7,t2
   11338:	fff30693          	addi	a3,t1,-1
   1133c:	0c78e063          	bltu	a7,t2,113fc <__moddi3+0x468>
   11340:	0ae8fe63          	bleu	a4,a7,113fc <__moddi3+0x468>
   11344:	ffe30313          	addi	t1,t1,-2
   11348:	007888b3          	add	a7,a7,t2
   1134c:	01079793          	slli	a5,a5,0x10
	      umul_ppmm (m1, m0, q0, d0);
   11350:	00010fb7          	lui	t6,0x10
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   11354:	0067e333          	or	t1,a5,t1
	      umul_ppmm (m1, m0, q0, d0);
   11358:	ffff8793          	addi	a5,t6,-1 # ffff <_reset+0xfdff>
   1135c:	00f376b3          	and	a3,t1,a5
   11360:	01065593          	srli	a1,a2,0x10
   11364:	01035313          	srli	t1,t1,0x10
   11368:	00f677b3          	and	a5,a2,a5
   1136c:	02f68f33          	mul	t5,a3,a5
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   11370:	40e88733          	sub	a4,a7,a4
	      umul_ppmm (m1, m0, q0, d0);
   11374:	02f307b3          	mul	a5,t1,a5
   11378:	010f5293          	srli	t0,t5,0x10
   1137c:	02b686b3          	mul	a3,a3,a1
   11380:	00f686b3          	add	a3,a3,a5
   11384:	00d288b3          	add	a7,t0,a3
   11388:	02b30333          	mul	t1,t1,a1
   1138c:	00f8f463          	bleu	a5,a7,11394 <__moddi3+0x400>
   11390:	01f30333          	add	t1,t1,t6
   11394:	000106b7          	lui	a3,0x10
   11398:	fff68793          	addi	a5,a3,-1 # ffff <_reset+0xfdff>
   1139c:	0108d693          	srli	a3,a7,0x10
   113a0:	00f8f8b3          	and	a7,a7,a5
   113a4:	01089293          	slli	t0,a7,0x10
   113a8:	00668333          	add	t1,a3,t1
   113ac:	00ff78b3          	and	a7,t5,a5
   113b0:	011288b3          	add	a7,t0,a7

	      if (m1 > n1 || (m1 == n1 && m0 > n0))
   113b4:	00676a63          	bltu	a4,t1,113c8 <__moddi3+0x434>
   113b8:	04670e63          	beq	a4,t1,11414 <__moddi3+0x480>
   113bc:	40670733          	sub	a4,a4,t1
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
	      umul_ppmm (m1, m0, q0, d0);
   113c0:	00088793          	mv	a5,a7
   113c4:	0180006f          	j	113dc <__moddi3+0x448>

	      if (m1 > n1 || (m1 == n1 && m0 > n0))
		{
		  q0--;
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
   113c8:	40c887b3          	sub	a5,a7,a2
   113cc:	40730333          	sub	t1,t1,t2
   113d0:	00f8b8b3          	sltu	a7,a7,a5
   113d4:	411308b3          	sub	a7,t1,a7
   113d8:	41170733          	sub	a4,a4,a7
	      q1 = 0;

	      /* Remainder in (n1n0 - m1m0) >> bm.  */
	      if (rp != 0)
		{
		  sub_ddmmss (n1, n0, n1, n0, m1, m0);
   113dc:	40f507b3          	sub	a5,a0,a5
   113e0:	00f53533          	sltu	a0,a0,a5
   113e4:	40a70733          	sub	a4,a4,a0
		  rr.s.low = (n1 << b) | (n0 >> bm);
   113e8:	01d71533          	sll	a0,a4,t4
   113ec:	01c7d7b3          	srl	a5,a5,t3
		  rr.s.high = n1 >> bm;
		  *rp = rr.ll;
   113f0:	00f56533          	or	a0,a0,a5
   113f4:	01c755b3          	srl	a1,a4,t3
   113f8:	c89ff06f          	j	11080 <__moddi3+0xec>
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   113fc:	00068313          	mv	t1,a3
   11400:	f4dff06f          	j	1134c <__moddi3+0x3b8>
   11404:	00030793          	mv	a5,t1
   11408:	f09ff06f          	j	11310 <__moddi3+0x37c>
	      d0 = d0 << bm;
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
	      n0 = n0 << bm;
	    }

	  udiv_qrnnd (q0, n0, n1, n0, d0);
   1140c:	01170733          	add	a4,a4,a7
   11410:	c31ff06f          	j	11040 <__moddi3+0xac>
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
	      umul_ppmm (m1, m0, q0, d0);

	      if (m1 > n1 || (m1 == n1 && m0 > n0))
   11414:	fb156ae3          	bltu	a0,a7,113c8 <__moddi3+0x434>
   11418:	00088793          	mv	a5,a7
   1141c:	00000713          	li	a4,0
   11420:	fbdff06f          	j	113dc <__moddi3+0x448>

00011424 <atexit>:
int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
   11424:	00050593          	mv	a1,a0
   11428:	00000693          	li	a3,0
   1142c:	00000613          	li	a2,0
   11430:	00000513          	li	a0,0
   11434:	2500006f          	j	11684 <__register_exitproc>

00011438 <__libc_fini_array>:
extern void _fini (void);

/* Run all the cleanup routines.  */
void
__libc_fini_array (void)
{
   11438:	ff010113          	addi	sp,sp,-16
   1143c:	00812423          	sw	s0,8(sp)
   11440:	00912223          	sw	s1,4(sp)
  size_t count;
  size_t i;
  
  count = __fini_array_end - __fini_array_start;
   11444:	00014437          	lui	s0,0x14
   11448:	000144b7          	lui	s1,0x14
   1144c:	f4448493          	addi	s1,s1,-188 # 13f44 <__init_array_end>
   11450:	f4840413          	addi	s0,s0,-184 # 13f48 <__fini_array_end>
   11454:	40940433          	sub	s0,s0,s1
   11458:	40245413          	srai	s0,s0,0x2
   1145c:	00241793          	slli	a5,s0,0x2
   11460:	ffc78793          	addi	a5,a5,-4
extern void _fini (void);

/* Run all the cleanup routines.  */
void
__libc_fini_array (void)
{
   11464:	00112623          	sw	ra,12(sp)
   11468:	009784b3          	add	s1,a5,s1
  size_t count;
  size_t i;
  
  count = __fini_array_end - __fini_array_start;
  for (i = count; i > 0; i--)
   1146c:	00040c63          	beqz	s0,11484 <__libc_fini_array+0x4c>
    __fini_array_start[i-1] ();
   11470:	0004a783          	lw	a5,0(s1)
   11474:	fff40413          	addi	s0,s0,-1
   11478:	ffc48493          	addi	s1,s1,-4
   1147c:	000780e7          	jalr	a5
{
  size_t count;
  size_t i;
  
  count = __fini_array_end - __fini_array_start;
  for (i = count; i > 0; i--)
   11480:	fe0418e3          	bnez	s0,11470 <__libc_fini_array+0x38>
    __fini_array_start[i-1] ();

  _fini ();
}
   11484:	00c12083          	lw	ra,12(sp)
   11488:	00812403          	lw	s0,8(sp)
   1148c:	00412483          	lw	s1,4(sp)
   11490:	01010113          	addi	sp,sp,16
  
  count = __fini_array_end - __fini_array_start;
  for (i = count; i > 0; i--)
    __fini_array_start[i-1] ();

  _fini ();
   11494:	bb5fe06f          	j	10048 <_fini>

00011498 <__libc_init_array>:
extern void _init (void);

/* Iterate over all the init routines.  */
void
__libc_init_array (void)
{
   11498:	ff010113          	addi	sp,sp,-16
   1149c:	00812423          	sw	s0,8(sp)
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
   114a0:	000147b7          	lui	a5,0x14
   114a4:	00014437          	lui	s0,0x14
extern void _init (void);

/* Iterate over all the init routines.  */
void
__libc_init_array (void)
{
   114a8:	01212023          	sw	s2,0(sp)
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
   114ac:	f3c78793          	addi	a5,a5,-196 # 13f3c <_etext>
   114b0:	f3c40913          	addi	s2,s0,-196 # 13f3c <_etext>
   114b4:	41278933          	sub	s2,a5,s2
   114b8:	40295913          	srai	s2,s2,0x2
extern void _init (void);

/* Iterate over all the init routines.  */
void
__libc_init_array (void)
{
   114bc:	00912223          	sw	s1,4(sp)
   114c0:	00112623          	sw	ra,12(sp)
   114c4:	f3c40413          	addi	s0,s0,-196
   114c8:	00000493          	li	s1,0
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
   114cc:	00090c63          	beqz	s2,114e4 <__libc_init_array+0x4c>
    __preinit_array_start[i] ();
   114d0:	00042783          	lw	a5,0(s0)
{
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
   114d4:	00148493          	addi	s1,s1,1
   114d8:	00440413          	addi	s0,s0,4
    __preinit_array_start[i] ();
   114dc:	000780e7          	jalr	a5
{
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
   114e0:	fe9918e3          	bne	s2,s1,114d0 <__libc_init_array+0x38>
    __preinit_array_start[i] ();

  _init ();

  count = __init_array_end - __init_array_start;
   114e4:	00014437          	lui	s0,0x14

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
    __preinit_array_start[i] ();

  _init ();
   114e8:	b61fe0ef          	jal	10048 <_fini>

  count = __init_array_end - __init_array_start;
   114ec:	000147b7          	lui	a5,0x14
   114f0:	f3c40913          	addi	s2,s0,-196 # 13f3c <_etext>
   114f4:	f4478793          	addi	a5,a5,-188 # 13f44 <__init_array_end>
   114f8:	41278933          	sub	s2,a5,s2
   114fc:	40295913          	srai	s2,s2,0x2
   11500:	f3c40413          	addi	s0,s0,-196
  for (i = 0; i < count; i++)
   11504:	00000493          	li	s1,0
   11508:	00090c63          	beqz	s2,11520 <__libc_init_array+0x88>
    __init_array_start[i] ();
   1150c:	00042783          	lw	a5,0(s0)
    __preinit_array_start[i] ();

  _init ();

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
   11510:	00148493          	addi	s1,s1,1
   11514:	00440413          	addi	s0,s0,4
    __init_array_start[i] ();
   11518:	000780e7          	jalr	a5
    __preinit_array_start[i] ();

  _init ();

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
   1151c:	fe9918e3          	bne	s2,s1,1150c <__libc_init_array+0x74>
    __init_array_start[i] ();
}
   11520:	00c12083          	lw	ra,12(sp)
   11524:	00812403          	lw	s0,8(sp)
   11528:	00412483          	lw	s1,4(sp)
   1152c:	00012903          	lw	s2,0(sp)
   11530:	01010113          	addi	sp,sp,16
   11534:	00008067          	ret

00011538 <_puts_r>:

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
   11538:	fd010113          	addi	sp,sp,-48
   1153c:	02812423          	sw	s0,40(sp)
   11540:	00050413          	mv	s0,a0
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
   11544:	00058513          	mv	a0,a1

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
   11548:	02912223          	sw	s1,36(sp)
   1154c:	02112623          	sw	ra,44(sp)
   11550:	00058493          	mv	s1,a1
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
   11554:	0a0000ef          	jal	115f4 <strlen>
  uio.uio_resid = c + 1;
  uio.uio_iov = &iov[0];
  uio.uio_iovcnt = 2;

  _REENT_SMALL_CHECK_INIT (ptr);
  fp = _stdout_r (ptr);
   11558:	00842583          	lw	a1,8(s0)
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
  iov[0].iov_len = c;
  iov[1].iov_base = "\n";
   1155c:	00014737          	lui	a4,0x14
   11560:	f3470713          	addi	a4,a4,-204 # 13f34 <__clz_tab+0x100>
  uio.uio_iovcnt = 2;

  _REENT_SMALL_CHECK_INIT (ptr);
  fp = _stdout_r (ptr);
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
   11564:	00c59683          	lh	a3,12(a1)
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
  iov[0].iov_len = c;
  iov[1].iov_base = "\n";
   11568:	00e12c23          	sw	a4,24(sp)
  iov[1].iov_len = 1;
   1156c:	00100713          	li	a4,1
   11570:	00e12e23          	sw	a4,28(sp)
  uio.uio_resid = c + 1;
  uio.uio_iov = &iov[0];
   11574:	01010713          	addi	a4,sp,16

  iov[0].iov_base = s;
  iov[0].iov_len = c;
  iov[1].iov_base = "\n";
  iov[1].iov_len = 1;
  uio.uio_resid = c + 1;
   11578:	00150613          	addi	a2,a0,1
  uio.uio_iov = &iov[0];
   1157c:	00e12223          	sw	a4,4(sp)
  uio.uio_iovcnt = 2;

  _REENT_SMALL_CHECK_INIT (ptr);
  fp = _stdout_r (ptr);
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
   11580:	01269793          	slli	a5,a3,0x12
  iov[0].iov_len = c;
  iov[1].iov_base = "\n";
  iov[1].iov_len = 1;
  uio.uio_resid = c + 1;
  uio.uio_iov = &iov[0];
  uio.uio_iovcnt = 2;
   11584:	00200713          	li	a4,2
  size_t c = strlen (s);
  struct __suio uio;
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
   11588:	00912823          	sw	s1,16(sp)
  iov[0].iov_len = c;
   1158c:	00a12a23          	sw	a0,20(sp)
  iov[1].iov_base = "\n";
  iov[1].iov_len = 1;
  uio.uio_resid = c + 1;
   11590:	00c12623          	sw	a2,12(sp)
  uio.uio_iov = &iov[0];
  uio.uio_iovcnt = 2;
   11594:	00e12423          	sw	a4,8(sp)

  _REENT_SMALL_CHECK_INIT (ptr);
  fp = _stdout_r (ptr);
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
   11598:	0207c263          	bltz	a5,115bc <_puts_r+0x84>
  uio.uio_iov = &iov[0];
  uio.uio_iovcnt = 2;

  _REENT_SMALL_CHECK_INIT (ptr);
  fp = _stdout_r (ptr);
  _newlib_flockfile_start (fp);
   1159c:	0685a783          	lw	a5,104(a1)
  ORIENT (fp, -1);
   115a0:	ffffe737          	lui	a4,0xffffe
   115a4:	00002637          	lui	a2,0x2
   115a8:	fff70713          	addi	a4,a4,-1 # ffffdfff <_gp+0xfffe86df>
   115ac:	00c6e6b3          	or	a3,a3,a2
   115b0:	00e7f733          	and	a4,a5,a4
   115b4:	00d59623          	sh	a3,12(a1)
   115b8:	06e5a423          	sw	a4,104(a1)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
   115bc:	00410613          	addi	a2,sp,4
   115c0:	00040513          	mv	a0,s0
   115c4:	1b4000ef          	jal	11778 <__sfvwrite_r>

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
   115c8:	02c12083          	lw	ra,44(sp)

  _REENT_SMALL_CHECK_INIT (ptr);
  fp = _stdout_r (ptr);
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
   115cc:	00a03533          	snez	a0,a0
   115d0:	40a00533          	neg	a0,a0

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
   115d4:	00a56513          	ori	a0,a0,10
   115d8:	02812403          	lw	s0,40(sp)
   115dc:	02412483          	lw	s1,36(sp)
   115e0:	03010113          	addi	sp,sp,48
   115e4:	00008067          	ret

000115e8 <puts>:

int
_DEFUN(puts, (s),
       char _CONST * s)
{
  return _puts_r (_REENT, s);
   115e8:	00050593          	mv	a1,a0
   115ec:	8101a503          	lw	a0,-2032(gp) # 15130 <_impure_ptr>
   115f0:	f49ff06f          	j	11538 <_puts_r>

000115f4 <strlen>:
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  while (*str++)
    ;
  return str - start - 1;
#else
  if (__builtin_expect((uintptr_t)str & (sizeof(long)-1), 0)) do
   115f4:	00357793          	andi	a5,a0,3
   115f8:	00050593          	mv	a1,a0
   115fc:	04079a63          	bnez	a5,11650 <strlen+0x5c>
    if (!ch)
      return str - start - 1;
  } while ((uintptr_t)str & (sizeof(long)-1));

  unsigned long* ls = (unsigned long*)str;
  while (!__libc_detect_null(*ls++))
   11600:	7f7f86b7          	lui	a3,0x7f7f8
   11604:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <_gp+0x7f7e265f>
   11608:	fff00613          	li	a2,-1
   1160c:	00450513          	addi	a0,a0,4
   11610:	ffc52783          	lw	a5,-4(a0)
   11614:	00d7f733          	and	a4,a5,a3
   11618:	00d70733          	add	a4,a4,a3
   1161c:	00d7e7b3          	or	a5,a5,a3
   11620:	00f767b3          	or	a5,a4,a5
   11624:	fec784e3          	beq	a5,a2,1160c <strlen+0x18>

  str = (const char*)ls;
  size_t ret = str - start, sl = sizeof(long);

  char c0 = str[0-sl], c1 = str[1-sl], c2 = str[2-sl], c3 = str[3-sl];
  if (c0 == 0)            return ret + 0 - sl;
   11628:	ffc54703          	lbu	a4,-4(a0)
  while (!__libc_detect_null(*ls++))
    ;
  asm volatile ("" : "+r"(ls)); /* prevent "optimization" */

  str = (const char*)ls;
  size_t ret = str - start, sl = sizeof(long);
   1162c:	40b507b3          	sub	a5,a0,a1

  char c0 = str[0-sl], c1 = str[1-sl], c2 = str[2-sl], c3 = str[3-sl];
   11630:	ffd54683          	lbu	a3,-3(a0)
   11634:	ffe54603          	lbu	a2,-2(a0)
  if (c0 == 0)            return ret + 0 - sl;
   11638:	02070e63          	beqz	a4,11674 <strlen+0x80>
  if (c1 == 0)            return ret + 1 - sl;
   1163c:	02068863          	beqz	a3,1166c <strlen+0x78>
  if (c2 == 0)            return ret + 2 - sl;
  if (sl == 4 || c3 == 0) return ret + 3 - sl;
   11640:	fff78513          	addi	a0,a5,-1
  size_t ret = str - start, sl = sizeof(long);

  char c0 = str[0-sl], c1 = str[1-sl], c2 = str[2-sl], c3 = str[3-sl];
  if (c0 == 0)            return ret + 0 - sl;
  if (c1 == 0)            return ret + 1 - sl;
  if (c2 == 0)            return ret + 2 - sl;
   11644:	02060c63          	beqz	a2,1167c <strlen+0x88>
  if (c0 == 0)            return ret + 4 - sl;
  if (c1 == 0)            return ret + 5 - sl;
  if (c2 == 0)            return ret + 6 - sl;
                          return ret + 7 - sl;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   11648:	00008067          	ret
  {
    char ch = *str;
    str++;
    if (!ch)
      return str - start - 1;
  } while ((uintptr_t)str & (sizeof(long)-1));
   1164c:	fa070ae3          	beqz	a4,11600 <strlen+0xc>
    ;
  return str - start - 1;
#else
  if (__builtin_expect((uintptr_t)str & (sizeof(long)-1), 0)) do
  {
    char ch = *str;
   11650:	00054783          	lbu	a5,0(a0)
    str++;
   11654:	00150513          	addi	a0,a0,1
    if (!ch)
      return str - start - 1;
  } while ((uintptr_t)str & (sizeof(long)-1));
   11658:	00357713          	andi	a4,a0,3
#else
  if (__builtin_expect((uintptr_t)str & (sizeof(long)-1), 0)) do
  {
    char ch = *str;
    str++;
    if (!ch)
   1165c:	fe0798e3          	bnez	a5,1164c <strlen+0x58>
      return str - start - 1;
   11660:	40b50533          	sub	a0,a0,a1
   11664:	fff50513          	addi	a0,a0,-1
   11668:	00008067          	ret
  str = (const char*)ls;
  size_t ret = str - start, sl = sizeof(long);

  char c0 = str[0-sl], c1 = str[1-sl], c2 = str[2-sl], c3 = str[3-sl];
  if (c0 == 0)            return ret + 0 - sl;
  if (c1 == 0)            return ret + 1 - sl;
   1166c:	ffd78513          	addi	a0,a5,-3
   11670:	00008067          	ret

  str = (const char*)ls;
  size_t ret = str - start, sl = sizeof(long);

  char c0 = str[0-sl], c1 = str[1-sl], c2 = str[2-sl], c3 = str[3-sl];
  if (c0 == 0)            return ret + 0 - sl;
   11674:	ffc78513          	addi	a0,a5,-4
   11678:	00008067          	ret
  if (c1 == 0)            return ret + 1 - sl;
  if (c2 == 0)            return ret + 2 - sl;
   1167c:	ffe78513          	addi	a0,a5,-2
  if (c0 == 0)            return ret + 4 - sl;
  if (c1 == 0)            return ret + 5 - sl;
  if (c2 == 0)            return ret + 6 - sl;
                          return ret + 7 - sl;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   11680:	00008067          	ret

00011684 <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
   11684:	fe010113          	addi	sp,sp,-32
   11688:	00812c23          	sw	s0,24(sp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
   1168c:	80c1a403          	lw	s0,-2036(gp) # 1512c <_global_impure_ptr>
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
   11690:	00912a23          	sw	s1,20(sp)
   11694:	00050493          	mv	s1,a0

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
   11698:	14842503          	lw	a0,328(s0)
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
   1169c:	00112e23          	sw	ra,28(sp)
#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
  if (p == NULL)
   116a0:	0c050263          	beqz	a0,11764 <__register_exitproc+0xe0>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
  if (p->_ind >= _ATEXIT_SIZE)
   116a4:	00452783          	lw	a5,4(a0)
   116a8:	01f00713          	li	a4,31
   116ac:	00178813          	addi	a6,a5,1
   116b0:	04f75863          	ble	a5,a4,11700 <__register_exitproc+0x7c>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
   116b4:	00000793          	li	a5,0
   116b8:	0a078c63          	beqz	a5,11770 <__register_exitproc+0xec>
	return -1;

      p = (struct _atexit *) malloc (sizeof *p);
   116bc:	19000513          	li	a0,400
   116c0:	00b12623          	sw	a1,12(sp)
   116c4:	00c12423          	sw	a2,8(sp)
   116c8:	00d12223          	sw	a3,4(sp)
   116cc:	935ee0ef          	jal	0 <_reset-0x200>
      if (p == NULL)
   116d0:	00c12583          	lw	a1,12(sp)
   116d4:	00812603          	lw	a2,8(sp)
   116d8:	00412683          	lw	a3,4(sp)
   116dc:	08050a63          	beqz	a0,11770 <__register_exitproc+0xec>
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
	}
      p->_ind = 0;
      p->_next = _GLOBAL_ATEXIT;
   116e0:	14842783          	lw	a5,328(s0)
      _GLOBAL_ATEXIT = p;
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
      p->_on_exit_args._is_cxa = 0;
   116e4:	00100813          	li	a6,1
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
	}
      p->_ind = 0;
   116e8:	00052223          	sw	zero,4(a0)
      p->_next = _GLOBAL_ATEXIT;
   116ec:	00f52023          	sw	a5,0(a0)
      _GLOBAL_ATEXIT = p;
   116f0:	14a42423          	sw	a0,328(s0)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
      p->_on_exit_args._is_cxa = 0;
   116f4:	00000793          	li	a5,0
	}
      p->_ind = 0;
      p->_next = _GLOBAL_ATEXIT;
      _GLOBAL_ATEXIT = p;
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
   116f8:	18052423          	sw	zero,392(a0)
      p->_on_exit_args._is_cxa = 0;
   116fc:	18052623          	sw	zero,396(a0)
   11700:	00279713          	slli	a4,a5,0x2
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
   11704:	02049463          	bnez	s1,1172c <__register_exitproc+0xa8>
      args->_fntypes |= (1 << p->_ind);
      args->_dso_handle[p->_ind] = d;
      if (type == __et_cxa)
	args->_is_cxa |= (1 << p->_ind);
    }
  p->_fns[p->_ind++] = fn;
   11708:	00e50733          	add	a4,a0,a4
   1170c:	01052223          	sw	a6,4(a0)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
   11710:	00000513          	li	a0,0
      args->_fntypes |= (1 << p->_ind);
      args->_dso_handle[p->_ind] = d;
      if (type == __et_cxa)
	args->_is_cxa |= (1 << p->_ind);
    }
  p->_fns[p->_ind++] = fn;
   11714:	00b72423          	sw	a1,8(a4)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
}
   11718:	01c12083          	lw	ra,28(sp)
   1171c:	01812403          	lw	s0,24(sp)
   11720:	01412483          	lw	s1,20(sp)
   11724:	02010113          	addi	sp,sp,32
   11728:	00008067          	ret
   1172c:	00e502b3          	add	t0,a0,a4
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
   11730:	08c2a423          	sw	a2,136(t0)
      args->_fntypes |= (1 << p->_ind);
   11734:	18852883          	lw	a7,392(a0)
   11738:	00100613          	li	a2,1
   1173c:	00f617b3          	sll	a5,a2,a5
   11740:	00f8e633          	or	a2,a7,a5
   11744:	18c52423          	sw	a2,392(a0)
      args->_dso_handle[p->_ind] = d;
   11748:	10d2a423          	sw	a3,264(t0)
      if (type == __et_cxa)
   1174c:	00200693          	li	a3,2
   11750:	fad49ce3          	bne	s1,a3,11708 <__register_exitproc+0x84>
	args->_is_cxa |= (1 << p->_ind);
   11754:	18c52683          	lw	a3,396(a0)
   11758:	00f6e7b3          	or	a5,a3,a5
   1175c:	18f52623          	sw	a5,396(a0)
   11760:	fa9ff06f          	j	11708 <__register_exitproc+0x84>
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
  if (p == NULL)
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
   11764:	14c40513          	addi	a0,s0,332
   11768:	14a42423          	sw	a0,328(s0)
   1176c:	f39ff06f          	j	116a4 <__register_exitproc+0x20>
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
	return -1;
   11770:	fff00513          	li	a0,-1
   11774:	fa5ff06f          	j	11718 <__register_exitproc+0x94>

00011778 <__sfvwrite_r>:
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
   11778:	00862783          	lw	a5,8(a2) # 2008 <_reset+0x1e08>
   1177c:	1a078e63          	beqz	a5,11938 <__sfvwrite_r+0x1c0>
    return 0;

  /* make sure we can write */
  if (cantwrite (ptr, fp))
   11780:	00c5d703          	lhu	a4,12(a1)
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
   11784:	fd010113          	addi	sp,sp,-48
   11788:	02812423          	sw	s0,40(sp)

  if ((len = uio->uio_resid) == 0)
    return 0;

  /* make sure we can write */
  if (cantwrite (ptr, fp))
   1178c:	00877793          	andi	a5,a4,8
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
   11790:	01412c23          	sw	s4,24(sp)
   11794:	01512a23          	sw	s5,20(sp)
   11798:	02112623          	sw	ra,44(sp)
   1179c:	02912223          	sw	s1,36(sp)
   117a0:	03212023          	sw	s2,32(sp)
   117a4:	01312e23          	sw	s3,28(sp)
   117a8:	01612823          	sw	s6,16(sp)
   117ac:	01712623          	sw	s7,12(sp)
   117b0:	01812423          	sw	s8,8(sp)
   117b4:	01912223          	sw	s9,4(sp)
   117b8:	01a12023          	sw	s10,0(sp)
   117bc:	00058413          	mv	s0,a1
   117c0:	00050a93          	mv	s5,a0
   117c4:	00060a13          	mv	s4,a2

  if ((len = uio->uio_resid) == 0)
    return 0;

  /* make sure we can write */
  if (cantwrite (ptr, fp))
   117c8:	0a078463          	beqz	a5,11870 <__sfvwrite_r+0xf8>
   117cc:	0105a783          	lw	a5,16(a1)
   117d0:	0a078063          	beqz	a5,11870 <__sfvwrite_r+0xf8>
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
   117d4:	00277793          	andi	a5,a4,2

  /* make sure we can write */
  if (cantwrite (ptr, fp))
    return EOF;

  iov = uio->uio_iov;
   117d8:	000a2483          	lw	s1,0(s4)
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
   117dc:	0a078c63          	beqz	a5,11894 <__sfvwrite_r+0x11c>
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
   117e0:	80000b37          	lui	s6,0x80000
   117e4:	00000993          	li	s3,0
   117e8:	00000913          	li	s2,0
   117ec:	c00b4b13          	xori	s6,s6,-1024
   117f0:	00098613          	mv	a2,s3
   117f4:	000a8513          	mv	a0,s5
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
   117f8:	12090863          	beqz	s2,11928 <__sfvwrite_r+0x1b0>
	  w = fp->_write (ptr, fp->_cookie, p,
   117fc:	00090693          	mv	a3,s2
   11800:	012b7463          	bleu	s2,s6,11808 <__sfvwrite_r+0x90>
   11804:	000b0693          	mv	a3,s6
   11808:	02442783          	lw	a5,36(s0)
   1180c:	01c42583          	lw	a1,28(s0)
   11810:	000780e7          	jalr	a5
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
   11814:	16a05863          	blez	a0,11984 <__sfvwrite_r+0x20c>
	    goto err;
	  p += w;
	  len -= w;
	}
      while ((uio->uio_resid -= w) != 0);
   11818:	008a2783          	lw	a5,8(s4)
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
	  p += w;
   1181c:	00a989b3          	add	s3,s3,a0
	  len -= w;
   11820:	40a90933          	sub	s2,s2,a0
	}
      while ((uio->uio_resid -= w) != 0);
   11824:	40a78533          	sub	a0,a5,a0
   11828:	00aa2423          	sw	a0,8(s4)
   1182c:	fc0512e3          	bnez	a0,117f0 <__sfvwrite_r+0x78>
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
    return 0;
   11830:	00000793          	li	a5,0
  return 0;

err:
  fp->_flags |= __SERR;
  return EOF;
}
   11834:	02c12083          	lw	ra,44(sp)
   11838:	00078513          	mv	a0,a5
   1183c:	02812403          	lw	s0,40(sp)
   11840:	02412483          	lw	s1,36(sp)
   11844:	02012903          	lw	s2,32(sp)
   11848:	01c12983          	lw	s3,28(sp)
   1184c:	01812a03          	lw	s4,24(sp)
   11850:	01412a83          	lw	s5,20(sp)
   11854:	01012b03          	lw	s6,16(sp)
   11858:	00c12b83          	lw	s7,12(sp)
   1185c:	00812c03          	lw	s8,8(sp)
   11860:	00412c83          	lw	s9,4(sp)
   11864:	00012d03          	lw	s10,0(sp)
   11868:	03010113          	addi	sp,sp,48
   1186c:	00008067          	ret

  if ((len = uio->uio_resid) == 0)
    return 0;

  /* make sure we can write */
  if (cantwrite (ptr, fp))
   11870:	00040593          	mv	a1,s0
   11874:	000a8513          	mv	a0,s5
   11878:	3b4010ef          	jal	12c2c <__swsetup_r>
    return EOF;
   1187c:	fff00793          	li	a5,-1

  if ((len = uio->uio_resid) == 0)
    return 0;

  /* make sure we can write */
  if (cantwrite (ptr, fp))
   11880:	fa051ae3          	bnez	a0,11834 <__sfvwrite_r+0xbc>
   11884:	00c45703          	lhu	a4,12(s0)
    return EOF;

  iov = uio->uio_iov;
   11888:	000a2483          	lw	s1,0(s4)
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
   1188c:	00277793          	andi	a5,a4,2
   11890:	f40798e3          	bnez	a5,117e0 <__sfvwrite_r+0x68>
	  p += w;
	  len -= w;
	}
      while ((uio->uio_resid -= w) != 0);
    }
  else if ((fp->_flags & __SLBF) == 0)
   11894:	00177793          	andi	a5,a4,1
   11898:	10079063          	bnez	a5,11998 <__sfvwrite_r+0x220>
		goto err;
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
   1189c:	80000b37          	lui	s6,0x80000
   118a0:	00000b93          	li	s7,0
   118a4:	00000913          	li	s2,0
   118a8:	fffb4b13          	not	s6,s6
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
   118ac:	06090663          	beqz	s2,11918 <__sfvwrite_r+0x1a0>
	  w = fp->_w;
	  if (fp->_flags & __SSTR)
   118b0:	20077793          	andi	a5,a4,512
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_w;
   118b4:	00842983          	lw	s3,8(s0)
	  if (fp->_flags & __SSTR)
   118b8:	08078663          	beqz	a5,11944 <__sfvwrite_r+0x1cc>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
   118bc:	23396e63          	bltu	s2,s3,11af8 <__sfvwrite_r+0x380>
   118c0:	48077793          	andi	a5,a4,1152
   118c4:	26079463          	bnez	a5,11b2c <__sfvwrite_r+0x3b4>
   118c8:	00042503          	lw	a0,0(s0)
   118cc:	00098c13          	mv	s8,s3
		  w = len;
		  fp->_w = newsize - curpos;
		}
	      if (len < w)
		w = len;
	      COPY (w);		/* copy MIN(fp->_w,len), */
   118d0:	000c0613          	mv	a2,s8
   118d4:	000b8593          	mv	a1,s7
   118d8:	4a5000ef          	jal	1257c <memmove>
	      fp->_w -= w;
   118dc:	00842783          	lw	a5,8(s0)
	      fp->_p += w;
   118e0:	00042603          	lw	a2,0(s0)
   118e4:	00090513          	mv	a0,s2
		  fp->_w = newsize - curpos;
		}
	      if (len < w)
		w = len;
	      COPY (w);		/* copy MIN(fp->_w,len), */
	      fp->_w -= w;
   118e8:	413789b3          	sub	s3,a5,s3
	      fp->_p += w;
   118ec:	01860633          	add	a2,a2,s8
		  fp->_w = newsize - curpos;
		}
	      if (len < w)
		w = len;
	      COPY (w);		/* copy MIN(fp->_w,len), */
	      fp->_w -= w;
   118f0:	01342423          	sw	s3,8(s0)
	      fp->_p += w;
   118f4:	00c42023          	sw	a2,0(s0)
		goto err;
	    }
	  p += w;
	  len -= w;
	}
      while ((uio->uio_resid -= w) != 0);
   118f8:	008a2783          	lw	a5,8(s4)
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
   118fc:	00ab8bb3          	add	s7,s7,a0
	  len -= w;
   11900:	40a90933          	sub	s2,s2,a0
	}
      while ((uio->uio_resid -= w) != 0);
   11904:	40a789b3          	sub	s3,a5,a0
   11908:	013a2423          	sw	s3,8(s4)
   1190c:	f20982e3          	beqz	s3,11830 <__sfvwrite_r+0xb8>
   11910:	00c45703          	lhu	a4,12(s0)
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
   11914:	f8091ee3          	bnez	s2,118b0 <__sfvwrite_r+0x138>
   11918:	0004ab83          	lw	s7,0(s1)
   1191c:	0044a903          	lw	s2,4(s1)
   11920:	00848493          	addi	s1,s1,8
   11924:	f89ff06f          	j	118ac <__sfvwrite_r+0x134>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
   11928:	0004a983          	lw	s3,0(s1)
   1192c:	0044a903          	lw	s2,4(s1)
   11930:	00848493          	addi	s1,s1,8
   11934:	ebdff06f          	j	117f0 <__sfvwrite_r+0x78>
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
    return 0;
   11938:	00000793          	li	a5,0
  return 0;

err:
  fp->_flags |= __SERR;
  return EOF;
}
   1193c:	00078513          	mv	a0,a5
   11940:	00008067          	ret
	      COPY (w);		/* copy MIN(fp->_w,len), */
	      fp->_w -= w;
	      fp->_p += w;
	      w = len;		/* but pretend copied all */
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
   11944:	00042503          	lw	a0,0(s0)
   11948:	01042783          	lw	a5,16(s0)
   1194c:	12a7ea63          	bltu	a5,a0,11a80 <__sfvwrite_r+0x308>
   11950:	01442783          	lw	a5,20(s0)
   11954:	12f96663          	bltu	s2,a5,11a80 <__sfvwrite_r+0x308>
		goto err;
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
   11958:	00090693          	mv	a3,s2
   1195c:	012b7463          	bleu	s2,s6,11964 <__sfvwrite_r+0x1ec>
   11960:	000b0693          	mv	a3,s6
   11964:	02f6c6b3          	div	a3,a3,a5
	      w = fp->_write (ptr, fp->_cookie, p, w);
   11968:	02442703          	lw	a4,36(s0)
   1196c:	01c42583          	lw	a1,28(s0)
   11970:	000b8613          	mv	a2,s7
   11974:	000a8513          	mv	a0,s5
   11978:	02f686b3          	mul	a3,a3,a5
   1197c:	000700e7          	jalr	a4
	      if (w <= 0)
   11980:	f6a04ce3          	bgtz	a0,118f8 <__sfvwrite_r+0x180>
   11984:	00c41783          	lh	a5,12(s0)
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
   11988:	0407e793          	ori	a5,a5,64
   1198c:	00f41623          	sh	a5,12(s0)
  return EOF;
   11990:	fff00793          	li	a5,-1
   11994:	ea1ff06f          	j	11834 <__sfvwrite_r+0xbc>
   11998:	00000993          	li	s3,0
   1199c:	00000c13          	li	s8,0
   119a0:	00000d13          	li	s10,0
   119a4:	00000913          	li	s2,0
       */
      nlknown = 0;
      nldist = 0;
      do
	{
	  GETIOV (nlknown = 0);
   119a8:	06090c63          	beqz	s2,11a20 <__sfvwrite_r+0x2a8>
	  if (!nlknown)
   119ac:	140c0e63          	beqz	s8,11b08 <__sfvwrite_r+0x390>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
	      nldist = nl ? nl + 1 - p : len + 1;
	      nlknown = 1;
	    }
	  s = MIN (len, nldist);
   119b0:	00098b93          	mv	s7,s3
   119b4:	01397463          	bleu	s3,s2,119bc <__sfvwrite_r+0x244>
   119b8:	00090b93          	mv	s7,s2
	  w = fp->_w + fp->_bf._size;
	  if (fp->_p > fp->_bf._base && s > w)
   119bc:	00042503          	lw	a0,0(s0)
   119c0:	01042783          	lw	a5,16(s0)
	    {
	      nl = memchr ((_PTR) p, '\n', len);
	      nldist = nl ? nl + 1 - p : len + 1;
	      nlknown = 1;
	    }
	  s = MIN (len, nldist);
   119c4:	000b8b13          	mv	s6,s7
	  w = fp->_w + fp->_bf._size;
   119c8:	01442683          	lw	a3,20(s0)
	  if (fp->_p > fp->_bf._base && s > w)
   119cc:	00a7f863          	bleu	a0,a5,119dc <__sfvwrite_r+0x264>
	      nl = memchr ((_PTR) p, '\n', len);
	      nldist = nl ? nl + 1 - p : len + 1;
	      nlknown = 1;
	    }
	  s = MIN (len, nldist);
	  w = fp->_w + fp->_bf._size;
   119d0:	00842c83          	lw	s9,8(s0)
   119d4:	01968cb3          	add	s9,a3,s9
	  if (fp->_p > fp->_bf._base && s > w)
   119d8:	057cce63          	blt	s9,s7,11a34 <__sfvwrite_r+0x2bc>
	      /* fp->_w -= w; */
	      fp->_p += w;
	      if (_fflush_r (ptr, fp))
		goto err;
	    }
	  else if (s >= (w = fp->_bf._size))
   119dc:	0edbca63          	blt	s7,a3,11ad0 <__sfvwrite_r+0x358>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
   119e0:	02442783          	lw	a5,36(s0)
   119e4:	01c42583          	lw	a1,28(s0)
   119e8:	000d0613          	mv	a2,s10
   119ec:	000a8513          	mv	a0,s5
   119f0:	000780e7          	jalr	a5
   119f4:	00050b13          	mv	s6,a0
	      if (w <= 0)
   119f8:	f8a056e3          	blez	a0,11984 <__sfvwrite_r+0x20c>
	      w = s;
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	    }
	  if ((nldist -= w) == 0)
   119fc:	416989b3          	sub	s3,s3,s6
   11a00:	06098463          	beqz	s3,11a68 <__sfvwrite_r+0x2f0>
	      nlknown = 0;
	    }
	  p += w;
	  len -= w;
	}
      while ((uio->uio_resid -= w) != 0);
   11a04:	008a2783          	lw	a5,8(s4)
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
	      nlknown = 0;
	    }
	  p += w;
   11a08:	016d0d33          	add	s10,s10,s6
	  len -= w;
   11a0c:	41690933          	sub	s2,s2,s6
	}
      while ((uio->uio_resid -= w) != 0);
   11a10:	41678b33          	sub	s6,a5,s6
   11a14:	016a2423          	sw	s6,8(s4)
   11a18:	e00b0ce3          	beqz	s6,11830 <__sfvwrite_r+0xb8>
       */
      nlknown = 0;
      nldist = 0;
      do
	{
	  GETIOV (nlknown = 0);
   11a1c:	f80918e3          	bnez	s2,119ac <__sfvwrite_r+0x234>
   11a20:	0004ad03          	lw	s10,0(s1)
   11a24:	0044a903          	lw	s2,4(s1)
   11a28:	00000c13          	li	s8,0
   11a2c:	00848493          	addi	s1,s1,8
   11a30:	f79ff06f          	j	119a8 <__sfvwrite_r+0x230>
	    }
	  s = MIN (len, nldist);
	  w = fp->_w + fp->_bf._size;
	  if (fp->_p > fp->_bf._base && s > w)
	    {
	      COPY (w);
   11a34:	000d0593          	mv	a1,s10
   11a38:	000c8613          	mv	a2,s9
   11a3c:	341000ef          	jal	1257c <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
   11a40:	00042783          	lw	a5,0(s0)
	      if (_fflush_r (ptr, fp))
   11a44:	00040593          	mv	a1,s0
   11a48:	000a8513          	mv	a0,s5
	  w = fp->_w + fp->_bf._size;
	  if (fp->_p > fp->_bf._base && s > w)
	    {
	      COPY (w);
	      /* fp->_w -= w; */
	      fp->_p += w;
   11a4c:	019787b3          	add	a5,a5,s9
   11a50:	00f42023          	sw	a5,0(s0)
	      if (_fflush_r (ptr, fp))
   11a54:	5bc010ef          	jal	13010 <_fflush_r>
   11a58:	f20516e3          	bnez	a0,11984 <__sfvwrite_r+0x20c>
   11a5c:	000c8b13          	mv	s6,s9
	      w = s;
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	    }
	  if ((nldist -= w) == 0)
   11a60:	416989b3          	sub	s3,s3,s6
   11a64:	fa0990e3          	bnez	s3,11a04 <__sfvwrite_r+0x28c>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
   11a68:	00040593          	mv	a1,s0
   11a6c:	000a8513          	mv	a0,s5
   11a70:	5a0010ef          	jal	13010 <_fflush_r>
   11a74:	f00518e3          	bnez	a0,11984 <__sfvwrite_r+0x20c>
		goto err;
	      nlknown = 0;
   11a78:	00000c13          	li	s8,0
   11a7c:	f89ff06f          	j	11a04 <__sfvwrite_r+0x28c>
	      w = len;		/* but pretend copied all */
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
   11a80:	01397463          	bleu	s3,s2,11a88 <__sfvwrite_r+0x310>
   11a84:	00090993          	mv	s3,s2
	      COPY (w);
   11a88:	00098613          	mv	a2,s3
   11a8c:	000b8593          	mv	a1,s7
   11a90:	2ed000ef          	jal	1257c <memmove>
	      fp->_w -= w;
   11a94:	00842783          	lw	a5,8(s0)
	      fp->_p += w;
   11a98:	00042703          	lw	a4,0(s0)
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
   11a9c:	413787b3          	sub	a5,a5,s3
	      fp->_p += w;
   11aa0:	01370733          	add	a4,a4,s3
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
   11aa4:	00f42423          	sw	a5,8(s0)
	      fp->_p += w;
   11aa8:	00e42023          	sw	a4,0(s0)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
   11aac:	00078663          	beqz	a5,11ab8 <__sfvwrite_r+0x340>
   11ab0:	00098513          	mv	a0,s3
   11ab4:	e45ff06f          	j	118f8 <__sfvwrite_r+0x180>
   11ab8:	00040593          	mv	a1,s0
   11abc:	000a8513          	mv	a0,s5
   11ac0:	550010ef          	jal	13010 <_fflush_r>
   11ac4:	ec0510e3          	bnez	a0,11984 <__sfvwrite_r+0x20c>
   11ac8:	00098513          	mv	a0,s3
   11acc:	e2dff06f          	j	118f8 <__sfvwrite_r+0x180>
		goto err;
	    }
	  else
	    {
	      w = s;
	      COPY (w);
   11ad0:	000b8613          	mv	a2,s7
   11ad4:	000d0593          	mv	a1,s10
   11ad8:	2a5000ef          	jal	1257c <memmove>
	      fp->_w -= w;
   11adc:	00842703          	lw	a4,8(s0)
	      fp->_p += w;
   11ae0:	00042783          	lw	a5,0(s0)
	    }
	  else
	    {
	      w = s;
	      COPY (w);
	      fp->_w -= w;
   11ae4:	41770733          	sub	a4,a4,s7
	      fp->_p += w;
   11ae8:	01778bb3          	add	s7,a5,s7
	    }
	  else
	    {
	      w = s;
	      COPY (w);
	      fp->_w -= w;
   11aec:	00e42423          	sw	a4,8(s0)
	      fp->_p += w;
   11af0:	01742023          	sw	s7,0(s0)
   11af4:	f09ff06f          	j	119fc <__sfvwrite_r+0x284>
   11af8:	00042503          	lw	a0,0(s0)
		  fp->_bf._size = newsize;
		  w = len;
		  fp->_w = newsize - curpos;
		}
	      if (len < w)
		w = len;
   11afc:	00090993          	mv	s3,s2
   11b00:	00090c13          	mv	s8,s2
   11b04:	dcdff06f          	j	118d0 <__sfvwrite_r+0x158>
      do
	{
	  GETIOV (nlknown = 0);
	  if (!nlknown)
	    {
	      nl = memchr ((_PTR) p, '\n', len);
   11b08:	00090613          	mv	a2,s2
   11b0c:	00a00593          	li	a1,10
   11b10:	000d0513          	mv	a0,s10
   11b14:	075000ef          	jal	12388 <memchr>
	      nldist = nl ? nl + 1 - p : len + 1;
   11b18:	0c050e63          	beqz	a0,11bf4 <__sfvwrite_r+0x47c>
   11b1c:	00150513          	addi	a0,a0,1
   11b20:	41a509b3          	sub	s3,a0,s10
	      nlknown = 1;
   11b24:	00100c13          	li	s8,1
   11b28:	e89ff06f          	j	119b0 <__sfvwrite_r+0x238>
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
   11b2c:	01442983          	lw	s3,20(s0)
	  if (fp->_flags & __SSTR)
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
   11b30:	01042583          	lw	a1,16(s0)
   11b34:	00042c03          	lw	s8,0(s0)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
   11b38:	00199793          	slli	a5,s3,0x1
   11b3c:	013789b3          	add	s3,a5,s3
   11b40:	01f9d793          	srli	a5,s3,0x1f
	  if (fp->_flags & __SSTR)
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
   11b44:	40bc0c33          	sub	s8,s8,a1
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
   11b48:	013789b3          	add	s3,a5,s3
		  if (newsize < curpos + len + 1)
   11b4c:	001c0793          	addi	a5,s8,1
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
   11b50:	4019d993          	srai	s3,s3,0x1
		  if (newsize < curpos + len + 1)
   11b54:	012787b3          	add	a5,a5,s2
   11b58:	00098613          	mv	a2,s3
   11b5c:	00f9f663          	bleu	a5,s3,11b68 <__sfvwrite_r+0x3f0>
		    newsize = curpos + len + 1;
   11b60:	00078993          	mv	s3,a5
   11b64:	00078613          	mv	a2,a5
		  if (fp->_flags & __SOPT)
   11b68:	40077713          	andi	a4,a4,1024
   11b6c:	04070c63          	beqz	a4,11bc4 <__sfvwrite_r+0x44c>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
   11b70:	00060593          	mv	a1,a2
   11b74:	000a8513          	mv	a0,s5
   11b78:	098000ef          	jal	11c10 <_malloc_r>
   11b7c:	00050c93          	mv	s9,a0
		      if (!str)
   11b80:	08050063          	beqz	a0,11c00 <__sfvwrite_r+0x488>
			{
			  ptr->_errno = ENOMEM;
			  goto err;
			}
		      memcpy (str, fp->_bf._base, curpos);
   11b84:	01042583          	lw	a1,16(s0)
   11b88:	000c0613          	mv	a2,s8
   11b8c:	0d1000ef          	jal	1245c <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
   11b90:	00c45783          	lhu	a5,12(s0)
   11b94:	b7f7f793          	andi	a5,a5,-1153
   11b98:	0807e793          	ori	a5,a5,128
   11b9c:	00f41623          	sh	a5,12(s0)
			  ptr->_errno = ENOMEM;
			  goto err;
			}
		    }
		  fp->_bf._base = str;
		  fp->_p = str + curpos;
   11ba0:	018c8533          	add	a0,s9,s8
		  fp->_bf._size = newsize;
		  w = len;
		  fp->_w = newsize - curpos;
   11ba4:	41898c33          	sub	s8,s3,s8
			  goto err;
			}
		    }
		  fp->_bf._base = str;
		  fp->_p = str + curpos;
		  fp->_bf._size = newsize;
   11ba8:	01342a23          	sw	s3,20(s0)
		  w = len;
		  fp->_w = newsize - curpos;
   11bac:	01842423          	sw	s8,8(s0)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
			  goto err;
			}
		    }
		  fp->_bf._base = str;
   11bb0:	01942823          	sw	s9,16(s0)
		  fp->_p = str + curpos;
   11bb4:	00a42023          	sw	a0,0(s0)
		  fp->_bf._size = newsize;
		  w = len;
   11bb8:	00090993          	mv	s3,s2
   11bbc:	00090c13          	mv	s8,s2
   11bc0:	d11ff06f          	j	118d0 <__sfvwrite_r+0x158>
		      memcpy (str, fp->_bf._base, curpos);
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
   11bc4:	000a8513          	mv	a0,s5
   11bc8:	2dd000ef          	jal	126a4 <_realloc_r>
   11bcc:	00050c93          	mv	s9,a0
							 newsize);
		      if (!str)
   11bd0:	fc0518e3          	bnez	a0,11ba0 <__sfvwrite_r+0x428>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
   11bd4:	01042583          	lw	a1,16(s0)
   11bd8:	000a8513          	mv	a0,s5
   11bdc:	125010ef          	jal	13500 <_free_r>
			  fp->_flags &=  ~__SMBF;
   11be0:	00c41783          	lh	a5,12(s0)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
   11be4:	00c00713          	li	a4,12
   11be8:	00eaa023          	sw	a4,0(s5)
		      if (!str)
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
			  fp->_flags &=  ~__SMBF;
   11bec:	f7f7f793          	andi	a5,a5,-129
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
			  goto err;
   11bf0:	d99ff06f          	j	11988 <__sfvwrite_r+0x210>
	{
	  GETIOV (nlknown = 0);
	  if (!nlknown)
	    {
	      nl = memchr ((_PTR) p, '\n', len);
	      nldist = nl ? nl + 1 - p : len + 1;
   11bf4:	00190993          	addi	s3,s2,1
	      nlknown = 1;
   11bf8:	00100c13          	li	s8,1
   11bfc:	db5ff06f          	j	119b0 <__sfvwrite_r+0x238>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
		      if (!str)
			{
			  ptr->_errno = ENOMEM;
   11c00:	00c00793          	li	a5,12
   11c04:	00faa023          	sw	a5,0(s5)
   11c08:	00c41783          	lh	a5,12(s0)
			  goto err;
   11c0c:	d7dff06f          	j	11988 <__sfvwrite_r+0x210>

00011c10 <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
   11c10:	fd010113          	addi	sp,sp,-48
   11c14:	02912223          	sw	s1,36(sp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
   11c18:	01600793          	li	a5,22
   11c1c:	00b58493          	addi	s1,a1,11
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
   11c20:	01312e23          	sw	s3,28(sp)
   11c24:	02112623          	sw	ra,44(sp)
   11c28:	02812423          	sw	s0,40(sp)
   11c2c:	03212023          	sw	s2,32(sp)
   11c30:	01412c23          	sw	s4,24(sp)
   11c34:	01512a23          	sw	s5,20(sp)
   11c38:	01612823          	sw	s6,16(sp)
   11c3c:	01712623          	sw	s7,12(sp)
   11c40:	01812423          	sw	s8,8(sp)
   11c44:	01912223          	sw	s9,4(sp)
   11c48:	00050993          	mv	s3,a0
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
   11c4c:	1a97fc63          	bleu	s1,a5,11e04 <_malloc_r+0x1f4>
   11c50:	ff84f493          	andi	s1,s1,-8

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
   11c54:	2404c463          	bltz	s1,11e9c <_malloc_r+0x28c>
   11c58:	24b4e263          	bltu	s1,a1,11e9c <_malloc_r+0x28c>
  {
    RERRNO = ENOMEM;
    return 0;
  }

  MALLOC_LOCK;
   11c5c:	241000ef          	jal	1269c <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
   11c60:	1f700793          	li	a5,503
   11c64:	7097fa63          	bleu	s1,a5,12378 <_malloc_r+0x768>
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */

  }
  else
  {
    idx = bin_index(nb);
   11c68:	0094d793          	srli	a5,s1,0x9
   11c6c:	08000693          	li	a3,128
   11c70:	04000513          	li	a0,64
   11c74:	03f00593          	li	a1,63
   11c78:	22079a63          	bnez	a5,11eac <_malloc_r+0x29c>
    bin = bin_at(idx);
   11c7c:	00015937          	lui	s2,0x15
   11c80:	d1090913          	addi	s2,s2,-752 # 14d10 <__malloc_av_>
   11c84:	00269693          	slli	a3,a3,0x2
   11c88:	00d906b3          	add	a3,s2,a3

    for (victim = last(bin); victim != bin; victim = victim->bk)
   11c8c:	0046a403          	lw	s0,4(a3)

  }
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);
   11c90:	ff868693          	addi	a3,a3,-8

    for (victim = last(bin); victim != bin; victim = victim->bk)
   11c94:	22868a63          	beq	a3,s0,11ec8 <_malloc_r+0x2b8>
    {
      victim_size = chunksize(victim);
   11c98:	00442783          	lw	a5,4(s0)
      remainder_size = long_sub_size_t(victim_size, nb);
      
      if (remainder_size >= (long)MINSIZE) /* too big */
   11c9c:	00f00613          	li	a2,15
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
    {
      victim_size = chunksize(victim);
   11ca0:	ffc7f793          	andi	a5,a5,-4
      remainder_size = long_sub_size_t(victim_size, nb);
   11ca4:	40978733          	sub	a4,a5,s1
      
      if (remainder_size >= (long)MINSIZE) /* too big */
   11ca8:	02e64063          	blt	a2,a4,11cc8 <_malloc_r+0xb8>
      {
        --idx; /* adjust to rescan below after checking last remainder */
        break;   
      }

      else if (remainder_size >= 0) /* exact fit */
   11cac:	22075263          	bgez	a4,11ed0 <_malloc_r+0x2c0>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
   11cb0:	00c42403          	lw	s0,12(s0)
   11cb4:	20868a63          	beq	a3,s0,11ec8 <_malloc_r+0x2b8>
    {
      victim_size = chunksize(victim);
   11cb8:	00442783          	lw	a5,4(s0)
   11cbc:	ffc7f793          	andi	a5,a5,-4
      remainder_size = long_sub_size_t(victim_size, nb);
   11cc0:	40978733          	sub	a4,a5,s1
      
      if (remainder_size >= (long)MINSIZE) /* too big */
   11cc4:	fee654e3          	ble	a4,a2,11cac <_malloc_r+0x9c>
      {
        --idx; /* adjust to rescan below after checking last remainder */
        break;   
   11cc8:	00058693          	mv	a3,a1

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
   11ccc:	01092403          	lw	s0,16(s2)
   11cd0:	00890813          	addi	a6,s2,8
   11cd4:	4b040263          	beq	s0,a6,12178 <_malloc_r+0x568>
  {
    victim_size = chunksize(victim);
   11cd8:	00442783          	lw	a5,4(s0)
    remainder_size = long_sub_size_t(victim_size, nb);

    if (remainder_size >= (long)MINSIZE) /* re-split */
   11cdc:	00f00613          	li	a2,15

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
  {
    victim_size = chunksize(victim);
   11ce0:	ffc7f793          	andi	a5,a5,-4
    remainder_size = long_sub_size_t(victim_size, nb);
   11ce4:	40978733          	sub	a4,a5,s1

    if (remainder_size >= (long)MINSIZE) /* re-split */
   11ce8:	44e64a63          	blt	a2,a4,1213c <_malloc_r+0x52c>
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
      return chunk2mem(victim);
    }

    clear_last_remainder;
   11cec:	01092a23          	sw	a6,20(s2)
   11cf0:	01092823          	sw	a6,16(s2)

    if (remainder_size >= 0)  /* exhaust */
   11cf4:	20075663          	bgez	a4,11f00 <_malloc_r+0x2f0>
      return chunk2mem(victim);
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
   11cf8:	1ff00713          	li	a4,511
   11cfc:	3cf76e63          	bltu	a4,a5,120d8 <_malloc_r+0x4c8>
   11d00:	0037d793          	srli	a5,a5,0x3
   11d04:	00178613          	addi	a2,a5,1
   11d08:	00361613          	slli	a2,a2,0x3
   11d0c:	00492703          	lw	a4,4(s2)
   11d10:	00c90633          	add	a2,s2,a2
   11d14:	00062503          	lw	a0,0(a2)
   11d18:	4027d793          	srai	a5,a5,0x2
   11d1c:	00100593          	li	a1,1
   11d20:	00f597b3          	sll	a5,a1,a5
   11d24:	00e7e7b3          	or	a5,a5,a4
   11d28:	ff860713          	addi	a4,a2,-8
   11d2c:	00e42623          	sw	a4,12(s0)
   11d30:	00a42423          	sw	a0,8(s0)
   11d34:	00f92223          	sw	a5,4(s2)
   11d38:	00862023          	sw	s0,0(a2)
   11d3c:	00852623          	sw	s0,12(a0)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
   11d40:	4026d713          	srai	a4,a3,0x2
   11d44:	00100613          	li	a2,1
   11d48:	00e61633          	sll	a2,a2,a4
   11d4c:	1cc7ea63          	bltu	a5,a2,11f20 <_malloc_r+0x310>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
   11d50:	00f67733          	and	a4,a2,a5
   11d54:	02071463          	bnez	a4,11d7c <_malloc_r+0x16c>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
   11d58:	00161613          	slli	a2,a2,0x1
    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
   11d5c:	ffc6f693          	andi	a3,a3,-4
      block <<= 1;
      while ((block & binblocks) == 0)
   11d60:	00f67733          	and	a4,a2,a5
    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
   11d64:	00468693          	addi	a3,a3,4
      block <<= 1;
      while ((block & binblocks) == 0)
   11d68:	00071a63          	bnez	a4,11d7c <_malloc_r+0x16c>
      {
        idx += BINBLOCKWIDTH;
        block <<= 1;
   11d6c:	00161613          	slli	a2,a2,0x1
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
   11d70:	00f67733          	and	a4,a2,a5
      {
        idx += BINBLOCKWIDTH;
   11d74:	00468693          	addi	a3,a3,4
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
   11d78:	fe070ae3          	beqz	a4,11d6c <_malloc_r+0x15c>
        for (victim = last(bin); victim != bin; victim = victim->bk)
        {
          victim_size = chunksize(victim);
          remainder_size = long_sub_size_t(victim_size, nb);

          if (remainder_size >= (long)MINSIZE) /* split */
   11d7c:	00f00513          	li	a0,15
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
      q = bin = bin_at(idx);
   11d80:	00369893          	slli	a7,a3,0x3
   11d84:	012888b3          	add	a7,a7,s2
   11d88:	00088593          	mv	a1,a7
   11d8c:	00068293          	mv	t0,a3
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
   11d90:	00c5a403          	lw	s0,12(a1)
   11d94:	00859a63          	bne	a1,s0,11da8 <_malloc_r+0x198>
   11d98:	3e80006f          	j	12180 <_malloc_r+0x570>
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
            return chunk2mem(victim);
          }

          else if (remainder_size >= 0)  /* take */
   11d9c:	40075463          	bgez	a4,121a4 <_malloc_r+0x594>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
   11da0:	00c42403          	lw	s0,12(s0)
   11da4:	3c858e63          	beq	a1,s0,12180 <_malloc_r+0x570>
        {
          victim_size = chunksize(victim);
   11da8:	00442783          	lw	a5,4(s0)
   11dac:	ffc7f793          	andi	a5,a5,-4
          remainder_size = long_sub_size_t(victim_size, nb);
   11db0:	40978733          	sub	a4,a5,s1

          if (remainder_size >= (long)MINSIZE) /* split */
   11db4:	fee554e3          	ble	a4,a0,11d9c <_malloc_r+0x18c>
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
            unlink(victim, bck, fwd);
   11db8:	00c42683          	lw	a3,12(s0)
   11dbc:	00842603          	lw	a2,8(s0)
          victim_size = chunksize(victim);
          remainder_size = long_sub_size_t(victim_size, nb);

          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
   11dc0:	009407b3          	add	a5,s0,s1
            set_head(victim, nb | PREV_INUSE);
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
            set_head(remainder, remainder_size | PREV_INUSE);
   11dc4:	00176893          	ori	a7,a4,1
            set_foot(remainder, remainder_size);
   11dc8:	00e785b3          	add	a1,a5,a4
          remainder_size = long_sub_size_t(victim_size, nb);

          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
   11dcc:	0014e493          	ori	s1,s1,1
   11dd0:	00942223          	sw	s1,4(s0)
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
            set_head(remainder, remainder_size | PREV_INUSE);
            set_foot(remainder, remainder_size);
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
   11dd4:	00098513          	mv	a0,s3

          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
            unlink(victim, bck, fwd);
   11dd8:	00d62623          	sw	a3,12(a2)
   11ddc:	00c6a423          	sw	a2,8(a3)
            link_last_remainder(remainder);
   11de0:	00f92a23          	sw	a5,20(s2)
   11de4:	00f92823          	sw	a5,16(s2)
   11de8:	0107a623          	sw	a6,12(a5)
   11dec:	0107a423          	sw	a6,8(a5)
            set_head(remainder, remainder_size | PREV_INUSE);
   11df0:	0117a223          	sw	a7,4(a5)
            set_foot(remainder, remainder_size);
   11df4:	00e5a023          	sw	a4,0(a1)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
   11df8:	0a9000ef          	jal	126a0 <__malloc_unlock>
            return chunk2mem(victim);
   11dfc:	00840513          	addi	a0,s0,8
   11e00:	0680006f          	j	11e68 <_malloc_r+0x258>
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
   11e04:	01000493          	li	s1,16
   11e08:	08b4ea63          	bltu	s1,a1,11e9c <_malloc_r+0x28c>
  {
    RERRNO = ENOMEM;
    return 0;
  }

  MALLOC_LOCK;
   11e0c:	091000ef          	jal	1269c <__malloc_lock>
   11e10:	00600793          	li	a5,6
   11e14:	00200693          	li	a3,2
  {
    idx = smallbin_index(nb); 

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
   11e18:	00015937          	lui	s2,0x15
   11e1c:	d1090913          	addi	s2,s2,-752 # 14d10 <__malloc_av_>
   11e20:	00279793          	slli	a5,a5,0x2
   11e24:	00f907b3          	add	a5,s2,a5
    victim = last(q);
   11e28:	0047a403          	lw	s0,4(a5)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
   11e2c:	ff878713          	addi	a4,a5,-8
   11e30:	36e40263          	beq	s0,a4,12194 <_malloc_r+0x584>
      victim = last(q);
    }
#endif
    if (victim != q)
    {
      victim_size = chunksize(victim);
   11e34:	00442783          	lw	a5,4(s0)
      unlink(victim, bck, fwd);
   11e38:	00c42683          	lw	a3,12(s0)
   11e3c:	00842603          	lw	a2,8(s0)
      victim = last(q);
    }
#endif
    if (victim != q)
    {
      victim_size = chunksize(victim);
   11e40:	ffc7f793          	andi	a5,a5,-4
      unlink(victim, bck, fwd);
      set_inuse_bit_at_offset(victim, victim_size);
   11e44:	00f407b3          	add	a5,s0,a5
   11e48:	0047a703          	lw	a4,4(a5)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   11e4c:	00098513          	mv	a0,s3
    }
#endif
    if (victim != q)
    {
      victim_size = chunksize(victim);
      unlink(victim, bck, fwd);
   11e50:	00d62623          	sw	a3,12(a2)
      set_inuse_bit_at_offset(victim, victim_size);
   11e54:	00176713          	ori	a4,a4,1
    }
#endif
    if (victim != q)
    {
      victim_size = chunksize(victim);
      unlink(victim, bck, fwd);
   11e58:	00c6a423          	sw	a2,8(a3)
      set_inuse_bit_at_offset(victim, victim_size);
   11e5c:	00e7a223          	sw	a4,4(a5)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   11e60:	041000ef          	jal	126a0 <__malloc_unlock>
      return chunk2mem(victim);
   11e64:	00840513          	addi	a0,s0,8
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
  return chunk2mem(victim);

#endif /* MALLOC_PROVIDED */
}
   11e68:	02c12083          	lw	ra,44(sp)
   11e6c:	02812403          	lw	s0,40(sp)
   11e70:	02412483          	lw	s1,36(sp)
   11e74:	02012903          	lw	s2,32(sp)
   11e78:	01c12983          	lw	s3,28(sp)
   11e7c:	01812a03          	lw	s4,24(sp)
   11e80:	01412a83          	lw	s5,20(sp)
   11e84:	01012b03          	lw	s6,16(sp)
   11e88:	00c12b83          	lw	s7,12(sp)
   11e8c:	00812c03          	lw	s8,8(sp)
   11e90:	00412c83          	lw	s9,4(sp)
   11e94:	03010113          	addi	sp,sp,48
   11e98:	00008067          	ret
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
  {
    RERRNO = ENOMEM;
   11e9c:	00c00793          	li	a5,12
   11ea0:	00f9a023          	sw	a5,0(s3)
    return 0;
   11ea4:	00000513          	li	a0,0
   11ea8:	fc1ff06f          	j	11e68 <_malloc_r+0x258>
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */

  }
  else
  {
    idx = bin_index(nb);
   11eac:	00400713          	li	a4,4
   11eb0:	20f76263          	bltu	a4,a5,120b4 <_malloc_r+0x4a4>
   11eb4:	0064d593          	srli	a1,s1,0x6
   11eb8:	03958513          	addi	a0,a1,57
   11ebc:	00151693          	slli	a3,a0,0x1
   11ec0:	03858593          	addi	a1,a1,56
   11ec4:	db9ff06f          	j	11c7c <_malloc_r+0x6c>
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
   11ec8:	00050693          	mv	a3,a0
   11ecc:	e01ff06f          	j	11ccc <_malloc_r+0xbc>
      }

      else if (remainder_size >= 0) /* exact fit */
      {
        unlink(victim, bck, fwd);
        set_inuse_bit_at_offset(victim, victim_size);
   11ed0:	00f407b3          	add	a5,s0,a5
   11ed4:	0047a703          	lw	a4,4(a5)
        break;   
      }

      else if (remainder_size >= 0) /* exact fit */
      {
        unlink(victim, bck, fwd);
   11ed8:	00c42683          	lw	a3,12(s0)
   11edc:	00842603          	lw	a2,8(s0)
        set_inuse_bit_at_offset(victim, victim_size);
   11ee0:	00176713          	ori	a4,a4,1
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
   11ee4:	00098513          	mv	a0,s3
        break;   
      }

      else if (remainder_size >= 0) /* exact fit */
      {
        unlink(victim, bck, fwd);
   11ee8:	00d62623          	sw	a3,12(a2)
   11eec:	00c6a423          	sw	a2,8(a3)
        set_inuse_bit_at_offset(victim, victim_size);
   11ef0:	00e7a223          	sw	a4,4(a5)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
   11ef4:	7ac000ef          	jal	126a0 <__malloc_unlock>
        return chunk2mem(victim);
   11ef8:	00840513          	addi	a0,s0,8
   11efc:	f6dff06f          	j	11e68 <_malloc_r+0x258>

    clear_last_remainder;

    if (remainder_size >= 0)  /* exhaust */
    {
      set_inuse_bit_at_offset(victim, victim_size);
   11f00:	00f407b3          	add	a5,s0,a5
   11f04:	0047a703          	lw	a4,4(a5)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   11f08:	00098513          	mv	a0,s3

    clear_last_remainder;

    if (remainder_size >= 0)  /* exhaust */
    {
      set_inuse_bit_at_offset(victim, victim_size);
   11f0c:	00176713          	ori	a4,a4,1
   11f10:	00e7a223          	sw	a4,4(a5)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   11f14:	78c000ef          	jal	126a0 <__malloc_unlock>
      return chunk2mem(victim);
   11f18:	00840513          	addi	a0,s0,8
   11f1c:	f4dff06f          	j	11e68 <_malloc_r+0x258>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
   11f20:	00892403          	lw	s0,8(s2)
   11f24:	00442a03          	lw	s4,4(s0)
   11f28:	ffca7a93          	andi	s5,s4,-4
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
   11f2c:	009ae863          	bltu	s5,s1,11f3c <_malloc_r+0x32c>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
   11f30:	409a87b3          	sub	a5,s5,s1
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
   11f34:	00f00713          	li	a4,15
   11f38:	14f74a63          	blt	a4,a5,1208c <_malloc_r+0x47c>
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
   11f3c:	82c1a703          	lw	a4,-2004(gp) # 1514c <__malloc_top_pad>

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
   11f40:	8141a683          	lw	a3,-2028(gp) # 15134 <__malloc_sbrk_base>
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
   11f44:	00e48733          	add	a4,s1,a4

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
   11f48:	fff00793          	li	a5,-1
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
   11f4c:	01540b33          	add	s6,s0,s5

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
   11f50:	01070a13          	addi	s4,a4,16

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
   11f54:	00f68c63          	beq	a3,a5,11f6c <_malloc_r+0x35c>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
   11f58:	000016b7          	lui	a3,0x1
   11f5c:	00f68a13          	addi	s4,a3,15 # 100f <_reset+0xe0f>
   11f60:	014706b3          	add	a3,a4,s4
   11f64:	fffff737          	lui	a4,0xfffff
   11f68:	00e6fa33          	and	s4,a3,a4

  brk = (char*)(MORECORE (sbrk_size));
   11f6c:	000a0513          	mv	a0,s4
   11f70:	c60fe0ef          	jal	103d0 <sbrk>

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
   11f74:	fff00793          	li	a5,-1
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);

  brk = (char*)(MORECORE (sbrk_size));
   11f78:	00050b93          	mv	s7,a0

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
   11f7c:	28f50063          	beq	a0,a5,121fc <_malloc_r+0x5ec>
   11f80:	27656c63          	bltu	a0,s6,121f8 <_malloc_r+0x5e8>
      (brk < old_end && old_top != initial_top))
    return;

  sbrked_mem += sbrk_size;
   11f84:	85018c13          	addi	s8,gp,-1968 # 15170 <__malloc_current_mallinfo>
   11f88:	000c2703          	lw	a4,0(s8)
   11f8c:	00ea0733          	add	a4,s4,a4
   11f90:	00ec2023          	sw	a4,0(s8)

  if (brk == old_end /* can just add bytes to current top, unless
   11f94:	357b0c63          	beq	s6,s7,122ec <_malloc_r+0x6dc>
    top_size = sbrk_size + old_top_size;
    set_head(top, top_size | PREV_INUSE);
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
   11f98:	8141a683          	lw	a3,-2028(gp) # 15134 <__malloc_sbrk_base>
   11f9c:	fff00793          	li	a5,-1
   11fa0:	36f68a63          	beq	a3,a5,12314 <_malloc_r+0x704>
      sbrk_base = brk;
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
   11fa4:	416b8b33          	sub	s6,s7,s6
   11fa8:	00eb0733          	add	a4,s6,a4
   11fac:	00ec2023          	sw	a4,0(s8)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
   11fb0:	007bf713          	andi	a4,s7,7
    if (front_misalign > 0) 
   11fb4:	000017b7          	lui	a5,0x1
   11fb8:	00070a63          	beqz	a4,11fcc <_malloc_r+0x3bc>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
      brk += correction;
   11fbc:	40eb8bb3          	sub	s7,s7,a4
   11fc0:	00878793          	addi	a5,a5,8 # 1008 <_reset+0xe08>
   11fc4:	008b8b93          	addi	s7,s7,8
   11fc8:	40e787b3          	sub	a5,a5,a4
    }
    else
      correction = 0;

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
   11fcc:	00001737          	lui	a4,0x1
   11fd0:	fff70713          	addi	a4,a4,-1 # fff <_reset+0xdff>
   11fd4:	014b8a33          	add	s4,s7,s4
   11fd8:	00ea7a33          	and	s4,s4,a4
   11fdc:	41478a33          	sub	s4,a5,s4

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
   11fe0:	000a0513          	mv	a0,s4
   11fe4:	becfe0ef          	jal	103d0 <sbrk>
    if (new_brk == (char*)(MORECORE_FAILURE))
   11fe8:	fff00793          	li	a5,-1
   11fec:	30f50e63          	beq	a0,a5,12308 <_malloc_r+0x6f8>
   11ff0:	417507b3          	sub	a5,a0,s7
   11ff4:	014787b3          	add	a5,a5,s4
   11ff8:	0017e793          	ori	a5,a5,1
	correction = 0;
	correction_failed = 1;
	new_brk = brk;
      }

    sbrked_mem += correction;
   11ffc:	000c2703          	lw	a4,0(s8)

    top = (mchunkptr)brk;
   12000:	01792423          	sw	s7,8(s2)
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
   12004:	00fba223          	sw	a5,4(s7)
	correction = 0;
	correction_failed = 1;
	new_brk = brk;
      }

    sbrked_mem += correction;
   12008:	00ea0733          	add	a4,s4,a4
   1200c:	00ec2023          	sw	a4,0(s8)

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);

    if (old_top != initial_top)
   12010:	03240c63          	beq	s0,s2,12048 <_malloc_r+0x438>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
   12014:	00f00613          	li	a2,15
   12018:	29567263          	bleu	s5,a2,1229c <_malloc_r+0x68c>
        return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
      set_head_size(old_top, old_top_size);
   1201c:	00442683          	lw	a3,4(s0)
        set_head(top, PREV_INUSE); /* will force null return from malloc */
        return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
   12020:	ff4a8793          	addi	a5,s5,-12
   12024:	ff87f793          	andi	a5,a5,-8
      set_head_size(old_top, old_top_size);
   12028:	0016f693          	andi	a3,a3,1
      chunk_at_offset(old_top, old_top_size          )->size =
   1202c:	00f405b3          	add	a1,s0,a5
   12030:	00500513          	li	a0,5
        return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
      set_head_size(old_top, old_top_size);
   12034:	00f6e6b3          	or	a3,a3,a5
   12038:	00d42223          	sw	a3,4(s0)
      chunk_at_offset(old_top, old_top_size          )->size =
   1203c:	00a5a223          	sw	a0,4(a1)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
   12040:	00a5a423          	sw	a0,8(a1)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
   12044:	2cf66c63          	bltu	a2,a5,1231c <_malloc_r+0x70c>
        fREe(RCALL chunk2mem(old_top));
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
   12048:	8281a683          	lw	a3,-2008(gp) # 15148 <__malloc_max_sbrked_mem>
   1204c:	00e6f463          	bleu	a4,a3,12054 <_malloc_r+0x444>
    max_sbrked_mem = sbrked_mem;
   12050:	82e1a423          	sw	a4,-2008(gp) # 15148 <__malloc_max_sbrked_mem>
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
   12054:	8241a683          	lw	a3,-2012(gp) # 15144 <__malloc_max_total_mem>
   12058:	00892403          	lw	s0,8(s2)
   1205c:	00e6f463          	bleu	a4,a3,12064 <_malloc_r+0x454>
    max_total_mem = sbrked_mem;
   12060:	82e1a223          	sw	a4,-2012(gp) # 15144 <__malloc_max_total_mem>
   12064:	00442703          	lw	a4,4(s0)
   12068:	ffc77713          	andi	a4,a4,-4
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
    remainder_size = long_sub_size_t(chunksize(top), nb);
   1206c:	409707b3          	sub	a5,a4,s1
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
   12070:	00976663          	bltu	a4,s1,1207c <_malloc_r+0x46c>
   12074:	00f00713          	li	a4,15
   12078:	00f74a63          	blt	a4,a5,1208c <_malloc_r+0x47c>
    {
      MALLOC_UNLOCK;
   1207c:	00098513          	mv	a0,s3
   12080:	620000ef          	jal	126a0 <__malloc_unlock>
      return 0; /* propagate failure */
   12084:	00000513          	li	a0,0
   12088:	de1ff06f          	j	11e68 <_malloc_r+0x258>
    }
  }

  victim = top;
  set_head(victim, nb | PREV_INUSE);
  top = chunk_at_offset(victim, nb);
   1208c:	00940733          	add	a4,s0,s1
  set_head(top, remainder_size | PREV_INUSE);
   12090:	0017e793          	ori	a5,a5,1
      return 0; /* propagate failure */
    }
  }

  victim = top;
  set_head(victim, nb | PREV_INUSE);
   12094:	0014e493          	ori	s1,s1,1
   12098:	00942223          	sw	s1,4(s0)
  top = chunk_at_offset(victim, nb);
  set_head(top, remainder_size | PREV_INUSE);
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
   1209c:	00098513          	mv	a0,s3
    }
  }

  victim = top;
  set_head(victim, nb | PREV_INUSE);
  top = chunk_at_offset(victim, nb);
   120a0:	00e92423          	sw	a4,8(s2)
  set_head(top, remainder_size | PREV_INUSE);
   120a4:	00f72223          	sw	a5,4(a4)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
   120a8:	5f8000ef          	jal	126a0 <__malloc_unlock>
  return chunk2mem(victim);
   120ac:	00840513          	addi	a0,s0,8
   120b0:	db9ff06f          	j	11e68 <_malloc_r+0x258>
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */

  }
  else
  {
    idx = bin_index(nb);
   120b4:	01400713          	li	a4,20
   120b8:	10f77e63          	bleu	a5,a4,121d4 <_malloc_r+0x5c4>
   120bc:	05400713          	li	a4,84
   120c0:	1af76063          	bltu	a4,a5,12260 <_malloc_r+0x650>
   120c4:	00c4d593          	srli	a1,s1,0xc
   120c8:	06f58513          	addi	a0,a1,111
   120cc:	00151693          	slli	a3,a0,0x1
   120d0:	06e58593          	addi	a1,a1,110
   120d4:	ba9ff06f          	j	11c7c <_malloc_r+0x6c>
      return chunk2mem(victim);
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
   120d8:	0097d713          	srli	a4,a5,0x9
   120dc:	00400613          	li	a2,4
   120e0:	10e67263          	bleu	a4,a2,121e4 <_malloc_r+0x5d4>
   120e4:	01400613          	li	a2,20
   120e8:	1ee66463          	bltu	a2,a4,122d0 <_malloc_r+0x6c0>
   120ec:	05c70593          	addi	a1,a4,92
   120f0:	05b70613          	addi	a2,a4,91
   120f4:	00159593          	slli	a1,a1,0x1
   120f8:	00259593          	slli	a1,a1,0x2
   120fc:	00b905b3          	add	a1,s2,a1
   12100:	0005a703          	lw	a4,0(a1)
   12104:	ff858593          	addi	a1,a1,-8
   12108:	16e58a63          	beq	a1,a4,1227c <_malloc_r+0x66c>
   1210c:	00472603          	lw	a2,4(a4)
   12110:	ffc67613          	andi	a2,a2,-4
   12114:	00c7f663          	bleu	a2,a5,12120 <_malloc_r+0x510>
   12118:	00872703          	lw	a4,8(a4)
   1211c:	fee598e3          	bne	a1,a4,1210c <_malloc_r+0x4fc>
   12120:	00c72583          	lw	a1,12(a4)
   12124:	00492783          	lw	a5,4(s2)
   12128:	00b42623          	sw	a1,12(s0)
   1212c:	00e42423          	sw	a4,8(s0)
   12130:	0085a423          	sw	s0,8(a1)
   12134:	00872623          	sw	s0,12(a4)
   12138:	c09ff06f          	j	11d40 <_malloc_r+0x130>
    victim_size = chunksize(victim);
    remainder_size = long_sub_size_t(victim_size, nb);

    if (remainder_size >= (long)MINSIZE) /* re-split */
    {
      remainder = chunk_at_offset(victim, nb);
   1213c:	009407b3          	add	a5,s0,s1
      set_head(victim, nb | PREV_INUSE);
      link_last_remainder(remainder);
      set_head(remainder, remainder_size | PREV_INUSE);
   12140:	00176613          	ori	a2,a4,1
      set_foot(remainder, remainder_size);
   12144:	00e786b3          	add	a3,a5,a4
    remainder_size = long_sub_size_t(victim_size, nb);

    if (remainder_size >= (long)MINSIZE) /* re-split */
    {
      remainder = chunk_at_offset(victim, nb);
      set_head(victim, nb | PREV_INUSE);
   12148:	0014e493          	ori	s1,s1,1
   1214c:	00942223          	sw	s1,4(s0)
      link_last_remainder(remainder);
      set_head(remainder, remainder_size | PREV_INUSE);
      set_foot(remainder, remainder_size);
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   12150:	00098513          	mv	a0,s3

    if (remainder_size >= (long)MINSIZE) /* re-split */
    {
      remainder = chunk_at_offset(victim, nb);
      set_head(victim, nb | PREV_INUSE);
      link_last_remainder(remainder);
   12154:	00f92a23          	sw	a5,20(s2)
   12158:	00f92823          	sw	a5,16(s2)
   1215c:	0107a623          	sw	a6,12(a5)
   12160:	0107a423          	sw	a6,8(a5)
      set_head(remainder, remainder_size | PREV_INUSE);
   12164:	00c7a223          	sw	a2,4(a5)
      set_foot(remainder, remainder_size);
   12168:	00e6a023          	sw	a4,0(a3)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   1216c:	534000ef          	jal	126a0 <__malloc_unlock>
      return chunk2mem(victim);
   12170:	00840513          	addi	a0,s0,8
   12174:	cf5ff06f          	j	11e68 <_malloc_r+0x258>
   12178:	00492783          	lw	a5,4(s2)
   1217c:	bc5ff06f          	j	11d40 <_malloc_r+0x130>
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
   12180:	00128293          	addi	t0,t0,1
   12184:	0032f793          	andi	a5,t0,3
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
   12188:	00858593          	addi	a1,a1,8
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
   1218c:	c00792e3          	bnez	a5,11d90 <_malloc_r+0x180>
   12190:	0880006f          	j	12218 <_malloc_r+0x608>
#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
    {
      q = next_bin(q);
      victim = last(q);
   12194:	00c7a403          	lw	s0,12(a5)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
      return chunk2mem(victim);
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
   12198:	00268693          	addi	a3,a3,2
    {
      q = next_bin(q);
      victim = last(q);
    }
#endif
    if (victim != q)
   1219c:	b28788e3          	beq	a5,s0,11ccc <_malloc_r+0xbc>
   121a0:	c95ff06f          	j	11e34 <_malloc_r+0x224>
            return chunk2mem(victim);
          }

          else if (remainder_size >= 0)  /* take */
          {
            set_inuse_bit_at_offset(victim, victim_size);
   121a4:	00f407b3          	add	a5,s0,a5
   121a8:	0047a703          	lw	a4,4(a5)
            unlink(victim, bck, fwd);
   121ac:	00c42683          	lw	a3,12(s0)
   121b0:	00842603          	lw	a2,8(s0)
            return chunk2mem(victim);
          }

          else if (remainder_size >= 0)  /* take */
          {
            set_inuse_bit_at_offset(victim, victim_size);
   121b4:	00176713          	ori	a4,a4,1
   121b8:	00e7a223          	sw	a4,4(a5)
            unlink(victim, bck, fwd);
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
   121bc:	00098513          	mv	a0,s3
          }

          else if (remainder_size >= 0)  /* take */
          {
            set_inuse_bit_at_offset(victim, victim_size);
            unlink(victim, bck, fwd);
   121c0:	00d62623          	sw	a3,12(a2)
   121c4:	00c6a423          	sw	a2,8(a3)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
   121c8:	4d8000ef          	jal	126a0 <__malloc_unlock>
            return chunk2mem(victim);
   121cc:	00840513          	addi	a0,s0,8
   121d0:	c99ff06f          	j	11e68 <_malloc_r+0x258>
   121d4:	05c78513          	addi	a0,a5,92
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */

  }
  else
  {
    idx = bin_index(nb);
   121d8:	05b78593          	addi	a1,a5,91
   121dc:	00151693          	slli	a3,a0,0x1
   121e0:	a9dff06f          	j	11c7c <_malloc_r+0x6c>
      return chunk2mem(victim);
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
   121e4:	0067d613          	srli	a2,a5,0x6
   121e8:	03960593          	addi	a1,a2,57
   121ec:	00159593          	slli	a1,a1,0x1
   121f0:	03860613          	addi	a2,a2,56
   121f4:	f05ff06f          	j	120f8 <_malloc_r+0x4e8>

  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
   121f8:	d92406e3          	beq	s0,s2,11f84 <_malloc_r+0x374>
   121fc:	00892403          	lw	s0,8(s2)
   12200:	00442703          	lw	a4,4(s0)
   12204:	ffc77713          	andi	a4,a4,-4
   12208:	e65ff06f          	j	1206c <_malloc_r+0x45c>
          binblocks &= ~block;
          break;
        }
        --startidx;
       q = prev_bin(q);
      } while (first(q) == q);
   1220c:	0088a783          	lw	a5,8(a7)
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
        {
          binblocks &= ~block;
          break;
        }
        --startidx;
   12210:	fff68693          	addi	a3,a3,-1
       q = prev_bin(q);
      } while (first(q) == q);
   12214:	14f89e63          	bne	a7,a5,12370 <_malloc_r+0x760>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
   12218:	0036f793          	andi	a5,a3,3
        {
          binblocks &= ~block;
          break;
        }
        --startidx;
       q = prev_bin(q);
   1221c:	ff888893          	addi	a7,a7,-8

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
   12220:	fe0796e3          	bnez	a5,1220c <_malloc_r+0x5fc>
        {
          binblocks &= ~block;
   12224:	00492783          	lw	a5,4(s2)
   12228:	fff64713          	not	a4,a2
   1222c:	00f777b3          	and	a5,a4,a5
   12230:	00f92223          	sw	a5,4(s2)
       q = prev_bin(q);
      } while (first(q) == q);

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
   12234:	00161613          	slli	a2,a2,0x1
   12238:	cec7e4e3          	bltu	a5,a2,11f20 <_malloc_r+0x310>
   1223c:	ce0602e3          	beqz	a2,11f20 <_malloc_r+0x310>
      {
        while ((block & binblocks) == 0)
   12240:	00f67733          	and	a4,a2,a5
   12244:	00028693          	mv	a3,t0
   12248:	b2071ce3          	bnez	a4,11d80 <_malloc_r+0x170>
        {
          idx += BINBLOCKWIDTH;
          block <<= 1;
   1224c:	00161613          	slli	a2,a2,0x1

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
   12250:	00f67733          	and	a4,a2,a5
        {
          idx += BINBLOCKWIDTH;
   12254:	00468693          	addi	a3,a3,4

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
   12258:	fe070ae3          	beqz	a4,1224c <_malloc_r+0x63c>
   1225c:	b25ff06f          	j	11d80 <_malloc_r+0x170>
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */

  }
  else
  {
    idx = bin_index(nb);
   12260:	15400713          	li	a4,340
   12264:	04f76263          	bltu	a4,a5,122a8 <_malloc_r+0x698>
   12268:	00f4d593          	srli	a1,s1,0xf
   1226c:	07858513          	addi	a0,a1,120
   12270:	00151693          	slli	a3,a0,0x1
   12274:	07758593          	addi	a1,a1,119
   12278:	a05ff06f          	j	11c7c <_malloc_r+0x6c>
      return chunk2mem(victim);
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
   1227c:	00492703          	lw	a4,4(s2)
   12280:	40265613          	srai	a2,a2,0x2
   12284:	00100793          	li	a5,1
   12288:	00c797b3          	sll	a5,a5,a2
   1228c:	00e7e7b3          	or	a5,a5,a4
   12290:	00f92223          	sw	a5,4(s2)
   12294:	00058713          	mv	a4,a1
   12298:	e91ff06f          	j	12128 <_malloc_r+0x518>
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
   1229c:	00100793          	li	a5,1
   122a0:	00fba223          	sw	a5,4(s7)
   122a4:	dd9ff06f          	j	1207c <_malloc_r+0x46c>
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */

  }
  else
  {
    idx = bin_index(nb);
   122a8:	55400713          	li	a4,1364
   122ac:	0fe00693          	li	a3,254
   122b0:	07f00513          	li	a0,127
   122b4:	07e00593          	li	a1,126
   122b8:	9cf762e3          	bltu	a4,a5,11c7c <_malloc_r+0x6c>
   122bc:	0124d593          	srli	a1,s1,0x12
   122c0:	07d58513          	addi	a0,a1,125
   122c4:	00151693          	slli	a3,a0,0x1
   122c8:	07c58593          	addi	a1,a1,124
   122cc:	9b1ff06f          	j	11c7c <_malloc_r+0x6c>
      return chunk2mem(victim);
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
   122d0:	05400613          	li	a2,84
   122d4:	04e66e63          	bltu	a2,a4,12330 <_malloc_r+0x720>
   122d8:	00c7d613          	srli	a2,a5,0xc
   122dc:	06f60593          	addi	a1,a2,111
   122e0:	00159593          	slli	a1,a1,0x1
   122e4:	06e60613          	addi	a2,a2,110
   122e8:	e11ff06f          	j	120f8 <_malloc_r+0x4e8>

  sbrked_mem += sbrk_size;

  if (brk == old_end /* can just add bytes to current top, unless
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
   122ec:	014b1793          	slli	a5,s6,0x14
   122f0:	ca0794e3          	bnez	a5,11f98 <_malloc_r+0x388>
  {
    top_size = sbrk_size + old_top_size;
    set_head(top, top_size | PREV_INUSE);
   122f4:	00892783          	lw	a5,8(s2)
   122f8:	014a8a33          	add	s4,s5,s4
   122fc:	001a6a13          	ori	s4,s4,1
   12300:	0147a223          	sw	s4,4(a5)
   12304:	d45ff06f          	j	12048 <_malloc_r+0x438>
    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
    if (new_brk == (char*)(MORECORE_FAILURE))
   12308:	00100793          	li	a5,1
      {
	correction = 0;
   1230c:	00000a13          	li	s4,0
   12310:	cedff06f          	j	11ffc <_malloc_r+0x3ec>
    set_head(top, top_size | PREV_INUSE);
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
      sbrk_base = brk;
   12314:	8171aa23          	sw	s7,-2028(gp) # 15134 <__malloc_sbrk_base>
   12318:	c99ff06f          	j	11fb0 <_malloc_r+0x3a0>
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
        fREe(RCALL chunk2mem(old_top));
   1231c:	00840593          	addi	a1,s0,8
   12320:	00098513          	mv	a0,s3
   12324:	1dc010ef          	jal	13500 <_free_r>
   12328:	000c2703          	lw	a4,0(s8)
   1232c:	d1dff06f          	j	12048 <_malloc_r+0x438>
      return chunk2mem(victim);
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
   12330:	15400613          	li	a2,340
   12334:	00e66c63          	bltu	a2,a4,1234c <_malloc_r+0x73c>
   12338:	00f7d613          	srli	a2,a5,0xf
   1233c:	07860593          	addi	a1,a2,120
   12340:	00159593          	slli	a1,a1,0x1
   12344:	07760613          	addi	a2,a2,119
   12348:	db1ff06f          	j	120f8 <_malloc_r+0x4e8>
   1234c:	55400513          	li	a0,1364
   12350:	0fe00593          	li	a1,254
   12354:	07e00613          	li	a2,126
   12358:	dae560e3          	bltu	a0,a4,120f8 <_malloc_r+0x4e8>
   1235c:	0127d613          	srli	a2,a5,0x12
   12360:	07d60593          	addi	a1,a2,125
   12364:	00159593          	slli	a1,a1,0x1
   12368:	07c60613          	addi	a2,a2,124
   1236c:	d8dff06f          	j	120f8 <_malloc_r+0x4e8>
   12370:	00492783          	lw	a5,4(s2)
   12374:	ec1ff06f          	j	12234 <_malloc_r+0x624>
   12378:	0034d693          	srli	a3,s1,0x3
   1237c:	00168793          	addi	a5,a3,1
   12380:	00179793          	slli	a5,a5,0x1
   12384:	a95ff06f          	j	11e18 <_malloc_r+0x208>

00012388 <memchr>:
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
   12388:	00357793          	andi	a5,a0,3
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
  unsigned char d = c;
   1238c:	0ff5f693          	andi	a3,a1,255
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
   12390:	0c078063          	beqz	a5,12450 <memchr+0xc8>
    {
      if (!length--)
   12394:	fff60793          	addi	a5,a2,-1
   12398:	06060063          	beqz	a2,123f8 <memchr+0x70>
        return NULL;
      if (*src == d)
   1239c:	00054703          	lbu	a4,0(a0)
   123a0:	00d71c63          	bne	a4,a3,123b8 <memchr+0x30>
   123a4:	0b40006f          	j	12458 <memchr+0xd0>
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
    {
      if (!length--)
   123a8:	04078863          	beqz	a5,123f8 <memchr+0x70>
        return NULL;
      if (*src == d)
   123ac:	00054703          	lbu	a4,0(a0)
   123b0:	fff78793          	addi	a5,a5,-1
   123b4:	04d70463          	beq	a4,a3,123fc <memchr+0x74>
        return (void *) src;
      src++;
   123b8:	00150513          	addi	a0,a0,1
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
   123bc:	00357713          	andi	a4,a0,3
   123c0:	fe0714e3          	bnez	a4,123a8 <memchr+0x20>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
   123c4:	00300813          	li	a6,3
   123c8:	02f86c63          	bltu	a6,a5,12400 <memchr+0x78>
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
   123cc:	02078663          	beqz	a5,123f8 <memchr+0x70>
    {
      if (*src == d)
   123d0:	00054703          	lbu	a4,0(a0)
   123d4:	02d70463          	beq	a4,a3,123fc <memchr+0x74>
   123d8:	00150713          	addi	a4,a0,1
   123dc:	00f507b3          	add	a5,a0,a5
   123e0:	0100006f          	j	123f0 <memchr+0x68>
   123e4:	00170713          	addi	a4,a4,1
   123e8:	fff74603          	lbu	a2,-1(a4)
   123ec:	00d60863          	beq	a2,a3,123fc <memchr+0x74>
        return (void *) src;
      src++;
   123f0:	00070513          	mv	a0,a4
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
   123f4:	fee798e3          	bne	a5,a4,123e4 <memchr+0x5c>
  unsigned int i;

  while (UNALIGNED (src))
    {
      if (!length--)
        return NULL;
   123f8:	00000513          	li	a0,0
        return (void *) src;
      src++;
    }

  return NULL;
}
   123fc:	00008067          	ret
   12400:	0ff5f593          	andi	a1,a1,255
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
   12404:	00859713          	slli	a4,a1,0x8
   12408:	00b765b3          	or	a1,a4,a1
      mask = mask << 16 | mask;
   1240c:	01059713          	slli	a4,a1,0x10
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
        {
          if (DETECTCHAR (*asrc, mask))
   12410:	feff02b7          	lui	t0,0xfeff0
   12414:	808088b7          	lui	a7,0x80808
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
   12418:	00e5e5b3          	or	a1,a1,a4
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
        {
          if (DETECTCHAR (*asrc, mask))
   1241c:	eff28293          	addi	t0,t0,-257 # fefefeff <_gp+0xfefda5df>
   12420:	08088893          	addi	a7,a7,128 # 80808080 <_gp+0x807f2760>
   12424:	00052703          	lw	a4,0(a0)
   12428:	00e5c733          	xor	a4,a1,a4
   1242c:	00570633          	add	a2,a4,t0
   12430:	fff74713          	not	a4,a4
   12434:	00e67733          	and	a4,a2,a4
   12438:	01177733          	and	a4,a4,a7
   1243c:	f8071ae3          	bnez	a4,123d0 <memchr+0x48>
            break;
          length -= LBLOCKSIZE;
   12440:	ffc78793          	addi	a5,a5,-4
          asrc++;
   12444:	00450513          	addi	a0,a0,4
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
   12448:	fcf86ee3          	bltu	a6,a5,12424 <memchr+0x9c>
   1244c:	f81ff06f          	j	123cc <memchr+0x44>
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
   12450:	00060793          	mv	a5,a2
   12454:	f71ff06f          	j	123c4 <memchr+0x3c>
   12458:	00008067          	ret

0001245c <memcpy>:

  char* a = (char*)aa;
  const char* b = (const char*)bb;
  char* end = a+n;
  uintptr_t msk = sizeof(long)-1;
  if (__builtin_expect(((uintptr_t)a & msk) != ((uintptr_t)b & msk) || n < sizeof(long), 0))
   1245c:	00a5c7b3          	xor	a5,a1,a0
   12460:	0037f793          	andi	a5,a5,3
    *(a-1) = tt; \
  }

  char* a = (char*)aa;
  const char* b = (const char*)bb;
  char* end = a+n;
   12464:	00c508b3          	add	a7,a0,a2
  uintptr_t msk = sizeof(long)-1;
  if (__builtin_expect(((uintptr_t)a & msk) != ((uintptr_t)b & msk) || n < sizeof(long), 0))
   12468:	0e079263          	bnez	a5,1254c <memcpy+0xf0>
   1246c:	00300793          	li	a5,3
   12470:	0ec7fe63          	bleu	a2,a5,1256c <memcpy+0x110>
      while (a < end)
        BODY(a, b, char);
    return aa;
  }

  if (__builtin_expect(((uintptr_t)a & msk) != 0, 0))
   12474:	00357793          	andi	a5,a0,3
   12478:	04079a63          	bnez	a5,124cc <memcpy+0x70>
    while ((uintptr_t)a & msk)
      BODY(a, b, char);

  long* la = (long*)a;
  const long* lb = (const long*)b;
  long* lend = (long*)((uintptr_t)end & ~msk);
   1247c:	ffc8f813          	andi	a6,a7,-4

  if (__builtin_expect(la < lend-8, 0))
   12480:	fe080793          	addi	a5,a6,-32
   12484:	00050713          	mv	a4,a0
   12488:	06f56663          	bltu	a0,a5,124f4 <memcpy+0x98>
      *la++ = b7;
      *la++ = b8;
    }
  }

  while (la < lend)
   1248c:	00058693          	mv	a3,a1
   12490:	00070793          	mv	a5,a4
   12494:	03077863          	bleu	a6,a4,124c4 <memcpy+0x68>
    BODY(la, lb, long);
   12498:	0006a603          	lw	a2,0(a3)
   1249c:	00478793          	addi	a5,a5,4
   124a0:	00468693          	addi	a3,a3,4
   124a4:	fec7ae23          	sw	a2,-4(a5)
      *la++ = b7;
      *la++ = b8;
    }
  }

  while (la < lend)
   124a8:	ff07e8e3          	bltu	a5,a6,12498 <memcpy+0x3c>
   124ac:	fff74793          	not	a5,a4
   124b0:	01078833          	add	a6,a5,a6
   124b4:	ffc87813          	andi	a6,a6,-4
   124b8:	00480813          	addi	a6,a6,4
   124bc:	01070733          	add	a4,a4,a6
   124c0:	010585b3          	add	a1,a1,a6
    BODY(la, lb, long);

  a = (char*)la;
  b = (const char*)lb;
  if (__builtin_expect(a < end, 0))
   124c4:	09176863          	bltu	a4,a7,12554 <memcpy+0xf8>
    goto small;
  return aa;
}
   124c8:	00008067          	ret
   124cc:	00050713          	mv	a4,a0
    return aa;
  }

  if (__builtin_expect(((uintptr_t)a & msk) != 0, 0))
    while ((uintptr_t)a & msk)
      BODY(a, b, char);
   124d0:	0005c683          	lbu	a3,0(a1)
   124d4:	00170713          	addi	a4,a4,1
        BODY(a, b, char);
    return aa;
  }

  if (__builtin_expect(((uintptr_t)a & msk) != 0, 0))
    while ((uintptr_t)a & msk)
   124d8:	00377793          	andi	a5,a4,3
      BODY(a, b, char);
   124dc:	00158593          	addi	a1,a1,1
   124e0:	fed70fa3          	sb	a3,-1(a4)
        BODY(a, b, char);
    return aa;
  }

  if (__builtin_expect(((uintptr_t)a & msk) != 0, 0))
    while ((uintptr_t)a & msk)
   124e4:	fe0796e3          	bnez	a5,124d0 <memcpy+0x74>
      BODY(a, b, char);

  long* la = (long*)a;
  const long* lb = (const long*)b;
  long* lend = (long*)((uintptr_t)end & ~msk);
   124e8:	ffc8f813          	andi	a6,a7,-4

  if (__builtin_expect(la < lend-8, 0))
   124ec:	fe080793          	addi	a5,a6,-32
   124f0:	f8f77ee3          	bleu	a5,a4,1248c <memcpy+0x30>
  {
    while (la < lend-8)
    {
      long b0 = *lb++;
   124f4:	0005af83          	lw	t6,0(a1)
      long b1 = *lb++;
   124f8:	0045af03          	lw	t5,4(a1)
      long b2 = *lb++;
   124fc:	0085ae83          	lw	t4,8(a1)
      long b3 = *lb++;
   12500:	00c5ae03          	lw	t3,12(a1)
      long b4 = *lb++;
   12504:	0105a383          	lw	t2,16(a1)
      long b5 = *lb++;
   12508:	0145a303          	lw	t1,20(a1)
      long b6 = *lb++;
   1250c:	0185a283          	lw	t0,24(a1)
      long b7 = *lb++;
   12510:	01c5a603          	lw	a2,28(a1)
   12514:	02458593          	addi	a1,a1,36
   12518:	02470713          	addi	a4,a4,36
      long b8 = *lb++;
   1251c:	ffc5a683          	lw	a3,-4(a1)
      *la++ = b0;
   12520:	fdf72e23          	sw	t6,-36(a4)
      *la++ = b1;
   12524:	ffe72023          	sw	t5,-32(a4)
      *la++ = b2;
   12528:	ffd72223          	sw	t4,-28(a4)
      *la++ = b3;
   1252c:	ffc72423          	sw	t3,-24(a4)
      *la++ = b4;
   12530:	fe772623          	sw	t2,-20(a4)
      *la++ = b5;
   12534:	fe672823          	sw	t1,-16(a4)
      *la++ = b6;
   12538:	fe572a23          	sw	t0,-12(a4)
      *la++ = b7;
   1253c:	fec72c23          	sw	a2,-8(a4)
      *la++ = b8;
   12540:	fed72e23          	sw	a3,-4(a4)
  const long* lb = (const long*)b;
  long* lend = (long*)((uintptr_t)end & ~msk);

  if (__builtin_expect(la < lend-8, 0))
  {
    while (la < lend-8)
   12544:	faf768e3          	bltu	a4,a5,124f4 <memcpy+0x98>
   12548:	f45ff06f          	j	1248c <memcpy+0x30>
  char* end = a+n;
  uintptr_t msk = sizeof(long)-1;
  if (__builtin_expect(((uintptr_t)a & msk) != ((uintptr_t)b & msk) || n < sizeof(long), 0))
  {
small:
    if (__builtin_expect(a < end, 1))
   1254c:	00050713          	mv	a4,a0
   12550:	03157463          	bleu	a7,a0,12578 <memcpy+0x11c>
      while (a < end)
        BODY(a, b, char);
   12554:	0005c783          	lbu	a5,0(a1)
   12558:	00170713          	addi	a4,a4,1
   1255c:	00158593          	addi	a1,a1,1
   12560:	fef70fa3          	sb	a5,-1(a4)
  uintptr_t msk = sizeof(long)-1;
  if (__builtin_expect(((uintptr_t)a & msk) != ((uintptr_t)b & msk) || n < sizeof(long), 0))
  {
small:
    if (__builtin_expect(a < end, 1))
      while (a < end)
   12564:	ff1768e3          	bltu	a4,a7,12554 <memcpy+0xf8>
   12568:	00008067          	ret
   1256c:	00050713          	mv	a4,a0
  char* end = a+n;
  uintptr_t msk = sizeof(long)-1;
  if (__builtin_expect(((uintptr_t)a & msk) != ((uintptr_t)b & msk) || n < sizeof(long), 0))
  {
small:
    if (__builtin_expect(a < end, 1))
   12570:	ff1562e3          	bltu	a0,a7,12554 <memcpy+0xf8>
   12574:	f55ff06f          	j	124c8 <memcpy+0x6c>
   12578:	00008067          	ret

0001257c <memmove>:
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
   1257c:	02a5f863          	bleu	a0,a1,125ac <memmove+0x30>
   12580:	00c58733          	add	a4,a1,a2
   12584:	02e57463          	bleu	a4,a0,125ac <memmove+0x30>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
   12588:	00c507b3          	add	a5,a0,a2
   1258c:	40c785b3          	sub	a1,a5,a2
      while (length--)
   12590:	0e060263          	beqz	a2,12674 <memmove+0xf8>
	{
	  *--dst = *--src;
   12594:	fff70713          	addi	a4,a4,-1
   12598:	00074683          	lbu	a3,0(a4)
   1259c:	fff78793          	addi	a5,a5,-1
   125a0:	00d78023          	sb	a3,0(a5)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
   125a4:	fef598e3          	bne	a1,a5,12594 <memmove+0x18>
   125a8:	00008067          	ret
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
   125ac:	00f00893          	li	a7,15
   125b0:	0cc8f463          	bleu	a2,a7,12678 <memmove+0xfc>
   125b4:	00a5e7b3          	or	a5,a1,a0
   125b8:	0037f793          	andi	a5,a5,3
   125bc:	0c079463          	bnez	a5,12684 <memmove+0x108>
   125c0:	00058713          	mv	a4,a1
   125c4:	00050793          	mv	a5,a0
   125c8:	00060693          	mv	a3,a2
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
            {
              *aligned_dst++ = *aligned_src++;
   125cc:	00072803          	lw	a6,0(a4)
   125d0:	01078793          	addi	a5,a5,16
   125d4:	01070713          	addi	a4,a4,16
   125d8:	ff07a823          	sw	a6,-16(a5)
              *aligned_dst++ = *aligned_src++;
   125dc:	ff472803          	lw	a6,-12(a4)
              *aligned_dst++ = *aligned_src++;
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
   125e0:	ff068693          	addi	a3,a3,-16

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
            {
              *aligned_dst++ = *aligned_src++;
              *aligned_dst++ = *aligned_src++;
   125e4:	ff07aa23          	sw	a6,-12(a5)
              *aligned_dst++ = *aligned_src++;
   125e8:	ff872803          	lw	a6,-8(a4)
   125ec:	ff07ac23          	sw	a6,-8(a5)
              *aligned_dst++ = *aligned_src++;
   125f0:	ffc72803          	lw	a6,-4(a4)
   125f4:	ff07ae23          	sw	a6,-4(a5)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
   125f8:	fcd8eae3          	bltu	a7,a3,125cc <memmove+0x50>
   125fc:	ff060713          	addi	a4,a2,-16
   12600:	ff077713          	andi	a4,a4,-16
   12604:	01070713          	addi	a4,a4,16
   12608:	00f67313          	andi	t1,a2,15
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
   1260c:	00300293          	li	t0,3
   12610:	00e507b3          	add	a5,a0,a4
   12614:	00e585b3          	add	a1,a1,a4
   12618:	0662fc63          	bleu	t1,t0,12690 <memmove+0x114>
   1261c:	00058813          	mv	a6,a1
   12620:	00078693          	mv	a3,a5
   12624:	00030713          	mv	a4,t1
            {
              *aligned_dst++ = *aligned_src++;
   12628:	00480813          	addi	a6,a6,4
   1262c:	ffc82883          	lw	a7,-4(a6)
   12630:	00468693          	addi	a3,a3,4
              length -= LITTLEBLOCKSIZE;
   12634:	ffc70713          	addi	a4,a4,-4
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
            {
              *aligned_dst++ = *aligned_src++;
   12638:	ff16ae23          	sw	a7,-4(a3)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
   1263c:	fee2e6e3          	bltu	t0,a4,12628 <memmove+0xac>
   12640:	ffc30713          	addi	a4,t1,-4
   12644:	ffc77713          	andi	a4,a4,-4
   12648:	00470713          	addi	a4,a4,4
   1264c:	00367613          	andi	a2,a2,3
   12650:	00e787b3          	add	a5,a5,a4
   12654:	00e585b3          	add	a1,a1,a4
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
   12658:	02060a63          	beqz	a2,1268c <memmove+0x110>
   1265c:	00c78633          	add	a2,a5,a2
        {
          *dst++ = *src++;
   12660:	00158593          	addi	a1,a1,1
   12664:	fff5c703          	lbu	a4,-1(a1)
   12668:	00178793          	addi	a5,a5,1
   1266c:	fee78fa3          	sb	a4,-1(a5)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
   12670:	fec798e3          	bne	a5,a2,12660 <memmove+0xe4>
        }
    }

  return dst_void;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   12674:	00008067          	ret
   12678:	00050793          	mv	a5,a0
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
   1267c:	fe0610e3          	bnez	a2,1265c <memmove+0xe0>
   12680:	00c0006f          	j	1268c <memmove+0x110>
   12684:	00050793          	mv	a5,a0
   12688:	fd5ff06f          	j	1265c <memmove+0xe0>
   1268c:	00008067          	ret
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
   12690:	00030613          	mv	a2,t1
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
   12694:	fc0614e3          	bnez	a2,1265c <memmove+0xe0>
   12698:	ff5ff06f          	j	1268c <memmove+0x110>

0001269c <__malloc_lock>:
   1269c:	00008067          	ret

000126a0 <__malloc_unlock>:
}

void
__malloc_unlock (ptr)
     struct _reent *ptr;
{
   126a0:	00008067          	ret

000126a4 <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
   126a4:	fd010113          	addi	sp,sp,-48
   126a8:	01312e23          	sw	s3,28(sp)
   126ac:	02112623          	sw	ra,44(sp)
   126b0:	02812423          	sw	s0,40(sp)
   126b4:	02912223          	sw	s1,36(sp)
   126b8:	03212023          	sw	s2,32(sp)
   126bc:	01412c23          	sw	s4,24(sp)
   126c0:	01512a23          	sw	s5,20(sp)
   126c4:	01612823          	sw	s6,16(sp)
   126c8:	01712623          	sw	s7,12(sp)
   126cc:	01812423          	sw	s8,8(sp)
   126d0:	01912223          	sw	s9,4(sp)
   126d4:	00060993          	mv	s3,a2
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
   126d8:	1c058863          	beqz	a1,128a8 <_realloc_r+0x204>
   126dc:	00058a13          	mv	s4,a1
   126e0:	00050493          	mv	s1,a0

  MALLOC_LOCK;
   126e4:	fb9ff0ef          	jal	1269c <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
  newsize = oldsize = chunksize(oldp);
   126e8:	ffca2783          	lw	a5,-4(s4)


  nb = request2size(bytes);
   126ec:	00b98713          	addi	a4,s3,11
   126f0:	01600693          	li	a3,22
  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);

  MALLOC_LOCK;

  newp    = oldp    = mem2chunk(oldmem);
   126f4:	ff8a0b13          	addi	s6,s4,-8
  newsize = oldsize = chunksize(oldp);
   126f8:	ffc7fa93          	andi	s5,a5,-4


  nb = request2size(bytes);
   126fc:	0ce6f263          	bleu	a4,a3,127c0 <_realloc_r+0x11c>
   12700:	ff877913          	andi	s2,a4,-8

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
   12704:	00090713          	mv	a4,s2
   12708:	14094c63          	bltz	s2,12860 <_realloc_r+0x1bc>
   1270c:	15396a63          	bltu	s2,s3,12860 <_realloc_r+0x1bc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
   12710:	0aeade63          	ble	a4,s5,127cc <_realloc_r+0x128>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
    if (next == top || !inuse(next)) 
   12714:	00015c37          	lui	s8,0x15
   12718:	d10c0c13          	addi	s8,s8,-752 # 14d10 <__malloc_av_>
   1271c:	008c2683          	lw	a3,8(s8)
  if ((long)(oldsize) < (long)(nb))  
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
   12720:	015b0533          	add	a0,s6,s5
    if (next == top || !inuse(next)) 
   12724:	30d50263          	beq	a0,a3,12a28 <_realloc_r+0x384>
   12728:	00452683          	lw	a3,4(a0)
   1272c:	ffe6f613          	andi	a2,a3,-2
   12730:	00c50633          	add	a2,a0,a2
   12734:	00462603          	lw	a2,4(a2)
   12738:	00167613          	andi	a2,a2,1
   1273c:	0e060e63          	beqz	a2,12838 <_realloc_r+0x194>
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
   12740:	0017f793          	andi	a5,a5,1
   12744:	26078463          	beqz	a5,129ac <_realloc_r+0x308>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
   12748:	00098593          	mv	a1,s3
   1274c:	00048513          	mv	a0,s1
   12750:	cc0ff0ef          	jal	11c10 <_malloc_r>
   12754:	00050413          	mv	s0,a0

    if (newmem == 0)  /* propagate failure */
   12758:	4a050463          	beqz	a0,12c00 <_realloc_r+0x55c>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
   1275c:	ffca2783          	lw	a5,-4(s4)
   12760:	ff850693          	addi	a3,a0,-8
   12764:	ffe7f713          	andi	a4,a5,-2
   12768:	00eb0733          	add	a4,s6,a4
   1276c:	42e68463          	beq	a3,a4,12b94 <_realloc_r+0x4f0>
      newp = oldp;
      goto split;
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   12770:	ffca8613          	addi	a2,s5,-4
   12774:	02400793          	li	a5,36
   12778:	3cc7ea63          	bltu	a5,a2,12b4c <_realloc_r+0x4a8>
   1277c:	01300713          	li	a4,19
   12780:	36c76a63          	bltu	a4,a2,12af4 <_realloc_r+0x450>
   12784:	00050793          	mv	a5,a0
   12788:	000a0713          	mv	a4,s4
   1278c:	00072683          	lw	a3,0(a4)
   12790:	00d7a023          	sw	a3,0(a5)
   12794:	00472683          	lw	a3,4(a4)
   12798:	00d7a223          	sw	a3,4(a5)
   1279c:	00872703          	lw	a4,8(a4)
   127a0:	00e7a423          	sw	a4,8(a5)
    fREe(RCALL oldmem);
   127a4:	000a0593          	mv	a1,s4
   127a8:	00048513          	mv	a0,s1
   127ac:	555000ef          	jal	13500 <_free_r>
    MALLOC_UNLOCK;
   127b0:	00048513          	mv	a0,s1
   127b4:	eedff0ef          	jal	126a0 <__malloc_unlock>
    return newmem;
   127b8:	00040513          	mv	a0,s0
   127bc:	0480006f          	j	12804 <_realloc_r+0x160>


  nb = request2size(bytes);

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
   127c0:	01000713          	li	a4,16

  newp    = oldp    = mem2chunk(oldmem);
  newsize = oldsize = chunksize(oldp);


  nb = request2size(bytes);
   127c4:	00070913          	mv	s2,a4
   127c8:	f45ff06f          	j	1270c <_realloc_r+0x68>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
   127cc:	000a0993          	mv	s3,s4
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
   127d0:	412a86b3          	sub	a3,s5,s2

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
   127d4:	00f00713          	li	a4,15
   127d8:	08d76c63          	bltu	a4,a3,12870 <_realloc_r+0x1cc>
    set_inuse_bit_at_offset(remainder, remainder_size);
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
  }
  else
  {
    set_head_size(newp, newsize);
   127dc:	0017f793          	andi	a5,a5,1
   127e0:	0157e7b3          	or	a5,a5,s5
   127e4:	00fb2223          	sw	a5,4(s6) # 80000004 <_gp+0x7ffea6e4>
    set_inuse_bit_at_offset(newp, newsize);
   127e8:	015b0633          	add	a2,s6,s5
   127ec:	00462783          	lw	a5,4(a2)
   127f0:	0017e793          	ori	a5,a5,1
   127f4:	00f62223          	sw	a5,4(a2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
   127f8:	00048513          	mv	a0,s1
   127fc:	ea5ff0ef          	jal	126a0 <__malloc_unlock>
  return chunk2mem(newp);
   12800:	00098513          	mv	a0,s3

#endif /* MALLOC_PROVIDED */
}
   12804:	02c12083          	lw	ra,44(sp)
   12808:	02812403          	lw	s0,40(sp)
   1280c:	02412483          	lw	s1,36(sp)
   12810:	02012903          	lw	s2,32(sp)
   12814:	01c12983          	lw	s3,28(sp)
   12818:	01812a03          	lw	s4,24(sp)
   1281c:	01412a83          	lw	s5,20(sp)
   12820:	01012b03          	lw	s6,16(sp)
   12824:	00c12b83          	lw	s7,12(sp)
   12828:	00812c03          	lw	s8,8(sp)
   1282c:	00412c83          	lw	s9,4(sp)
   12830:	03010113          	addi	sp,sp,48
   12834:	00008067          	ret
          return chunk2mem(oldp);
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
   12838:	ffc6f693          	andi	a3,a3,-4
   1283c:	015686b3          	add	a3,a3,s5
   12840:	0ae6c063          	blt	a3,a4,128e0 <_realloc_r+0x23c>
      { 
        unlink(next, bck, fwd);
   12844:	00c52703          	lw	a4,12(a0)
   12848:	00852603          	lw	a2,8(a0)
        newsize  += nextsize;
        goto split;
   1284c:	000a0993          	mv	s3,s4

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
      { 
        unlink(next, bck, fwd);
        newsize  += nextsize;
   12850:	00068a93          	mv	s5,a3
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
      { 
        unlink(next, bck, fwd);
   12854:	00e62623          	sw	a4,12(a2)
   12858:	00c72423          	sw	a2,8(a4)
        newsize  += nextsize;
        goto split;
   1285c:	f75ff06f          	j	127d0 <_realloc_r+0x12c>
  nb = request2size(bytes);

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
  {
    RERRNO = ENOMEM;
   12860:	00c00793          	li	a5,12
   12864:	00f4a023          	sw	a5,0(s1)
    return 0;
   12868:	00000513          	li	a0,0
   1286c:	f99ff06f          	j	12804 <_realloc_r+0x160>
  remainder_size = long_sub_size_t(newsize, nb);

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  {
    remainder = chunk_at_offset(newp, nb);
    set_head_size(newp, nb);
   12870:	0017f713          	andi	a4,a5,1

  remainder_size = long_sub_size_t(newsize, nb);

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  {
    remainder = chunk_at_offset(newp, nb);
   12874:	012b05b3          	add	a1,s6,s2
    set_head_size(newp, nb);
    set_head(remainder, remainder_size | PREV_INUSE);
   12878:	0016e793          	ori	a5,a3,1
  remainder_size = long_sub_size_t(newsize, nb);

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  {
    remainder = chunk_at_offset(newp, nb);
    set_head_size(newp, nb);
   1287c:	01276733          	or	a4,a4,s2
   12880:	00eb2223          	sw	a4,4(s6)
    set_head(remainder, remainder_size | PREV_INUSE);
    set_inuse_bit_at_offset(remainder, remainder_size);
   12884:	00d586b3          	add	a3,a1,a3

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  {
    remainder = chunk_at_offset(newp, nb);
    set_head_size(newp, nb);
    set_head(remainder, remainder_size | PREV_INUSE);
   12888:	00f5a223          	sw	a5,4(a1)
    set_inuse_bit_at_offset(remainder, remainder_size);
   1288c:	0046a783          	lw	a5,4(a3)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
   12890:	00858593          	addi	a1,a1,8
   12894:	00048513          	mv	a0,s1
  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  {
    remainder = chunk_at_offset(newp, nb);
    set_head_size(newp, nb);
    set_head(remainder, remainder_size | PREV_INUSE);
    set_inuse_bit_at_offset(remainder, remainder_size);
   12898:	0017e793          	ori	a5,a5,1
   1289c:	00f6a223          	sw	a5,4(a3)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
   128a0:	461000ef          	jal	13500 <_free_r>
   128a4:	f55ff06f          	j	127f8 <_realloc_r+0x154>
  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
  return chunk2mem(newp);

#endif /* MALLOC_PROVIDED */
}
   128a8:	02c12083          	lw	ra,44(sp)
   128ac:	02812403          	lw	s0,40(sp)
   128b0:	02412483          	lw	s1,36(sp)
   128b4:	02012903          	lw	s2,32(sp)
   128b8:	01c12983          	lw	s3,28(sp)
   128bc:	01812a03          	lw	s4,24(sp)
   128c0:	01412a83          	lw	s5,20(sp)
   128c4:	01012b03          	lw	s6,16(sp)
   128c8:	00c12b83          	lw	s7,12(sp)
   128cc:	00812c03          	lw	s8,8(sp)
   128d0:	00412c83          	lw	s9,4(sp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
   128d4:	00060593          	mv	a1,a2
  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
  return chunk2mem(newp);

#endif /* MALLOC_PROVIDED */
}
   128d8:	03010113          	addi	sp,sp,48
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
   128dc:	b34ff06f          	j	11c10 <_malloc_r>
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
   128e0:	0017f793          	andi	a5,a5,1
   128e4:	e60792e3          	bnez	a5,12748 <_realloc_r+0xa4>
    {
      prev = prev_chunk(oldp);
   128e8:	ff8a2b83          	lw	s7,-8(s4)
   128ec:	417b0bb3          	sub	s7,s6,s7
      prevsize = chunksize(prev);
   128f0:	004ba783          	lw	a5,4(s7)
   128f4:	ffc7f793          	andi	a5,a5,-4
            return newmem;
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
   128f8:	00f68433          	add	s0,a3,a5
   128fc:	0ce44063          	blt	s0,a4,129bc <_realloc_r+0x318>
        {
          unlink(next, bck, fwd);
   12900:	00c52783          	lw	a5,12(a0)
   12904:	00852703          	lw	a4,8(a0)
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   12908:	ffca8613          	addi	a2,s5,-4
        {
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
   1290c:	008b8993          	addi	s3,s7,8
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
        {
          unlink(next, bck, fwd);
   12910:	00f72623          	sw	a5,12(a4)
   12914:	00e7a423          	sw	a4,8(a5)
          unlink(prev, bck, fwd);
   12918:	008ba703          	lw	a4,8(s7)
   1291c:	00cba783          	lw	a5,12(s7)
   12920:	00f72623          	sw	a5,12(a4)
   12924:	00e7a423          	sw	a4,8(a5)
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   12928:	02400793          	li	a5,36
   1292c:	22c7e663          	bltu	a5,a2,12b58 <_realloc_r+0x4b4>
   12930:	01300713          	li	a4,19
   12934:	00098793          	mv	a5,s3
   12938:	04c77663          	bleu	a2,a4,12984 <_realloc_r+0x2e0>
   1293c:	000a2783          	lw	a5,0(s4)
   12940:	00fba423          	sw	a5,8(s7)
   12944:	004a2783          	lw	a5,4(s4)
   12948:	00fba623          	sw	a5,12(s7)
   1294c:	01b00793          	li	a5,27
   12950:	24c7fc63          	bleu	a2,a5,12ba8 <_realloc_r+0x504>
   12954:	008a2783          	lw	a5,8(s4)
   12958:	00fba823          	sw	a5,16(s7)
   1295c:	00ca2783          	lw	a5,12(s4)
   12960:	00fbaa23          	sw	a5,20(s7)
   12964:	02400793          	li	a5,36
   12968:	0af61a63          	bne	a2,a5,12a1c <_realloc_r+0x378>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   1296c:	010a2703          	lw	a4,16(s4)
   12970:	020b8793          	addi	a5,s7,32
   12974:	018a0a13          	addi	s4,s4,24
   12978:	00ebac23          	sw	a4,24(s7)
   1297c:	ffca2703          	lw	a4,-4(s4)
   12980:	00ebae23          	sw	a4,28(s7)
   12984:	000a2703          	lw	a4,0(s4)
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
   12988:	00040a93          	mv	s5,s0
   1298c:	000b8b13          	mv	s6,s7
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   12990:	00e7a023          	sw	a4,0(a5)
   12994:	004a2703          	lw	a4,4(s4)
   12998:	00e7a223          	sw	a4,4(a5)
   1299c:	008a2703          	lw	a4,8(s4)
   129a0:	00e7a423          	sw	a4,8(a5)
   129a4:	004ba783          	lw	a5,4(s7)
   129a8:	e29ff06f          	j	127d0 <_realloc_r+0x12c>

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
    {
      prev = prev_chunk(oldp);
   129ac:	ff8a2b83          	lw	s7,-8(s4)
   129b0:	417b0bb3          	sub	s7,s6,s7
      prevsize = chunksize(prev);
   129b4:	004ba783          	lw	a5,4(s7)
   129b8:	ffc7f793          	andi	a5,a5,-4
          goto split;
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
   129bc:	00fa8433          	add	s0,s5,a5
   129c0:	d8e444e3          	blt	s0,a4,12748 <_realloc_r+0xa4>
      {
        unlink(prev, bck, fwd);
   129c4:	00cba783          	lw	a5,12(s7)
   129c8:	008ba703          	lw	a4,8(s7)
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   129cc:	ffca8613          	addi	a2,s5,-4
   129d0:	02400693          	li	a3,36
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
      {
        unlink(prev, bck, fwd);
   129d4:	00f72623          	sw	a5,12(a4)
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
   129d8:	008b8993          	addi	s3,s7,8
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
      {
        unlink(prev, bck, fwd);
   129dc:	00e7a423          	sw	a4,8(a5)
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   129e0:	16c6ec63          	bltu	a3,a2,12b58 <_realloc_r+0x4b4>
   129e4:	01300713          	li	a4,19
   129e8:	00098793          	mv	a5,s3
   129ec:	f8c77ce3          	bleu	a2,a4,12984 <_realloc_r+0x2e0>
   129f0:	000a2783          	lw	a5,0(s4)
   129f4:	00fba423          	sw	a5,8(s7)
   129f8:	004a2783          	lw	a5,4(s4)
   129fc:	00fba623          	sw	a5,12(s7)
   12a00:	01b00793          	li	a5,27
   12a04:	1ac7f263          	bleu	a2,a5,12ba8 <_realloc_r+0x504>
   12a08:	008a2783          	lw	a5,8(s4)
   12a0c:	00fba823          	sw	a5,16(s7)
   12a10:	00ca2783          	lw	a5,12(s4)
   12a14:	00fbaa23          	sw	a5,20(s7)
   12a18:	f4d60ae3          	beq	a2,a3,1296c <_realloc_r+0x2c8>
   12a1c:	018b8793          	addi	a5,s7,24
   12a20:	010a0a13          	addi	s4,s4,16
   12a24:	f61ff06f          	j	12984 <_realloc_r+0x2e0>
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
   12a28:	00452683          	lw	a3,4(a0)
   12a2c:	01090613          	addi	a2,s2,16
   12a30:	ffc6f693          	andi	a3,a3,-4
   12a34:	015686b3          	add	a3,a3,s5
   12a38:	0ec6d063          	ble	a2,a3,12b18 <_realloc_r+0x474>
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
   12a3c:	0017f793          	andi	a5,a5,1
   12a40:	d00794e3          	bnez	a5,12748 <_realloc_r+0xa4>
    {
      prev = prev_chunk(oldp);
   12a44:	ff8a2b83          	lw	s7,-8(s4)
   12a48:	417b0bb3          	sub	s7,s6,s7
      prevsize = chunksize(prev);
   12a4c:	004ba783          	lw	a5,4(s7)
   12a50:	ffc7f793          	andi	a5,a5,-4
      if (next != 0)
      {
        /* into top */
        if (next == top)
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
   12a54:	00d78cb3          	add	s9,a5,a3
   12a58:	f6ccc2e3          	blt	s9,a2,129bc <_realloc_r+0x318>
          {
            unlink(prev, bck, fwd);
   12a5c:	00cba783          	lw	a5,12(s7)
   12a60:	008ba703          	lw	a4,8(s7)
            newp = prev;
            newsize += prevsize + nextsize;
            newmem = chunk2mem(newp);
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   12a64:	ffca8613          	addi	a2,s5,-4
   12a68:	02400693          	li	a3,36
        /* into top */
        if (next == top)
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
          {
            unlink(prev, bck, fwd);
   12a6c:	00f72623          	sw	a5,12(a4)
            newp = prev;
            newsize += prevsize + nextsize;
            newmem = chunk2mem(newp);
   12a70:	008b8413          	addi	s0,s7,8
        /* into top */
        if (next == top)
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
          {
            unlink(prev, bck, fwd);
   12a74:	00e7a423          	sw	a4,8(a5)
            newp = prev;
            newsize += prevsize + nextsize;
            newmem = chunk2mem(newp);
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   12a78:	14c6ec63          	bltu	a3,a2,12bd0 <_realloc_r+0x52c>
   12a7c:	01300713          	li	a4,19
   12a80:	00040793          	mv	a5,s0
   12a84:	02c77263          	bleu	a2,a4,12aa8 <_realloc_r+0x404>
   12a88:	000a2783          	lw	a5,0(s4)
   12a8c:	00fba423          	sw	a5,8(s7)
   12a90:	004a2783          	lw	a5,4(s4)
   12a94:	00fba623          	sw	a5,12(s7)
   12a98:	01b00793          	li	a5,27
   12a9c:	14c7e263          	bltu	a5,a2,12be0 <_realloc_r+0x53c>
   12aa0:	010b8793          	addi	a5,s7,16
   12aa4:	008a0a13          	addi	s4,s4,8
   12aa8:	000a2703          	lw	a4,0(s4)
   12aac:	00e7a023          	sw	a4,0(a5)
   12ab0:	004a2703          	lw	a4,4(s4)
   12ab4:	00e7a223          	sw	a4,4(a5)
   12ab8:	008a2703          	lw	a4,8(s4)
   12abc:	00e7a423          	sw	a4,8(a5)
            top = chunk_at_offset(newp, nb);
            set_head(top, (newsize - nb) | PREV_INUSE);
   12ac0:	412c86b3          	sub	a3,s9,s2
            unlink(prev, bck, fwd);
            newp = prev;
            newsize += prevsize + nextsize;
            newmem = chunk2mem(newp);
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
            top = chunk_at_offset(newp, nb);
   12ac4:	012b87b3          	add	a5,s7,s2
            set_head(top, (newsize - nb) | PREV_INUSE);
   12ac8:	0016e693          	ori	a3,a3,1
            unlink(prev, bck, fwd);
            newp = prev;
            newsize += prevsize + nextsize;
            newmem = chunk2mem(newp);
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
            top = chunk_at_offset(newp, nb);
   12acc:	00fc2423          	sw	a5,8(s8)
            set_head(top, (newsize - nb) | PREV_INUSE);
   12ad0:	00d7a223          	sw	a3,4(a5)
            set_head_size(newp, nb);
   12ad4:	004ba703          	lw	a4,4(s7)
	    MALLOC_UNLOCK;
   12ad8:	00048513          	mv	a0,s1
            newsize += prevsize + nextsize;
            newmem = chunk2mem(newp);
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
            top = chunk_at_offset(newp, nb);
            set_head(top, (newsize - nb) | PREV_INUSE);
            set_head_size(newp, nb);
   12adc:	00177713          	andi	a4,a4,1
   12ae0:	01276733          	or	a4,a4,s2
   12ae4:	00eba223          	sw	a4,4(s7)
	    MALLOC_UNLOCK;
   12ae8:	bb9ff0ef          	jal	126a0 <__malloc_unlock>
            return newmem;
   12aec:	00040513          	mv	a0,s0
   12af0:	d15ff06f          	j	12804 <_realloc_r+0x160>
      newp = oldp;
      goto split;
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   12af4:	000a2703          	lw	a4,0(s4)
   12af8:	00e52023          	sw	a4,0(a0)
   12afc:	004a2703          	lw	a4,4(s4)
   12b00:	00e52223          	sw	a4,4(a0)
   12b04:	01b00713          	li	a4,27
   12b08:	06c76663          	bltu	a4,a2,12b74 <_realloc_r+0x4d0>
   12b0c:	00850793          	addi	a5,a0,8
   12b10:	008a0713          	addi	a4,s4,8
   12b14:	c79ff06f          	j	1278c <_realloc_r+0xe8>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
        {
          newsize += nextsize;
          top = chunk_at_offset(oldp, nb);
          set_head(top, (newsize - nb) | PREV_INUSE);
   12b18:	412686b3          	sub	a3,a3,s2
      if (next == top)
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
        {
          newsize += nextsize;
          top = chunk_at_offset(oldp, nb);
   12b1c:	012b0b33          	add	s6,s6,s2
          set_head(top, (newsize - nb) | PREV_INUSE);
   12b20:	0016e693          	ori	a3,a3,1
      if (next == top)
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
        {
          newsize += nextsize;
          top = chunk_at_offset(oldp, nb);
   12b24:	016c2423          	sw	s6,8(s8)
          set_head(top, (newsize - nb) | PREV_INUSE);
   12b28:	00db2223          	sw	a3,4(s6)
          set_head_size(oldp, nb);
   12b2c:	ffca2703          	lw	a4,-4(s4)
	  MALLOC_UNLOCK;
   12b30:	00048513          	mv	a0,s1
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
        {
          newsize += nextsize;
          top = chunk_at_offset(oldp, nb);
          set_head(top, (newsize - nb) | PREV_INUSE);
          set_head_size(oldp, nb);
   12b34:	00177713          	andi	a4,a4,1
   12b38:	01276733          	or	a4,a4,s2
   12b3c:	feea2e23          	sw	a4,-4(s4)
	  MALLOC_UNLOCK;
   12b40:	b61ff0ef          	jal	126a0 <__malloc_unlock>
          return chunk2mem(oldp);
   12b44:	000a0513          	mv	a0,s4
   12b48:	cbdff06f          	j	12804 <_realloc_r+0x160>
      newp = oldp;
      goto split;
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   12b4c:	000a0593          	mv	a1,s4
   12b50:	a2dff0ef          	jal	1257c <memmove>
   12b54:	c51ff06f          	j	127a4 <_realloc_r+0x100>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   12b58:	000a0593          	mv	a1,s4
   12b5c:	00098513          	mv	a0,s3
   12b60:	a1dff0ef          	jal	1257c <memmove>
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
   12b64:	00040a93          	mv	s5,s0
   12b68:	004ba783          	lw	a5,4(s7)
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   12b6c:	000b8b13          	mv	s6,s7
   12b70:	c61ff06f          	j	127d0 <_realloc_r+0x12c>
      newp = oldp;
      goto split;
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   12b74:	008a2703          	lw	a4,8(s4)
   12b78:	00e52423          	sw	a4,8(a0)
   12b7c:	00ca2703          	lw	a4,12(s4)
   12b80:	00e52623          	sw	a4,12(a0)
   12b84:	02f60863          	beq	a2,a5,12bb4 <_realloc_r+0x510>
   12b88:	01050793          	addi	a5,a0,16
   12b8c:	010a0713          	addi	a4,s4,16
   12b90:	bfdff06f          	j	1278c <_realloc_r+0xe8>
    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
    {
      newsize += chunksize(newp);
   12b94:	ffc52703          	lw	a4,-4(a0)
      newp = oldp;
      goto split;
   12b98:	000a0993          	mv	s3,s4
    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
    {
      newsize += chunksize(newp);
   12b9c:	ffc77713          	andi	a4,a4,-4
   12ba0:	00ea8ab3          	add	s5,s5,a4
      newp = oldp;
      goto split;
   12ba4:	c2dff06f          	j	127d0 <_realloc_r+0x12c>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   12ba8:	010b8793          	addi	a5,s7,16
   12bac:	008a0a13          	addi	s4,s4,8
   12bb0:	dd5ff06f          	j	12984 <_realloc_r+0x2e0>
      newp = oldp;
      goto split;
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   12bb4:	010a2683          	lw	a3,16(s4)
   12bb8:	01850793          	addi	a5,a0,24
   12bbc:	018a0713          	addi	a4,s4,24
   12bc0:	00d52823          	sw	a3,16(a0)
   12bc4:	014a2683          	lw	a3,20(s4)
   12bc8:	00d52a23          	sw	a3,20(a0)
   12bcc:	bc1ff06f          	j	1278c <_realloc_r+0xe8>
          {
            unlink(prev, bck, fwd);
            newp = prev;
            newsize += prevsize + nextsize;
            newmem = chunk2mem(newp);
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   12bd0:	000a0593          	mv	a1,s4
   12bd4:	00040513          	mv	a0,s0
   12bd8:	9a5ff0ef          	jal	1257c <memmove>
   12bdc:	ee5ff06f          	j	12ac0 <_realloc_r+0x41c>
   12be0:	008a2783          	lw	a5,8(s4)
   12be4:	00fba823          	sw	a5,16(s7)
   12be8:	00ca2783          	lw	a5,12(s4)
   12bec:	00fbaa23          	sw	a5,20(s7)
   12bf0:	02d60063          	beq	a2,a3,12c10 <_realloc_r+0x56c>
   12bf4:	018b8793          	addi	a5,s7,24
   12bf8:	010a0a13          	addi	s4,s4,16
   12bfc:	eadff06f          	j	12aa8 <_realloc_r+0x404>

    newmem = mALLOc (RCALL bytes);

    if (newmem == 0)  /* propagate failure */
    {
      MALLOC_UNLOCK;
   12c00:	00048513          	mv	a0,s1
   12c04:	a9dff0ef          	jal	126a0 <__malloc_unlock>
      return 0;
   12c08:	00000513          	li	a0,0
   12c0c:	bf9ff06f          	j	12804 <_realloc_r+0x160>
          {
            unlink(prev, bck, fwd);
            newp = prev;
            newsize += prevsize + nextsize;
            newmem = chunk2mem(newp);
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   12c10:	010a2703          	lw	a4,16(s4)
   12c14:	020b8793          	addi	a5,s7,32
   12c18:	018a0a13          	addi	s4,s4,24
   12c1c:	00ebac23          	sw	a4,24(s7)
   12c20:	ffca2703          	lw	a4,-4(s4)
   12c24:	00ebae23          	sw	a4,28(s7)
   12c28:	e81ff06f          	j	12aa8 <_realloc_r+0x404>

00012c2c <__swsetup_r>:
       struct _reent *ptr _AND
       register FILE * fp)
{
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
   12c2c:	8101a783          	lw	a5,-2032(gp) # 15130 <_impure_ptr>

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
   12c30:	ff010113          	addi	sp,sp,-16
   12c34:	00812423          	sw	s0,8(sp)
   12c38:	00912223          	sw	s1,4(sp)
   12c3c:	00112623          	sw	ra,12(sp)
   12c40:	00050493          	mv	s1,a0
   12c44:	00058413          	mv	s0,a1
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
   12c48:	00078663          	beqz	a5,12c54 <__swsetup_r+0x28>
   12c4c:	0387a703          	lw	a4,56(a5)
   12c50:	0c070c63          	beqz	a4,12d28 <__swsetup_r+0xfc>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
   12c54:	00c41703          	lh	a4,12(s0)
   12c58:	01071793          	slli	a5,a4,0x10
   12c5c:	0107d793          	srli	a5,a5,0x10
   12c60:	0087f693          	andi	a3,a5,8
   12c64:	04068263          	beqz	a3,12ca8 <__swsetup_r+0x7c>
   12c68:	01042683          	lw	a3,16(s0)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
   12c6c:	06068263          	beqz	a3,12cd0 <__swsetup_r+0xa4>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
    __smakebuf_r (ptr, fp);

  if (fp->_flags & __SLBF)
   12c70:	0017f713          	andi	a4,a5,1
   12c74:	08071063          	bnez	a4,12cf4 <__swsetup_r+0xc8>
       */
      fp->_w = 0;
      fp->_lbfsize = -fp->_bf._size;
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
   12c78:	0027f793          	andi	a5,a5,2
   12c7c:	00000713          	li	a4,0
   12c80:	00079463          	bnez	a5,12c88 <__swsetup_r+0x5c>
   12c84:	01442703          	lw	a4,20(s0)
   12c88:	00e42423          	sw	a4,8(s0)
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
      return EOF;
    }
  return 0;
   12c8c:	00000513          	li	a0,0
      fp->_lbfsize = -fp->_bf._size;
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;

  if (!fp->_bf._base && (fp->_flags & __SMBF))
   12c90:	06068e63          	beqz	a3,12d0c <__swsetup_r+0xe0>
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
      return EOF;
    }
  return 0;
}
   12c94:	00c12083          	lw	ra,12(sp)
   12c98:	00812403          	lw	s0,8(sp)
   12c9c:	00412483          	lw	s1,4(sp)
   12ca0:	01010113          	addi	sp,sp,16
   12ca4:	00008067          	ret
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
    {
      if ((fp->_flags & __SRW) == 0)
   12ca8:	0107f693          	andi	a3,a5,16
   12cac:	0a068e63          	beqz	a3,12d68 <__swsetup_r+0x13c>
        {
	  ptr->_errno = EBADF;
	  fp->_flags |= __SERR;
	  return EOF;
        }
      if (fp->_flags & __SRD)
   12cb0:	0047f793          	andi	a5,a5,4
   12cb4:	08079063          	bnez	a5,12d34 <__swsetup_r+0x108>
   12cb8:	01042683          	lw	a3,16(s0)
	    FREEUB (ptr, fp);
	  fp->_flags &= ~(__SRD | __SEOF);
	  fp->_r = 0;
	  fp->_p = fp->_bf._base;
	}
      fp->_flags |= __SWR;
   12cbc:	00876793          	ori	a5,a4,8
   12cc0:	00f41623          	sh	a5,12(s0)
   12cc4:	01079793          	slli	a5,a5,0x10
   12cc8:	0107d793          	srli	a5,a5,0x10
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
   12ccc:	fa0692e3          	bnez	a3,12c70 <__swsetup_r+0x44>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
   12cd0:	2807f713          	andi	a4,a5,640
   12cd4:	20000613          	li	a2,512
   12cd8:	f8c70ce3          	beq	a4,a2,12c70 <__swsetup_r+0x44>
    __smakebuf_r (ptr, fp);
   12cdc:	00040593          	mv	a1,s0
   12ce0:	00048513          	mv	a0,s1
   12ce4:	469000ef          	jal	1394c <__smakebuf_r>
   12ce8:	00c45783          	lhu	a5,12(s0)
   12cec:	01042683          	lw	a3,16(s0)
   12cf0:	f81ff06f          	j	12c70 <__swsetup_r+0x44>
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
      fp->_lbfsize = -fp->_bf._size;
   12cf4:	01442783          	lw	a5,20(s0)
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
   12cf8:	00042423          	sw	zero,8(s0)
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
      return EOF;
    }
  return 0;
   12cfc:	00000513          	li	a0,0
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
      fp->_lbfsize = -fp->_bf._size;
   12d00:	40f007b3          	neg	a5,a5
   12d04:	00f42c23          	sw	a5,24(s0)
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;

  if (!fp->_bf._base && (fp->_flags & __SMBF))
   12d08:	f80696e3          	bnez	a3,12c94 <__swsetup_r+0x68>
   12d0c:	00c41783          	lh	a5,12(s0)
   12d10:	0807f713          	andi	a4,a5,128
   12d14:	f80700e3          	beqz	a4,12c94 <__swsetup_r+0x68>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
   12d18:	0407e793          	ori	a5,a5,64
   12d1c:	00f41623          	sh	a5,12(s0)
      return EOF;
   12d20:	fff00513          	li	a0,-1
   12d24:	f71ff06f          	j	12c94 <__swsetup_r+0x68>
       struct _reent *ptr _AND
       register FILE * fp)
{
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
   12d28:	00078513          	mv	a0,a5
   12d2c:	694000ef          	jal	133c0 <__sinit>
   12d30:	f25ff06f          	j	12c54 <__swsetup_r+0x28>
	  return EOF;
        }
      if (fp->_flags & __SRD)
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
   12d34:	03042583          	lw	a1,48(s0)
   12d38:	00058e63          	beqz	a1,12d54 <__swsetup_r+0x128>
	    FREEUB (ptr, fp);
   12d3c:	04040793          	addi	a5,s0,64
   12d40:	00f58863          	beq	a1,a5,12d50 <__swsetup_r+0x124>
   12d44:	00048513          	mv	a0,s1
   12d48:	7b8000ef          	jal	13500 <_free_r>
   12d4c:	00c41703          	lh	a4,12(s0)
   12d50:	02042823          	sw	zero,48(s0)
	  fp->_flags &= ~(__SRD | __SEOF);
	  fp->_r = 0;
	  fp->_p = fp->_bf._base;
   12d54:	01042683          	lw	a3,16(s0)
      if (fp->_flags & __SRD)
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
	    FREEUB (ptr, fp);
	  fp->_flags &= ~(__SRD | __SEOF);
   12d58:	fdb77713          	andi	a4,a4,-37
	  fp->_r = 0;
   12d5c:	00042223          	sw	zero,4(s0)
	  fp->_p = fp->_bf._base;
   12d60:	00d42023          	sw	a3,0(s0)
   12d64:	f59ff06f          	j	12cbc <__swsetup_r+0x90>
  if ((fp->_flags & __SWR) == 0)
    {
      if ((fp->_flags & __SRW) == 0)
        {
	  ptr->_errno = EBADF;
	  fp->_flags |= __SERR;
   12d68:	04076713          	ori	a4,a4,64

  if ((fp->_flags & __SWR) == 0)
    {
      if ((fp->_flags & __SRW) == 0)
        {
	  ptr->_errno = EBADF;
   12d6c:	00900793          	li	a5,9
   12d70:	00f4a023          	sw	a5,0(s1)
	  fp->_flags |= __SERR;
	  return EOF;
   12d74:	fff00513          	li	a0,-1
  if ((fp->_flags & __SWR) == 0)
    {
      if ((fp->_flags & __SRW) == 0)
        {
	  ptr->_errno = EBADF;
	  fp->_flags |= __SERR;
   12d78:	00e41623          	sh	a4,12(s0)
	  return EOF;
   12d7c:	f19ff06f          	j	12c94 <__swsetup_r+0x68>

00012d80 <__sflush_r>:
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
   12d80:	00c59683          	lh	a3,12(a1)
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
   12d84:	fe010113          	addi	sp,sp,-32
   12d88:	00812c23          	sw	s0,24(sp)
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
  if ((flags & __SWR) == 0)
   12d8c:	01069713          	slli	a4,a3,0x10
   12d90:	01075713          	srli	a4,a4,0x10
   12d94:	00877793          	andi	a5,a4,8
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
   12d98:	01312623          	sw	s3,12(sp)
   12d9c:	00112e23          	sw	ra,28(sp)
   12da0:	00912a23          	sw	s1,20(sp)
   12da4:	01212823          	sw	s2,16(sp)
   12da8:	00058413          	mv	s0,a1
   12dac:	00050993          	mv	s3,a0
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
  if ((flags & __SWR) == 0)
   12db0:	10079a63          	bnez	a5,12ec4 <__sflush_r+0x144>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
   12db4:	000017b7          	lui	a5,0x1
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
   12db8:	0045a703          	lw	a4,4(a1)
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
   12dbc:	80078793          	addi	a5,a5,-2048 # 800 <_reset+0x600>
   12dc0:	00f6e7b3          	or	a5,a3,a5
   12dc4:	00f59623          	sh	a5,12(a1)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
   12dc8:	1ce05663          	blez	a4,12f94 <__sflush_r+0x214>
   12dcc:	02842803          	lw	a6,40(s0)
   12dd0:	0c080a63          	beqz	a6,12ea4 <__sflush_r+0x124>
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
	  ptr->_errno = 0;
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
   12dd4:	01079793          	slli	a5,a5,0x10
   12dd8:	0107d793          	srli	a5,a5,0x10
   12ddc:	01379693          	slli	a3,a5,0x13
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
   12de0:	0009a483          	lw	s1,0(s3)
	  ptr->_errno = 0;
   12de4:	0009a023          	sw	zero,0(s3)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
   12de8:	1a06dc63          	bgez	a3,12fa0 <__sflush_r+0x220>
	    curoff = fp->_offset;
   12dec:	05042603          	lw	a2,80(s0)
   12df0:	05442683          	lw	a3,84(s0)
		  else
		    fp->_flags |= __SERR;
		  return result;
		}
            }
          if (fp->_flags & __SRD)
   12df4:	0047f793          	andi	a5,a5,4
   12df8:	04078263          	beqz	a5,12e3c <__sflush_r+0xbc>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
   12dfc:	00442503          	lw	a0,4(s0)
              if (HASUB (fp))
   12e00:	03042703          	lw	a4,48(s0)
            }
          if (fp->_flags & __SRD)
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
   12e04:	40a607b3          	sub	a5,a2,a0
   12e08:	41f55513          	srai	a0,a0,0x1f
   12e0c:	00f635b3          	sltu	a1,a2,a5
   12e10:	40a686b3          	sub	a3,a3,a0
   12e14:	00078613          	mv	a2,a5
   12e18:	40b686b3          	sub	a3,a3,a1
              if (HASUB (fp))
   12e1c:	02070063          	beqz	a4,12e3c <__sflush_r+0xbc>
                curoff -= fp->_ur;
   12e20:	03c42503          	lw	a0,60(s0)
   12e24:	40a787b3          	sub	a5,a5,a0
   12e28:	41f55513          	srai	a0,a0,0x1f
   12e2c:	00f63733          	sltu	a4,a2,a5
   12e30:	40a686b3          	sub	a3,a3,a0
   12e34:	00078613          	mv	a2,a5
   12e38:	40e686b3          	sub	a3,a3,a4
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
   12e3c:	01c42583          	lw	a1,28(s0)
   12e40:	00000713          	li	a4,0
   12e44:	00098513          	mv	a0,s3
   12e48:	000800e7          	jalr	a6
	  if (curoff != -1 || ptr->_errno == 0
   12e4c:	fff00793          	li	a5,-1
   12e50:	0ef50063          	beq	a0,a5,12f30 <__sflush_r+0x1b0>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
   12e54:	00c45683          	lhu	a3,12(s0)
   12e58:	fffff7b7          	lui	a5,0xfffff
   12e5c:	7ff78793          	addi	a5,a5,2047 # fffff7ff <_gp+0xfffe9edf>
#endif
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
   12e60:	01042703          	lw	a4,16(s0)
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
   12e64:	00f6f7b3          	and	a5,a3,a5
   12e68:	01079793          	slli	a5,a5,0x10
   12e6c:	4107d793          	srai	a5,a5,0x10
#endif
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
   12e70:	00e42023          	sw	a4,0(s0)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
   12e74:	01379713          	slli	a4,a5,0x13
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
   12e78:	00f41623          	sh	a5,12(s0)
#endif
	      fp->_r = 0;
   12e7c:	00042223          	sw	zero,4(s0)
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
   12e80:	10074463          	bltz	a4,12f88 <__sflush_r+0x208>
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
   12e84:	03042583          	lw	a1,48(s0)
#endif
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
   12e88:	0099a023          	sw	s1,0(s3)
	      if (HASUB (fp))
   12e8c:	00058c63          	beqz	a1,12ea4 <__sflush_r+0x124>
		FREEUB (ptr, fp);
   12e90:	04040793          	addi	a5,s0,64
   12e94:	00f58663          	beq	a1,a5,12ea0 <__sflush_r+0x120>
   12e98:	00098513          	mv	a0,s3
   12e9c:	664000ef          	jal	13500 <_free_r>
   12ea0:	02042823          	sw	zero,48(s0)
	    {
	      fp->_flags |= __SERR;
	      return EOF;
	    }
	}
      return 0;
   12ea4:	00000513          	li	a0,0
	}
      p += t;
      n -= t;
    }
  return 0;
}
   12ea8:	01c12083          	lw	ra,28(sp)
   12eac:	01812403          	lw	s0,24(sp)
   12eb0:	01412483          	lw	s1,20(sp)
   12eb4:	01012903          	lw	s2,16(sp)
   12eb8:	00c12983          	lw	s3,12(sp)
   12ebc:	02010113          	addi	sp,sp,32
   12ec0:	00008067          	ret
	      return EOF;
	    }
	}
      return 0;
    }
  if ((p = fp->_bf._base) == NULL)
   12ec4:	0105a903          	lw	s2,16(a1)
   12ec8:	fc090ee3          	beqz	s2,12ea4 <__sflush_r+0x124>
    {
      /* Nothing to flush.  */
      return 0;
    }
  n = fp->_p - p;		/* write this much */
   12ecc:	0005a483          	lw	s1,0(a1)
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
   12ed0:	00377713          	andi	a4,a4,3
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
   12ed4:	0125a023          	sw	s2,0(a1)
  if ((p = fp->_bf._base) == NULL)
    {
      /* Nothing to flush.  */
      return 0;
    }
  n = fp->_p - p;		/* write this much */
   12ed8:	412484b3          	sub	s1,s1,s2
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
   12edc:	00000793          	li	a5,0
   12ee0:	00071463          	bnez	a4,12ee8 <__sflush_r+0x168>
   12ee4:	0145a783          	lw	a5,20(a1)
   12ee8:	00f42423          	sw	a5,8(s0)

  while (n > 0)
   12eec:	00904863          	bgtz	s1,12efc <__sflush_r+0x17c>
   12ef0:	fb5ff06f          	j	12ea4 <__sflush_r+0x124>
      if (t <= 0)
	{
          fp->_flags |= __SERR;
          return EOF;
	}
      p += t;
   12ef4:	00a90933          	add	s2,s2,a0
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
   12ef8:	fa9056e3          	blez	s1,12ea4 <__sflush_r+0x124>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
   12efc:	02442783          	lw	a5,36(s0)
   12f00:	01c42583          	lw	a1,28(s0)
   12f04:	00048693          	mv	a3,s1
   12f08:	00090613          	mv	a2,s2
   12f0c:	00098513          	mv	a0,s3
   12f10:	000780e7          	jalr	a5
	{
          fp->_flags |= __SERR;
          return EOF;
	}
      p += t;
      n -= t;
   12f14:	40a484b3          	sub	s1,s1,a0
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
      if (t <= 0)
   12f18:	fca04ee3          	bgtz	a0,12ef4 <__sflush_r+0x174>
	{
          fp->_flags |= __SERR;
   12f1c:	00c45783          	lhu	a5,12(s0)
          return EOF;
   12f20:	fff00513          	li	a0,-1
  while (n > 0)
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
      if (t <= 0)
	{
          fp->_flags |= __SERR;
   12f24:	0407e793          	ori	a5,a5,64
   12f28:	00f41623          	sh	a5,12(s0)
          return EOF;
   12f2c:	f7dff06f          	j	12ea8 <__sflush_r+0x128>
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
	  if (curoff != -1 || ptr->_errno == 0
   12f30:	f2a592e3          	bne	a1,a0,12e54 <__sflush_r+0xd4>
   12f34:	0009a703          	lw	a4,0(s3)
   12f38:	01d00793          	li	a5,29
   12f3c:	fee7e0e3          	bltu	a5,a4,12f1c <__sflush_r+0x19c>
   12f40:	204007b7          	lui	a5,0x20400
   12f44:	00178793          	addi	a5,a5,1 # 20400001 <_gp+0x203ea6e1>
   12f48:	00e7d7b3          	srl	a5,a5,a4
   12f4c:	0017f793          	andi	a5,a5,1
   12f50:	fc0786e3          	beqz	a5,12f1c <__sflush_r+0x19c>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
   12f54:	00c45603          	lhu	a2,12(s0)
   12f58:	fffff7b7          	lui	a5,0xfffff
   12f5c:	7ff78793          	addi	a5,a5,2047 # fffff7ff <_gp+0xfffe9edf>
#endif
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
   12f60:	01042683          	lw	a3,16(s0)
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
   12f64:	00f677b3          	and	a5,a2,a5
   12f68:	01079793          	slli	a5,a5,0x10
   12f6c:	4107d793          	srai	a5,a5,0x10
#endif
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
   12f70:	00d42023          	sw	a3,0(s0)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
   12f74:	01379693          	slli	a3,a5,0x13
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
   12f78:	00f41623          	sh	a5,12(s0)
#endif
	      fp->_r = 0;
   12f7c:	00042223          	sw	zero,4(s0)
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
   12f80:	f006d2e3          	bgez	a3,12e84 <__sflush_r+0x104>
   12f84:	f00710e3          	bnez	a4,12e84 <__sflush_r+0x104>
		fp->_offset = curoff;
   12f88:	04a42823          	sw	a0,80(s0)
   12f8c:	04b42a23          	sw	a1,84(s0)
   12f90:	ef5ff06f          	j	12e84 <__sflush_r+0x104>
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
   12f94:	03c5a703          	lw	a4,60(a1)
   12f98:	e2e04ae3          	bgtz	a4,12dcc <__sflush_r+0x4c>
   12f9c:	f09ff06f          	j	12ea4 <__sflush_r+0x124>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
   12fa0:	01c42583          	lw	a1,28(s0)
   12fa4:	00000613          	li	a2,0
   12fa8:	00000693          	li	a3,0
   12fac:	00100713          	li	a4,1
   12fb0:	00098513          	mv	a0,s3
   12fb4:	000800e7          	jalr	a6
	      if (curoff == -1L && ptr->_errno != 0)
   12fb8:	fff00793          	li	a5,-1
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
   12fbc:	00050613          	mv	a2,a0
   12fc0:	00058693          	mv	a3,a1
	      if (curoff == -1L && ptr->_errno != 0)
   12fc4:	00f50863          	beq	a0,a5,12fd4 <__sflush_r+0x254>
   12fc8:	00c45783          	lhu	a5,12(s0)
   12fcc:	02842803          	lw	a6,40(s0)
   12fd0:	e25ff06f          	j	12df4 <__sflush_r+0x74>
   12fd4:	fea59ae3          	bne	a1,a0,12fc8 <__sflush_r+0x248>
   12fd8:	0009a783          	lw	a5,0(s3)
   12fdc:	fe0786e3          	beqz	a5,12fc8 <__sflush_r+0x248>
		{
		  int result = EOF;
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
   12fe0:	01d00713          	li	a4,29
   12fe4:	00e78663          	beq	a5,a4,12ff0 <__sflush_r+0x270>
   12fe8:	01600713          	li	a4,22
   12fec:	00e79863          	bne	a5,a4,12ffc <__sflush_r+0x27c>
		    {
		      result = 0;
		      ptr->_errno = tmp_errno;
   12ff0:	0099a023          	sw	s1,0(s3)
	      if (curoff == -1L && ptr->_errno != 0)
		{
		  int result = EOF;
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
		    {
		      result = 0;
   12ff4:	00000513          	li	a0,0
		      ptr->_errno = tmp_errno;
   12ff8:	eb1ff06f          	j	12ea8 <__sflush_r+0x128>
		    }
		  else
		    fp->_flags |= __SERR;
   12ffc:	00c45783          	lhu	a5,12(s0)
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
	      if (curoff == -1L && ptr->_errno != 0)
		{
		  int result = EOF;
   13000:	00058513          	mv	a0,a1
		    {
		      result = 0;
		      ptr->_errno = tmp_errno;
		    }
		  else
		    fp->_flags |= __SERR;
   13004:	0407e793          	ori	a5,a5,64
   13008:	00f41623          	sh	a5,12(s0)
   1300c:	e9dff06f          	j	12ea8 <__sflush_r+0x128>

00013010 <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
   13010:	fe010113          	addi	sp,sp,-32
   13014:	00812c23          	sw	s0,24(sp)
   13018:	00112e23          	sw	ra,28(sp)
   1301c:	00050413          	mv	s0,a0
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
   13020:	00050663          	beqz	a0,1302c <_fflush_r+0x1c>
   13024:	03852783          	lw	a5,56(a0)
   13028:	02078a63          	beqz	a5,1305c <_fflush_r+0x4c>

  if (!fp->_flags)
   1302c:	00c59783          	lh	a5,12(a1)
   13030:	00079c63          	bnez	a5,13048 <_fflush_r+0x38>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
  _newlib_flockfile_end (fp);
  return ret;
}
   13034:	01c12083          	lw	ra,28(sp)
   13038:	00000513          	li	a0,0
   1303c:	01812403          	lw	s0,24(sp)
   13040:	02010113          	addi	sp,sp,32
   13044:	00008067          	ret

  if (!fp->_flags)
    return 0;

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
   13048:	00040513          	mv	a0,s0
  _newlib_flockfile_end (fp);
  return ret;
}
   1304c:	01c12083          	lw	ra,28(sp)
   13050:	01812403          	lw	s0,24(sp)
   13054:	02010113          	addi	sp,sp,32

  if (!fp->_flags)
    return 0;

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
   13058:	d29ff06f          	j	12d80 <__sflush_r>
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
   1305c:	00b12623          	sw	a1,12(sp)
   13060:	360000ef          	jal	133c0 <__sinit>
   13064:	00c12583          	lw	a1,12(sp)
   13068:	fc5ff06f          	j	1302c <_fflush_r+0x1c>

0001306c <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
   1306c:	00050593          	mv	a1,a0
  if (fp == NULL)
   13070:	00050663          	beqz	a0,1307c <fflush+0x10>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);

  return _fflush_r (_REENT, fp);
   13074:	8101a503          	lw	a0,-2032(gp) # 15130 <_impure_ptr>
   13078:	f99ff06f          	j	13010 <_fflush_r>
int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
  if (fp == NULL)
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
   1307c:	80c1a503          	lw	a0,-2036(gp) # 1512c <_global_impure_ptr>
   13080:	000135b7          	lui	a1,0x13
   13084:	01058593          	addi	a1,a1,16 # 13010 <_fflush_r>
   13088:	0050006f          	j	1388c <_fwalk_reent>

0001308c <__fp_unlock>:
       FILE * ptr)
{
  _funlockfile (ptr);

  return 0;
}
   1308c:	00000513          	li	a0,0
   13090:	00008067          	ret

00013094 <_cleanup_r>:
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
   13094:	000145b7          	lui	a1,0x14
   13098:	d2858593          	addi	a1,a1,-728 # 13d28 <_fclose_r>
   1309c:	7f00006f          	j	1388c <_fwalk_reent>

000130a0 <__sinit.part.1>:
/*
 * __sinit() is called whenever stdio's internal variables must be set up.
 */

_VOID
_DEFUN(__sinit, (s),
   130a0:	fe010113          	addi	sp,sp,-32
      __sinit_lock_release ();
      return;
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
   130a4:	000137b7          	lui	a5,0x13
/*
 * __sinit() is called whenever stdio's internal variables must be set up.
 */

_VOID
_DEFUN(__sinit, (s),
   130a8:	00812c23          	sw	s0,24(sp)
      __sinit_lock_release ();
      return;
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
   130ac:	09478793          	addi	a5,a5,148 # 13094 <_cleanup_r>
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
   130b0:	00452403          	lw	s0,4(a0)
/*
 * __sinit() is called whenever stdio's internal variables must be set up.
 */

_VOID
_DEFUN(__sinit, (s),
   130b4:	00112e23          	sw	ra,28(sp)
   130b8:	00912a23          	sw	s1,20(sp)
   130bc:	01212823          	sw	s2,16(sp)
   130c0:	01312623          	sw	s3,12(sp)
   130c4:	01412423          	sw	s4,8(sp)
   130c8:	01512223          	sw	s5,4(sp)
   130cc:	01612023          	sw	s6,0(sp)
      __sinit_lock_release ();
      return;
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
   130d0:	02f52e23          	sw	a5,60(a0)

  s->__sglue._next = NULL;
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
   130d4:	00300793          	li	a5,3
   130d8:	2ef52223          	sw	a5,740(a0)
  s->__sglue._iobs = &s->__sf[0];
   130dc:	2f050713          	addi	a4,a0,752
            struct _reent *data)
{
  ptr->_p = 0;
  ptr->_r = 0;
  ptr->_w = 0;
  ptr->_flags = flags;
   130e0:	00400793          	li	a5,4
  s->__cleanup = _cleanup_r;	/* conservative */

  s->__sglue._next = NULL;
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
  s->__sglue._iobs = &s->__sf[0];
   130e4:	2ee52423          	sw	a4,744(a0)
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */

  s->__sglue._next = NULL;
   130e8:	2e052023          	sw	zero,736(a0)
/*
 * __sinit() is called whenever stdio's internal variables must be set up.
 */

_VOID
_DEFUN(__sinit, (s),
   130ec:	00050913          	mv	s2,a0
            struct _reent *data)
{
  ptr->_p = 0;
  ptr->_r = 0;
  ptr->_w = 0;
  ptr->_flags = flags;
   130f0:	00f41623          	sh	a5,12(s0)
  ptr->_flags2 = 0;
  ptr->_file = file;
  ptr->_bf._base = 0;
  ptr->_bf._size = 0;
  ptr->_lbfsize = 0;
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
   130f4:	00800613          	li	a2,8
   130f8:	00000593          	li	a1,0
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
  ptr->_p = 0;
   130fc:	00042023          	sw	zero,0(s0)
  ptr->_r = 0;
   13100:	00042223          	sw	zero,4(s0)
  ptr->_w = 0;
   13104:	00042423          	sw	zero,8(s0)
  ptr->_flags = flags;
  ptr->_flags2 = 0;
   13108:	06042423          	sw	zero,104(s0)
  ptr->_file = file;
   1310c:	00041723          	sh	zero,14(s0)
  ptr->_bf._base = 0;
   13110:	00042823          	sw	zero,16(s0)
  ptr->_bf._size = 0;
   13114:	00042a23          	sw	zero,20(s0)
  ptr->_lbfsize = 0;
   13118:	00042c23          	sw	zero,24(s0)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
   1311c:	06040513          	addi	a0,s0,96
   13120:	1bd000ef          	jal	13adc <memset>
     requires both stdin and stdout to be line-buffered, but tradition
     leaves stdin alone on systems without fcntl.  */
#ifdef HAVE_FCNTL
  std (s->_stdout, __SWR, 1, s);
#else
  std (s->_stdout, __SWR | __SLBF, 1, s);
   13124:	00892483          	lw	s1,8(s2)
  ptr->_bf._base = 0;
  ptr->_bf._size = 0;
  ptr->_lbfsize = 0;
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  ptr->_cookie = ptr;
  ptr->_read = __sread;
   13128:	00014b37          	lui	s6,0x14
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
   1312c:	00014ab7          	lui	s5,0x14
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
   13130:	00014a37          	lui	s4,0x14
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
   13134:	000149b7          	lui	s3,0x14
  ptr->_bf._base = 0;
  ptr->_bf._size = 0;
  ptr->_lbfsize = 0;
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  ptr->_cookie = ptr;
  ptr->_read = __sread;
   13138:	bb8b0b13          	addi	s6,s6,-1096 # 13bb8 <__sread>
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
   1313c:	c3ca8a93          	addi	s5,s5,-964 # 13c3c <__swrite>
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
   13140:	cb4a0a13          	addi	s4,s4,-844 # 13cb4 <__sseek>
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
   13144:	d2098993          	addi	s3,s3,-736 # 13d20 <__sclose>
            struct _reent *data)
{
  ptr->_p = 0;
  ptr->_r = 0;
  ptr->_w = 0;
  ptr->_flags = flags;
   13148:	00900793          	li	a5,9
  ptr->_bf._base = 0;
  ptr->_bf._size = 0;
  ptr->_lbfsize = 0;
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  ptr->_cookie = ptr;
  ptr->_read = __sread;
   1314c:	03642023          	sw	s6,32(s0)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
   13150:	03542223          	sw	s5,36(s0)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
   13154:	03442423          	sw	s4,40(s0)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
   13158:	03342623          	sw	s3,44(s0)
  ptr->_file = file;
  ptr->_bf._base = 0;
  ptr->_bf._size = 0;
  ptr->_lbfsize = 0;
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  ptr->_cookie = ptr;
   1315c:	00842e23          	sw	s0,28(s0)
            struct _reent *data)
{
  ptr->_p = 0;
  ptr->_r = 0;
  ptr->_w = 0;
  ptr->_flags = flags;
   13160:	00f49623          	sh	a5,12(s1)
  ptr->_flags2 = 0;
  ptr->_file = file;
   13164:	00100793          	li	a5,1
   13168:	00f49723          	sh	a5,14(s1)
  ptr->_bf._base = 0;
  ptr->_bf._size = 0;
  ptr->_lbfsize = 0;
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
   1316c:	00800613          	li	a2,8
   13170:	00000593          	li	a1,0
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
  ptr->_p = 0;
   13174:	0004a023          	sw	zero,0(s1)
  ptr->_r = 0;
   13178:	0004a223          	sw	zero,4(s1)
  ptr->_w = 0;
   1317c:	0004a423          	sw	zero,8(s1)
  ptr->_flags = flags;
  ptr->_flags2 = 0;
   13180:	0604a423          	sw	zero,104(s1)
  ptr->_file = file;
  ptr->_bf._base = 0;
   13184:	0004a823          	sw	zero,16(s1)
  ptr->_bf._size = 0;
   13188:	0004aa23          	sw	zero,20(s1)
  ptr->_lbfsize = 0;
   1318c:	0004ac23          	sw	zero,24(s1)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
   13190:	06048513          	addi	a0,s1,96
   13194:	149000ef          	jal	13adc <memset>
  std (s->_stdout, __SWR | __SLBF, 1, s);
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
   13198:	00c92403          	lw	s0,12(s2)
            struct _reent *data)
{
  ptr->_p = 0;
  ptr->_r = 0;
  ptr->_w = 0;
  ptr->_flags = flags;
   1319c:	01200793          	li	a5,18
  ptr->_bf._base = 0;
  ptr->_bf._size = 0;
  ptr->_lbfsize = 0;
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  ptr->_cookie = ptr;
  ptr->_read = __sread;
   131a0:	0364a023          	sw	s6,32(s1)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
   131a4:	0354a223          	sw	s5,36(s1)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
   131a8:	0344a423          	sw	s4,40(s1)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
   131ac:	0334a623          	sw	s3,44(s1)
  ptr->_file = file;
  ptr->_bf._base = 0;
  ptr->_bf._size = 0;
  ptr->_lbfsize = 0;
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  ptr->_cookie = ptr;
   131b0:	0094ae23          	sw	s1,28(s1)
            struct _reent *data)
{
  ptr->_p = 0;
  ptr->_r = 0;
  ptr->_w = 0;
  ptr->_flags = flags;
   131b4:	00f41623          	sh	a5,12(s0)
  ptr->_flags2 = 0;
  ptr->_file = file;
   131b8:	00200793          	li	a5,2
   131bc:	00f41723          	sh	a5,14(s0)
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
  ptr->_p = 0;
   131c0:	00042023          	sw	zero,0(s0)
  ptr->_r = 0;
   131c4:	00042223          	sw	zero,4(s0)
  ptr->_w = 0;
   131c8:	00042423          	sw	zero,8(s0)
  ptr->_flags = flags;
  ptr->_flags2 = 0;
   131cc:	06042423          	sw	zero,104(s0)
  ptr->_file = file;
  ptr->_bf._base = 0;
   131d0:	00042823          	sw	zero,16(s0)
  ptr->_bf._size = 0;
   131d4:	00042a23          	sw	zero,20(s0)
  ptr->_lbfsize = 0;
   131d8:	00042c23          	sw	zero,24(s0)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
   131dc:	06040513          	addi	a0,s0,96
   131e0:	00800613          	li	a2,8
   131e4:	00000593          	li	a1,0
   131e8:	0f5000ef          	jal	13adc <memset>
  std (s->_stderr, __SRW | __SNBF, 2, s);

  s->__sdidinit = 1;

  __sinit_lock_release ();
}
   131ec:	01c12083          	lw	ra,28(sp)

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);

  s->__sdidinit = 1;
   131f0:	00100793          	li	a5,1
  ptr->_bf._base = 0;
  ptr->_bf._size = 0;
  ptr->_lbfsize = 0;
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  ptr->_cookie = ptr;
  ptr->_read = __sread;
   131f4:	03642023          	sw	s6,32(s0)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
   131f8:	03542223          	sw	s5,36(s0)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
   131fc:	03442423          	sw	s4,40(s0)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
   13200:	03342623          	sw	s3,44(s0)
  ptr->_file = file;
  ptr->_bf._base = 0;
  ptr->_bf._size = 0;
  ptr->_lbfsize = 0;
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
  ptr->_cookie = ptr;
   13204:	00842e23          	sw	s0,28(s0)
  std (s->_stderr, __SRW | __SNBF, 2, s);

  s->__sdidinit = 1;

  __sinit_lock_release ();
}
   13208:	01412483          	lw	s1,20(sp)

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);

  s->__sdidinit = 1;
   1320c:	02f92c23          	sw	a5,56(s2)

  __sinit_lock_release ();
}
   13210:	01812403          	lw	s0,24(sp)
   13214:	01012903          	lw	s2,16(sp)
   13218:	00c12983          	lw	s3,12(sp)
   1321c:	00812a03          	lw	s4,8(sp)
   13220:	00412a83          	lw	s5,4(sp)
   13224:	00012b03          	lw	s6,0(sp)
   13228:	02010113          	addi	sp,sp,32
   1322c:	00008067          	ret

00013230 <__fp_lock>:
   13230:	00000513          	li	a0,0
   13234:	00008067          	ret

00013238 <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
   13238:	ff010113          	addi	sp,sp,-16
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
   1323c:	fff58793          	addi	a5,a1,-1

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
   13240:	00812423          	sw	s0,8(sp)
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
   13244:	00479413          	slli	s0,a5,0x4
   13248:	00779793          	slli	a5,a5,0x7
   1324c:	40878433          	sub	s0,a5,s0

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
   13250:	01212023          	sw	s2,0(sp)
   13254:	00058913          	mv	s2,a1
  struct glue_with_file *g;

  g = (struct glue_with_file *)
   13258:	08040593          	addi	a1,s0,128

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
   1325c:	00912223          	sw	s1,4(sp)
   13260:	00112623          	sw	ra,12(sp)
  struct glue_with_file *g;

  g = (struct glue_with_file *)
   13264:	9adfe0ef          	jal	11c10 <_malloc_r>
   13268:	00050493          	mv	s1,a0
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
   1326c:	02050063          	beqz	a0,1328c <__sfmoreglue+0x54>
    return NULL;
  g->glue._next = NULL;
  g->glue._niobs = n;
  g->glue._iobs = &g->file;
   13270:	01050513          	addi	a0,a0,16

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
    return NULL;
  g->glue._next = NULL;
   13274:	0004a023          	sw	zero,0(s1)
  g->glue._niobs = n;
   13278:	0124a223          	sw	s2,4(s1)
  g->glue._iobs = &g->file;
   1327c:	00a4a423          	sw	a0,8(s1)
  memset (&g->file, 0, n * sizeof (FILE));
   13280:	07040613          	addi	a2,s0,112
   13284:	00000593          	li	a1,0
   13288:	055000ef          	jal	13adc <memset>
  return &g->glue;
}
   1328c:	00c12083          	lw	ra,12(sp)
   13290:	00048513          	mv	a0,s1
   13294:	00812403          	lw	s0,8(sp)
   13298:	00412483          	lw	s1,4(sp)
   1329c:	00012903          	lw	s2,0(sp)
   132a0:	01010113          	addi	sp,sp,16
   132a4:	00008067          	ret

000132a8 <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
   132a8:	fe010113          	addi	sp,sp,-32
   132ac:	01212823          	sw	s2,16(sp)
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
   132b0:	80c1a903          	lw	s2,-2036(gp) # 1512c <_global_impure_ptr>
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
   132b4:	01312623          	sw	s3,12(sp)
   132b8:	00112e23          	sw	ra,28(sp)
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
   132bc:	03892783          	lw	a5,56(s2)
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
   132c0:	00812c23          	sw	s0,24(sp)
   132c4:	00912a23          	sw	s1,20(sp)
   132c8:	00050993          	mv	s3,a0
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
   132cc:	00079663          	bnez	a5,132d8 <__sfp+0x30>
   132d0:	00090513          	mv	a0,s2
   132d4:	dcdff0ef          	jal	130a0 <__sinit.part.1>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
   132d8:	2e090913          	addi	s2,s2,736
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   132dc:	fff00493          	li	s1,-1
   132e0:	00492783          	lw	a5,4(s2)
   132e4:	00892403          	lw	s0,8(s2)
   132e8:	fff78793          	addi	a5,a5,-1
   132ec:	0007da63          	bgez	a5,13300 <__sfp+0x58>
   132f0:	0840006f          	j	13374 <__sfp+0xcc>
   132f4:	fff78793          	addi	a5,a5,-1
   132f8:	07040413          	addi	s0,s0,112
   132fc:	06978c63          	beq	a5,s1,13374 <__sfp+0xcc>
	if (fp->_flags == 0)
   13300:	00c41703          	lh	a4,12(s0)
   13304:	fe0718e3          	bnez	a4,132f4 <__sfp+0x4c>
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
   13308:	fff00793          	li	a5,-1
   1330c:	00f41723          	sh	a5,14(s0)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
   13310:	00100793          	li	a5,1
   13314:	00f41623          	sh	a5,12(s0)
  fp->_flags2 = 0;
   13318:	06042423          	sw	zero,104(s0)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();

  fp->_p = NULL;		/* no current pointer */
   1331c:	00042023          	sw	zero,0(s0)
  fp->_w = 0;			/* nothing to read or write */
   13320:	00042423          	sw	zero,8(s0)
  fp->_r = 0;
   13324:	00042223          	sw	zero,4(s0)
  fp->_bf._base = NULL;		/* no buffer */
   13328:	00042823          	sw	zero,16(s0)
  fp->_bf._size = 0;
   1332c:	00042a23          	sw	zero,20(s0)
  fp->_lbfsize = 0;		/* not line buffered */
   13330:	00042c23          	sw	zero,24(s0)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
   13334:	00800613          	li	a2,8
   13338:	00000593          	li	a1,0
   1333c:	06040513          	addi	a0,s0,96
   13340:	79c000ef          	jal	13adc <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
   13344:	02042823          	sw	zero,48(s0)
  fp->_ub._size = 0;
   13348:	02042a23          	sw	zero,52(s0)
  fp->_lb._base = NULL;		/* no line buffer */
   1334c:	04042223          	sw	zero,68(s0)
  fp->_lb._size = 0;
   13350:	04042423          	sw	zero,72(s0)

  return fp;
   13354:	00040513          	mv	a0,s0
}
   13358:	01c12083          	lw	ra,28(sp)
   1335c:	01812403          	lw	s0,24(sp)
   13360:	01412483          	lw	s1,20(sp)
   13364:	01012903          	lw	s2,16(sp)
   13368:	00c12983          	lw	s3,12(sp)
   1336c:	02010113          	addi	sp,sp,32
   13370:	00008067          	ret
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
   13374:	00092783          	lw	a5,0(s2)
   13378:	00078663          	beqz	a5,13384 <__sfp+0xdc>
   1337c:	00078913          	mv	s2,a5
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
   13380:	f61ff06f          	j	132e0 <__sfp+0x38>
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
   13384:	00400593          	li	a1,4
   13388:	00098513          	mv	a0,s3
   1338c:	eadff0ef          	jal	13238 <__sfmoreglue>
   13390:	00a92023          	sw	a0,0(s2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
   13394:	00050663          	beqz	a0,133a0 <__sfp+0xf8>
   13398:	00050913          	mv	s2,a0
   1339c:	f45ff06f          	j	132e0 <__sfp+0x38>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
   133a0:	00c00793          	li	a5,12
   133a4:	00f9a023          	sw	a5,0(s3)
  return NULL;
   133a8:	00000513          	li	a0,0
   133ac:	fadff06f          	j	13358 <__sfp+0xb0>

000133b0 <_cleanup>:
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
   133b0:	80c1a503          	lw	a0,-2036(gp) # 1512c <_global_impure_ptr>
   133b4:	000145b7          	lui	a1,0x14
   133b8:	d2858593          	addi	a1,a1,-728 # 13d28 <_fclose_r>
   133bc:	4d00006f          	j	1388c <_fwalk_reent>

000133c0 <__sinit>:
_DEFUN(__sinit, (s),
       struct _reent *s)
{
  __sinit_lock_acquire ();

  if (s->__sdidinit)
   133c0:	03852783          	lw	a5,56(a0)
   133c4:	00078463          	beqz	a5,133cc <__sinit+0xc>
   133c8:	00008067          	ret
   133cc:	cd5ff06f          	j	130a0 <__sinit.part.1>

000133d0 <__sfp_lock_acquire>:
   133d0:	00008067          	ret

000133d4 <__sfp_lock_release>:
   133d4:	00008067          	ret

000133d8 <__sinit_lock_acquire>:
   133d8:	00008067          	ret

000133dc <__sinit_lock_release>:
  __lock_acquire_recursive (__sinit_lock);
}

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
   133dc:	00008067          	ret

000133e0 <__fp_lock_all>:
_VOID
_DEFUN_VOID(__fp_lock_all)
{
  __sfp_lock_acquire ();

  _CAST_VOID _fwalk (_REENT, __fp_lock);
   133e0:	8101a503          	lw	a0,-2032(gp) # 15130 <_impure_ptr>
   133e4:	000135b7          	lui	a1,0x13
   133e8:	23058593          	addi	a1,a1,560 # 13230 <__fp_lock>
   133ec:	3f00006f          	j	137dc <_fwalk>

000133f0 <__fp_unlock_all>:
}

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
   133f0:	8101a503          	lw	a0,-2032(gp) # 15130 <_impure_ptr>
   133f4:	000135b7          	lui	a1,0x13
   133f8:	08c58593          	addi	a1,a1,140 # 1308c <__fp_unlock>
   133fc:	3e00006f          	j	137dc <_fwalk>

00013400 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
   13400:	fe010113          	addi	sp,sp,-32
   13404:	01212823          	sw	s2,16(sp)

  unsigned long pagesz = malloc_getpagesize;

  MALLOC_LOCK;

  top_size = chunksize(top);
   13408:	00015937          	lui	s2,0x15
   1340c:	d1090913          	addi	s2,s2,-752 # 14d10 <__malloc_av_>
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
   13410:	00812c23          	sw	s0,24(sp)
   13414:	00912a23          	sw	s1,20(sp)
   13418:	00058413          	mv	s0,a1
   1341c:	01312623          	sw	s3,12(sp)
   13420:	00112e23          	sw	ra,28(sp)
   13424:	00050993          	mv	s3,a0
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;

  MALLOC_LOCK;
   13428:	a74ff0ef          	jal	1269c <__malloc_lock>

  top_size = chunksize(top);
   1342c:	00892703          	lw	a4,8(s2)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
   13430:	000017b7          	lui	a5,0x1
   13434:	fef78593          	addi	a1,a5,-17 # fef <_reset+0xdef>

  unsigned long pagesz = malloc_getpagesize;

  MALLOC_LOCK;

  top_size = chunksize(top);
   13438:	00472483          	lw	s1,4(a4)
   1343c:	ffc4f493          	andi	s1,s1,-4
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
   13440:	40848433          	sub	s0,s1,s0
   13444:	00b40433          	add	s0,s0,a1
   13448:	00c45413          	srli	s0,s0,0xc
   1344c:	fff40413          	addi	s0,s0,-1
   13450:	00c41413          	slli	s0,s0,0xc

  if (extra < (long)pagesz)  /* Not enough memory to release */
   13454:	00f44c63          	blt	s0,a5,1346c <_malloc_trim_r+0x6c>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
   13458:	00000513          	li	a0,0
   1345c:	f75fc0ef          	jal	103d0 <sbrk>
    if (current_brk != (char*)(top) + top_size)
   13460:	00892783          	lw	a5,8(s2)
   13464:	009787b3          	add	a5,a5,s1
   13468:	02f50663          	beq	a0,a5,13494 <_malloc_trim_r+0x94>
  top_size = chunksize(top);
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;

  if (extra < (long)pagesz)  /* Not enough memory to release */
  {
    MALLOC_UNLOCK;
   1346c:	00098513          	mv	a0,s3
   13470:	a30ff0ef          	jal	126a0 <__malloc_unlock>
    return 0;
   13474:	00000513          	li	a0,0
	MALLOC_UNLOCK;
        return 1;
      }
    }
  }
}
   13478:	01c12083          	lw	ra,28(sp)
   1347c:	01812403          	lw	s0,24(sp)
   13480:	01412483          	lw	s1,20(sp)
   13484:	01012903          	lw	s2,16(sp)
   13488:	00c12983          	lw	s3,12(sp)
   1348c:	02010113          	addi	sp,sp,32
   13490:	00008067          	ret
      return 0;     /* Apparently we don't own memory; must fail */
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
   13494:	40800533          	neg	a0,s0
   13498:	f39fc0ef          	jal	103d0 <sbrk>
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
   1349c:	fff00793          	li	a5,-1
   134a0:	02f50863          	beq	a0,a5,134d0 <_malloc_trim_r+0xd0>

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
        sbrked_mem -= extra;
   134a4:	8501a783          	lw	a5,-1968(gp) # 15170 <__malloc_current_mallinfo>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
   134a8:	00892683          	lw	a3,8(s2)
   134ac:	408484b3          	sub	s1,s1,s0
   134b0:	0014e493          	ori	s1,s1,1
        sbrked_mem -= extra;
   134b4:	40878433          	sub	s0,a5,s0
        check_chunk(top);
	MALLOC_UNLOCK;
   134b8:	00098513          	mv	a0,s3
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
   134bc:	0096a223          	sw	s1,4(a3)
        sbrked_mem -= extra;
   134c0:	8481a823          	sw	s0,-1968(gp) # 15170 <__malloc_current_mallinfo>
        check_chunk(top);
	MALLOC_UNLOCK;
   134c4:	9dcff0ef          	jal	126a0 <__malloc_unlock>
        return 1;
   134c8:	00100513          	li	a0,1
   134cc:	fadff06f          	j	13478 <_malloc_trim_r+0x78>
      new_brk = (char*)(MORECORE (-extra));
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
   134d0:	00000513          	li	a0,0
   134d4:	efdfc0ef          	jal	103d0 <sbrk>
        top_size = current_brk - (char*)top;
   134d8:	00892703          	lw	a4,8(s2)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
   134dc:	00f00693          	li	a3,15
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
        top_size = current_brk - (char*)top;
   134e0:	40e507b3          	sub	a5,a0,a4
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
   134e4:	f8f6d4e3          	ble	a5,a3,1346c <_malloc_trim_r+0x6c>
        {
          sbrked_mem = current_brk - sbrk_base;
   134e8:	8141a683          	lw	a3,-2028(gp) # 15134 <__malloc_sbrk_base>
          set_head(top, top_size | PREV_INUSE);
   134ec:	0017e793          	ori	a5,a5,1
   134f0:	00f72223          	sw	a5,4(a4)
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
        top_size = current_brk - (char*)top;
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
        {
          sbrked_mem = current_brk - sbrk_base;
   134f4:	40d50533          	sub	a0,a0,a3
   134f8:	84a1a823          	sw	a0,-1968(gp) # 15170 <__malloc_current_mallinfo>
   134fc:	f71ff06f          	j	1346c <_malloc_trim_r+0x6c>

00013500 <_free_r>:
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
   13500:	0e058e63          	beqz	a1,135fc <_free_r+0xfc>
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
   13504:	ff010113          	addi	sp,sp,-16
   13508:	00812423          	sw	s0,8(sp)
   1350c:	00058413          	mv	s0,a1
   13510:	00912223          	sw	s1,4(sp)
   13514:	00112623          	sw	ra,12(sp)
   13518:	00050493          	mv	s1,a0
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;

  MALLOC_LOCK;
   1351c:	980ff0ef          	jal	1269c <__malloc_lock>

  p = mem2chunk(mem);
  hd = p->size;
   13520:	ffc42503          	lw	a0,-4(s0)
  if (mem == 0)                              /* free(0) has no effect */
    return;

  MALLOC_LOCK;

  p = mem2chunk(mem);
   13524:	ff840613          	addi	a2,s0,-8
  
  sz = hd & ~PREV_INUSE;
  next = chunk_at_offset(p, sz);
  nextsz = chunksize(next);
  
  if (next == top)                            /* merge with top */
   13528:	000155b7          	lui	a1,0x15
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
   1352c:	ffe57793          	andi	a5,a0,-2
  next = chunk_at_offset(p, sz);
   13530:	00f606b3          	add	a3,a2,a5
  nextsz = chunksize(next);
  
  if (next == top)                            /* merge with top */
   13534:	d1058593          	addi	a1,a1,-752 # 14d10 <__malloc_av_>
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
  next = chunk_at_offset(p, sz);
  nextsz = chunksize(next);
   13538:	0046a703          	lw	a4,4(a3)
  
  if (next == top)                            /* merge with top */
   1353c:	0085a803          	lw	a6,8(a1)
  {
    sz += nextsz;

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
   13540:	00157513          	andi	a0,a0,1
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
  next = chunk_at_offset(p, sz);
  nextsz = chunksize(next);
   13544:	ffc77713          	andi	a4,a4,-4
  
  if (next == top)                            /* merge with top */
   13548:	15068463          	beq	a3,a6,13690 <_free_r+0x190>
      malloc_trim(RCALL top_pad); 
    MALLOC_UNLOCK;
    return;
  }

  set_head(next, nextsz);                    /* clear inuse bit */
   1354c:	00e6a223          	sw	a4,4(a3)

  islr = 0;

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
   13550:	02051663          	bnez	a0,1357c <_free_r+0x7c>
  {
    prevsz = p->prev_size;
   13554:	ff842503          	lw	a0,-8(s0)
    p = chunk_at_offset(p, -prevsz);
   13558:	40a60633          	sub	a2,a2,a0
    sz += prevsz;
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
   1355c:	00862803          	lw	a6,8(a2)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  {
    prevsz = p->prev_size;
    p = chunk_at_offset(p, -prevsz);
    sz += prevsz;
   13560:	00a787b3          	add	a5,a5,a0
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
   13564:	00015537          	lui	a0,0x15
   13568:	d1850513          	addi	a0,a0,-744 # 14d18 <__malloc_av_+0x8>
   1356c:	16a80663          	beq	a6,a0,136d8 <_free_r+0x1d8>
      islr = 1;
    else
      unlink(p, bck, fwd);
   13570:	00c62503          	lw	a0,12(a2)
   13574:	00a82623          	sw	a0,12(a6)
   13578:	01052423          	sw	a6,8(a0)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
   1357c:	00e68533          	add	a0,a3,a4
   13580:	00452503          	lw	a0,4(a0)
   13584:	00157513          	andi	a0,a0,1
   13588:	0c050a63          	beqz	a0,1365c <_free_r+0x15c>
    else
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
   1358c:	0017e693          	ori	a3,a5,1
  set_foot(p, sz);
   13590:	00f60733          	add	a4,a2,a5
    else
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
   13594:	00d62223          	sw	a3,4(a2)
  set_foot(p, sz);
   13598:	00f72023          	sw	a5,0(a4)
  if (!islr)
    frontlink(p, sz, idx, bck, fwd);  
   1359c:	1ff00713          	li	a4,511
   135a0:	06f76063          	bltu	a4,a5,13600 <_free_r+0x100>
   135a4:	0037d793          	srli	a5,a5,0x3
   135a8:	00178713          	addi	a4,a5,1
   135ac:	00371713          	slli	a4,a4,0x3
   135b0:	0045a683          	lw	a3,4(a1)
   135b4:	00e58733          	add	a4,a1,a4
   135b8:	00072803          	lw	a6,0(a4)
   135bc:	4027d793          	srai	a5,a5,0x2
   135c0:	00100513          	li	a0,1
   135c4:	00f517b3          	sll	a5,a0,a5
   135c8:	00d7e7b3          	or	a5,a5,a3
   135cc:	ff870693          	addi	a3,a4,-8
   135d0:	00d62623          	sw	a3,12(a2)
   135d4:	01062423          	sw	a6,8(a2)
   135d8:	00f5a223          	sw	a5,4(a1)
   135dc:	00c72023          	sw	a2,0(a4)
   135e0:	00c82623          	sw	a2,12(a6)

    set_head(p, sz | PREV_INUSE);
    top = p;
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
      malloc_trim(RCALL top_pad); 
    MALLOC_UNLOCK;
   135e4:	00048513          	mv	a0,s1
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
   135e8:	00c12083          	lw	ra,12(sp)
   135ec:	00812403          	lw	s0,8(sp)
   135f0:	00412483          	lw	s1,4(sp)
   135f4:	01010113          	addi	sp,sp,16

    set_head(p, sz | PREV_INUSE);
    top = p;
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
      malloc_trim(RCALL top_pad); 
    MALLOC_UNLOCK;
   135f8:	8a8ff06f          	j	126a0 <__malloc_unlock>
   135fc:	00008067          	ret


  set_head(p, sz | PREV_INUSE);
  set_foot(p, sz);
  if (!islr)
    frontlink(p, sz, idx, bck, fwd);  
   13600:	0097d713          	srli	a4,a5,0x9
   13604:	00400693          	li	a3,4
   13608:	10e6e463          	bltu	a3,a4,13710 <_free_r+0x210>
   1360c:	0067d713          	srli	a4,a5,0x6
   13610:	03970513          	addi	a0,a4,57
   13614:	03870693          	addi	a3,a4,56
   13618:	00151513          	slli	a0,a0,0x1
   1361c:	00251513          	slli	a0,a0,0x2
   13620:	00a58533          	add	a0,a1,a0
   13624:	00052703          	lw	a4,0(a0)
   13628:	ff850513          	addi	a0,a0,-8
   1362c:	0ee50e63          	beq	a0,a4,13728 <_free_r+0x228>
   13630:	00472683          	lw	a3,4(a4)
   13634:	ffc6f693          	andi	a3,a3,-4
   13638:	00d7f663          	bleu	a3,a5,13644 <_free_r+0x144>
   1363c:	00872703          	lw	a4,8(a4)
   13640:	fee518e3          	bne	a0,a4,13630 <_free_r+0x130>
   13644:	00c72503          	lw	a0,12(a4)
   13648:	00a62623          	sw	a0,12(a2)
   1364c:	00e62423          	sw	a4,8(a2)
   13650:	00c52423          	sw	a2,8(a0)
   13654:	00c72623          	sw	a2,12(a4)
   13658:	f8dff06f          	j	135e4 <_free_r+0xe4>
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  {
    sz += nextsz;
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
   1365c:	0086a503          	lw	a0,8(a3)
      unlink(p, bck, fwd);
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  {
    sz += nextsz;
   13660:	00e787b3          	add	a5,a5,a4
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
   13664:	00015737          	lui	a4,0x15
   13668:	d1870713          	addi	a4,a4,-744 # 14d18 <__malloc_av_+0x8>
   1366c:	0ce50e63          	beq	a0,a4,13748 <_free_r+0x248>
    {
      islr = 1;
      link_last_remainder(p);   
    }
    else
      unlink(next, bck, fwd);
   13670:	00c6a803          	lw	a6,12(a3)
  }


  set_head(p, sz | PREV_INUSE);
  set_foot(p, sz);
   13674:	00f60733          	add	a4,a2,a5
    else
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
   13678:	0017e693          	ori	a3,a5,1
    {
      islr = 1;
      link_last_remainder(p);   
    }
    else
      unlink(next, bck, fwd);
   1367c:	01052623          	sw	a6,12(a0)
   13680:	00a82423          	sw	a0,8(a6)
  }


  set_head(p, sz | PREV_INUSE);
   13684:	00d62223          	sw	a3,4(a2)
  set_foot(p, sz);
   13688:	00f72023          	sw	a5,0(a4)
   1368c:	f11ff06f          	j	1359c <_free_r+0x9c>
  next = chunk_at_offset(p, sz);
  nextsz = chunksize(next);
  
  if (next == top)                            /* merge with top */
  {
    sz += nextsz;
   13690:	00e787b3          	add	a5,a5,a4

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
   13694:	02051063          	bnez	a0,136b4 <_free_r+0x1b4>
    {
      prevsz = p->prev_size;
   13698:	ff842503          	lw	a0,-8(s0)
      p = chunk_at_offset(p, -prevsz);
   1369c:	40a60633          	sub	a2,a2,a0
      sz += prevsz;
      unlink(p, bck, fwd);
   136a0:	00c62703          	lw	a4,12(a2)
   136a4:	00862683          	lw	a3,8(a2)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
    {
      prevsz = p->prev_size;
      p = chunk_at_offset(p, -prevsz);
      sz += prevsz;
   136a8:	00a787b3          	add	a5,a5,a0
      unlink(p, bck, fwd);
   136ac:	00e6a623          	sw	a4,12(a3)
   136b0:	00d72423          	sw	a3,8(a4)
    }

    set_head(p, sz | PREV_INUSE);
    top = p;
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
   136b4:	8181a703          	lw	a4,-2024(gp) # 15138 <__malloc_trim_threshold>
      p = chunk_at_offset(p, -prevsz);
      sz += prevsz;
      unlink(p, bck, fwd);
    }

    set_head(p, sz | PREV_INUSE);
   136b8:	0017e693          	ori	a3,a5,1
   136bc:	00d62223          	sw	a3,4(a2)
    top = p;
   136c0:	00c5a423          	sw	a2,8(a1)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
   136c4:	f2e7e0e3          	bltu	a5,a4,135e4 <_free_r+0xe4>
      malloc_trim(RCALL top_pad); 
   136c8:	82c1a583          	lw	a1,-2004(gp) # 1514c <__malloc_top_pad>
   136cc:	00048513          	mv	a0,s1
   136d0:	d31ff0ef          	jal	13400 <_malloc_trim_r>
   136d4:	f11ff06f          	j	135e4 <_free_r+0xe4>
      islr = 1;
    else
      unlink(p, bck, fwd);
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
   136d8:	00e685b3          	add	a1,a3,a4
   136dc:	0045a583          	lw	a1,4(a1)
   136e0:	0015f593          	andi	a1,a1,1
   136e4:	0e059263          	bnez	a1,137c8 <_free_r+0x2c8>
   136e8:	0086a583          	lw	a1,8(a3)
    {
      islr = 1;
      link_last_remainder(p);   
    }
    else
      unlink(next, bck, fwd);
   136ec:	00c6a683          	lw	a3,12(a3)
      unlink(p, bck, fwd);
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  {
    sz += nextsz;
   136f0:	00f707b3          	add	a5,a4,a5
    else
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
   136f4:	0017e513          	ori	a0,a5,1
  set_foot(p, sz);
   136f8:	00f60733          	add	a4,a2,a5
    {
      islr = 1;
      link_last_remainder(p);   
    }
    else
      unlink(next, bck, fwd);
   136fc:	00d5a623          	sw	a3,12(a1)
   13700:	00b6a423          	sw	a1,8(a3)
  }


  set_head(p, sz | PREV_INUSE);
   13704:	00a62223          	sw	a0,4(a2)
  set_foot(p, sz);
   13708:	00f72023          	sw	a5,0(a4)
   1370c:	ed9ff06f          	j	135e4 <_free_r+0xe4>
  if (!islr)
    frontlink(p, sz, idx, bck, fwd);  
   13710:	01400693          	li	a3,20
   13714:	04e6ec63          	bltu	a3,a4,1376c <_free_r+0x26c>
   13718:	05c70513          	addi	a0,a4,92
   1371c:	05b70693          	addi	a3,a4,91
   13720:	00151513          	slli	a0,a0,0x1
   13724:	ef9ff06f          	j	1361c <_free_r+0x11c>
   13728:	0045a783          	lw	a5,4(a1)
   1372c:	4026d713          	srai	a4,a3,0x2
   13730:	00100693          	li	a3,1
   13734:	00e69733          	sll	a4,a3,a4
   13738:	00f76733          	or	a4,a4,a5
   1373c:	00e5a223          	sw	a4,4(a1)
   13740:	00050713          	mv	a4,a0
   13744:	f05ff06f          	j	13648 <_free_r+0x148>
    else
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
   13748:	0017e693          	ori	a3,a5,1
  set_foot(p, sz);
   1374c:	00f60733          	add	a4,a2,a5
    sz += nextsz;
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
    {
      islr = 1;
      link_last_remainder(p);   
   13750:	00c5aa23          	sw	a2,20(a1)
   13754:	00c5a823          	sw	a2,16(a1)
   13758:	00a62623          	sw	a0,12(a2)
   1375c:	00a62423          	sw	a0,8(a2)
    else
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
   13760:	00d62223          	sw	a3,4(a2)
  set_foot(p, sz);
   13764:	00f72023          	sw	a5,0(a4)
   13768:	e7dff06f          	j	135e4 <_free_r+0xe4>
  if (!islr)
    frontlink(p, sz, idx, bck, fwd);  
   1376c:	05400693          	li	a3,84
   13770:	00e6ec63          	bltu	a3,a4,13788 <_free_r+0x288>
   13774:	00c7d713          	srli	a4,a5,0xc
   13778:	06f70513          	addi	a0,a4,111
   1377c:	06e70693          	addi	a3,a4,110
   13780:	00151513          	slli	a0,a0,0x1
   13784:	e99ff06f          	j	1361c <_free_r+0x11c>
   13788:	15400693          	li	a3,340
   1378c:	00e6ec63          	bltu	a3,a4,137a4 <_free_r+0x2a4>
   13790:	00f7d713          	srli	a4,a5,0xf
   13794:	07870513          	addi	a0,a4,120
   13798:	07770693          	addi	a3,a4,119
   1379c:	00151513          	slli	a0,a0,0x1
   137a0:	e7dff06f          	j	1361c <_free_r+0x11c>
   137a4:	55400813          	li	a6,1364
   137a8:	0fe00513          	li	a0,254
   137ac:	07e00693          	li	a3,126
   137b0:	e6e866e3          	bltu	a6,a4,1361c <_free_r+0x11c>
   137b4:	0127d713          	srli	a4,a5,0x12
   137b8:	07d70513          	addi	a0,a4,125
   137bc:	07c70693          	addi	a3,a4,124
   137c0:	00151513          	slli	a0,a0,0x1
   137c4:	e59ff06f          	j	1361c <_free_r+0x11c>
    else
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
   137c8:	0017e693          	ori	a3,a5,1
  set_foot(p, sz);
   137cc:	00f60733          	add	a4,a2,a5
    else
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
   137d0:	00d62223          	sw	a3,4(a2)
  set_foot(p, sz);
   137d4:	00f72023          	sw	a5,0(a4)
   137d8:	e0dff06f          	j	135e4 <_free_r+0xe4>

000137dc <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
   137dc:	fe010113          	addi	sp,sp,-32
   137e0:	01512223          	sw	s5,4(sp)
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   137e4:	2e050a93          	addi	s5,a0,736

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
   137e8:	00112e23          	sw	ra,28(sp)
   137ec:	00812c23          	sw	s0,24(sp)
   137f0:	00912a23          	sw	s1,20(sp)
   137f4:	01212823          	sw	s2,16(sp)
   137f8:	01312623          	sw	s3,12(sp)
   137fc:	01412423          	sw	s4,8(sp)
   13800:	01612023          	sw	s6,0(sp)
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   13804:	080a8063          	beqz	s5,13884 <_fwalk+0xa8>
   13808:	00058b13          	mv	s6,a1
   1380c:	00000a13          	li	s4,0
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
   13810:	00100993          	li	s3,1
   13814:	fff00913          	li	s2,-1
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   13818:	004aa483          	lw	s1,4(s5)
   1381c:	008aa403          	lw	s0,8(s5)
   13820:	fff48493          	addi	s1,s1,-1
   13824:	0204c663          	bltz	s1,13850 <_fwalk+0x74>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
   13828:	00c45783          	lhu	a5,12(s0)
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   1382c:	fff48493          	addi	s1,s1,-1
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
   13830:	00f9fc63          	bleu	a5,s3,13848 <_fwalk+0x6c>
   13834:	00e41783          	lh	a5,14(s0)
	ret |= (*function) (fp);
   13838:	00040513          	mv	a0,s0
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
   1383c:	01278663          	beq	a5,s2,13848 <_fwalk+0x6c>
	ret |= (*function) (fp);
   13840:	000b00e7          	jalr	s6
   13844:	00aa6a33          	or	s4,s4,a0
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   13848:	07040413          	addi	s0,s0,112
   1384c:	fd249ee3          	bne	s1,s2,13828 <_fwalk+0x4c>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   13850:	000aaa83          	lw	s5,0(s5)
   13854:	fc0a92e3          	bnez	s5,13818 <_fwalk+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
}
   13858:	01c12083          	lw	ra,28(sp)
   1385c:	000a0513          	mv	a0,s4
   13860:	01812403          	lw	s0,24(sp)
   13864:	01412483          	lw	s1,20(sp)
   13868:	01012903          	lw	s2,16(sp)
   1386c:	00c12983          	lw	s3,12(sp)
   13870:	00812a03          	lw	s4,8(sp)
   13874:	00412a83          	lw	s5,4(sp)
   13878:	00012b03          	lw	s6,0(sp)
   1387c:	02010113          	addi	sp,sp,32
   13880:	00008067          	ret
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
  register FILE *fp;
  register int n, ret = 0;
   13884:	00000a13          	li	s4,0
   13888:	fd1ff06f          	j	13858 <_fwalk+0x7c>

0001388c <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
   1388c:	fd010113          	addi	sp,sp,-48
   13890:	01612823          	sw	s6,16(sp)
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   13894:	2e050b13          	addi	s6,a0,736
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
   13898:	02112623          	sw	ra,44(sp)
   1389c:	02812423          	sw	s0,40(sp)
   138a0:	02912223          	sw	s1,36(sp)
   138a4:	03212023          	sw	s2,32(sp)
   138a8:	01312e23          	sw	s3,28(sp)
   138ac:	01412c23          	sw	s4,24(sp)
   138b0:	01512a23          	sw	s5,20(sp)
   138b4:	01712623          	sw	s7,12(sp)
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   138b8:	080b0663          	beqz	s6,13944 <_fwalk_reent+0xb8>
   138bc:	00058b93          	mv	s7,a1
   138c0:	00050a93          	mv	s5,a0
   138c4:	00000a13          	li	s4,0
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
   138c8:	00100993          	li	s3,1
   138cc:	fff00913          	li	s2,-1
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   138d0:	004b2483          	lw	s1,4(s6)
   138d4:	008b2403          	lw	s0,8(s6)
   138d8:	fff48493          	addi	s1,s1,-1
   138dc:	0204c863          	bltz	s1,1390c <_fwalk_reent+0x80>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
   138e0:	00c45783          	lhu	a5,12(s0)
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   138e4:	fff48493          	addi	s1,s1,-1
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
   138e8:	00f9fe63          	bleu	a5,s3,13904 <_fwalk_reent+0x78>
   138ec:	00e41783          	lh	a5,14(s0)
	ret |= (*reent_function) (ptr, fp);
   138f0:	00040593          	mv	a1,s0
   138f4:	000a8513          	mv	a0,s5
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
   138f8:	01278663          	beq	a5,s2,13904 <_fwalk_reent+0x78>
	ret |= (*reent_function) (ptr, fp);
   138fc:	000b80e7          	jalr	s7
   13900:	00aa6a33          	or	s4,s4,a0
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   13904:	07040413          	addi	s0,s0,112
   13908:	fd249ce3          	bne	s1,s2,138e0 <_fwalk_reent+0x54>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   1390c:	000b2b03          	lw	s6,0(s6)
   13910:	fc0b10e3          	bnez	s6,138d0 <_fwalk_reent+0x44>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
}
   13914:	02c12083          	lw	ra,44(sp)
   13918:	000a0513          	mv	a0,s4
   1391c:	02812403          	lw	s0,40(sp)
   13920:	02412483          	lw	s1,36(sp)
   13924:	02012903          	lw	s2,32(sp)
   13928:	01c12983          	lw	s3,28(sp)
   1392c:	01812a03          	lw	s4,24(sp)
   13930:	01412a83          	lw	s5,20(sp)
   13934:	01012b03          	lw	s6,16(sp)
   13938:	00c12b83          	lw	s7,12(sp)
   1393c:	03010113          	addi	sp,sp,48
   13940:	00008067          	ret
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
  register FILE *fp;
  register int n, ret = 0;
   13944:	00000a13          	li	s4,0
   13948:	fcdff06f          	j	13914 <_fwalk_reent+0x88>

0001394c <__smakebuf_r>:
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
   1394c:	00c59783          	lh	a5,12(a1)

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
   13950:	f7010113          	addi	sp,sp,-144
   13954:	08912223          	sw	s1,132(sp)
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
   13958:	01079493          	slli	s1,a5,0x10
   1395c:	0104d493          	srli	s1,s1,0x10
   13960:	0024f713          	andi	a4,s1,2

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
   13964:	08112623          	sw	ra,140(sp)
   13968:	08812423          	sw	s0,136(sp)
   1396c:	09212023          	sw	s2,128(sp)
   13970:	07312e23          	sw	s3,124(sp)
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
   13974:	0e071063          	bnez	a4,13a54 <__smakebuf_r+0x108>
   13978:	00050913          	mv	s2,a0
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
   1397c:	00e59503          	lh	a0,14(a1)
   13980:	00058413          	mv	s0,a1
   13984:	04054c63          	bltz	a0,139dc <__smakebuf_r+0x90>
   13988:	00010593          	mv	a1,sp
   1398c:	859fc0ef          	jal	101e4 <fstat>
   13990:	04054063          	bltz	a0,139d0 <__smakebuf_r+0x84>
      fp->_flags |= __SNPT;
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
   13994:	01012703          	lw	a4,16(sp)
   13998:	0000f7b7          	lui	a5,0xf
   1399c:	ffffe9b7          	lui	s3,0xffffe
   139a0:	00f777b3          	and	a5,a4,a5
   139a4:	013789b3          	add	s3,a5,s3
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
   139a8:	00008737          	lui	a4,0x8
      fp->_flags |= __SNPT;
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
   139ac:	0019b993          	seqz	s3,s3
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
   139b0:	0ae78e63          	beq	a5,a4,13a6c <__smakebuf_r+0x120>
#else
	  fp->_blksize = 1024;
#endif
	}
      else
	fp->_flags |= __SNPT;
   139b4:	00c45703          	lhu	a4,12(s0)
   139b8:	000017b7          	lui	a5,0x1
   139bc:	80078793          	addi	a5,a5,-2048 # 800 <_reset+0x600>
   139c0:	00f767b3          	or	a5,a4,a5
   139c4:	00f41623          	sh	a5,12(s0)
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
   139c8:	40000493          	li	s1,1024
   139cc:	0340006f          	j	13a00 <__smakebuf_r+0xb4>
   139d0:	00c41783          	lh	a5,12(s0)
   139d4:	01079493          	slli	s1,a5,0x10
   139d8:	0104d493          	srli	s1,s1,0x10
      couldbetty = 0;
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
        size = _DEFAULT_ASPRINTF_BUFSIZE;
      else
        size = BUFSIZ;
   139dc:	01849493          	slli	s1,s1,0x18
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
   139e0:	00001737          	lui	a4,0x1
      couldbetty = 0;
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
        size = _DEFAULT_ASPRINTF_BUFSIZE;
      else
        size = BUFSIZ;
   139e4:	41f4d493          	srai	s1,s1,0x1f
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
   139e8:	80070713          	addi	a4,a4,-2048 # 800 <_reset+0x600>
      couldbetty = 0;
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
        size = _DEFAULT_ASPRINTF_BUFSIZE;
      else
        size = BUFSIZ;
   139ec:	c404f493          	andi	s1,s1,-960
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
   139f0:	00e7e7b3          	or	a5,a5,a4
      couldbetty = 0;
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
        size = _DEFAULT_ASPRINTF_BUFSIZE;
      else
        size = BUFSIZ;
   139f4:	40048493          	addi	s1,s1,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
   139f8:	00f41623          	sh	a5,12(s0)
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
#endif
    {
      couldbetty = 0;
   139fc:	00000993          	li	s3,0
	}
      else
	fp->_flags |= __SNPT;
#endif
    }
  if ((p = _malloc_r (ptr, size)) == NULL)
   13a00:	00048593          	mv	a1,s1
   13a04:	00090513          	mv	a0,s2
   13a08:	a08fe0ef          	jal	11c10 <_malloc_r>
   13a0c:	0a050263          	beqz	a0,13ab0 <__smakebuf_r+0x164>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
      fp->_flags |= __SMBF;
   13a10:	00c45783          	lhu	a5,12(s0)
	  fp->_bf._size = 1;
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
   13a14:	00013737          	lui	a4,0x13
   13a18:	09470713          	addi	a4,a4,148 # 13094 <_cleanup_r>
      fp->_flags |= __SMBF;
   13a1c:	0807e793          	ori	a5,a5,128
	  fp->_bf._size = 1;
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
   13a20:	02e92e23          	sw	a4,60(s2)
      fp->_flags |= __SMBF;
   13a24:	00f41623          	sh	a5,12(s0)
      fp->_bf._base = fp->_p = (unsigned char *) p;
   13a28:	00a42023          	sw	a0,0(s0)
   13a2c:	00a42823          	sw	a0,16(s0)
      fp->_bf._size = size;
   13a30:	00942a23          	sw	s1,20(s0)
      if (couldbetty && _isatty_r (ptr, fp->_file))
   13a34:	06099063          	bnez	s3,13a94 <__smakebuf_r+0x148>
	fp->_flags |= __SLBF;
    }
}
   13a38:	08c12083          	lw	ra,140(sp)
   13a3c:	08812403          	lw	s0,136(sp)
   13a40:	08412483          	lw	s1,132(sp)
   13a44:	08012903          	lw	s2,128(sp)
   13a48:	07c12983          	lw	s3,124(sp)
   13a4c:	09010113          	addi	sp,sp,144
   13a50:	00008067          	ret
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
   13a54:	04358793          	addi	a5,a1,67
   13a58:	00f5a023          	sw	a5,0(a1)
   13a5c:	00f5a823          	sw	a5,16(a1)
      fp->_bf._size = 1;
   13a60:	00100793          	li	a5,1
   13a64:	00f5aa23          	sw	a5,20(a1)
   13a68:	fd1ff06f          	j	13a38 <__smakebuf_r+0xec>
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
   13a6c:	02842703          	lw	a4,40(s0)
   13a70:	000147b7          	lui	a5,0x14
   13a74:	cb478793          	addi	a5,a5,-844 # 13cb4 <__sseek>
   13a78:	f2f71ee3          	bne	a4,a5,139b4 <__smakebuf_r+0x68>
	{
	  fp->_flags |= __SOPT;
   13a7c:	00c45783          	lhu	a5,12(s0)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
   13a80:	40000493          	li	s1,1024
   13a84:	04942623          	sw	s1,76(s0)
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
	{
	  fp->_flags |= __SOPT;
   13a88:	0097e7b3          	or	a5,a5,s1
   13a8c:	00f41623          	sh	a5,12(s0)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
   13a90:	f71ff06f          	j	13a00 <__smakebuf_r+0xb4>
    {
      ptr->__cleanup = _cleanup_r;
      fp->_flags |= __SMBF;
      fp->_bf._base = fp->_p = (unsigned char *) p;
      fp->_bf._size = size;
      if (couldbetty && _isatty_r (ptr, fp->_file))
   13a94:	00e41503          	lh	a0,14(s0)
   13a98:	fa0fc0ef          	jal	10238 <isatty>
   13a9c:	f8050ee3          	beqz	a0,13a38 <__smakebuf_r+0xec>
	fp->_flags |= __SLBF;
   13aa0:	00c45783          	lhu	a5,12(s0)
   13aa4:	0017e793          	ori	a5,a5,1
   13aa8:	00f41623          	sh	a5,12(s0)
   13aac:	f8dff06f          	j	13a38 <__smakebuf_r+0xec>
	fp->_flags |= __SNPT;
#endif
    }
  if ((p = _malloc_r (ptr, size)) == NULL)
    {
      if (!(fp->_flags & __SSTR))
   13ab0:	00c41783          	lh	a5,12(s0)
   13ab4:	2007f713          	andi	a4,a5,512
   13ab8:	f80710e3          	bnez	a4,13a38 <__smakebuf_r+0xec>
	{
	  fp->_flags |= __SNBF;
   13abc:	0027e793          	ori	a5,a5,2
	  fp->_bf._base = fp->_p = fp->_nbuf;
   13ac0:	04340713          	addi	a4,s0,67
    }
  if ((p = _malloc_r (ptr, size)) == NULL)
    {
      if (!(fp->_flags & __SSTR))
	{
	  fp->_flags |= __SNBF;
   13ac4:	00f41623          	sh	a5,12(s0)
	  fp->_bf._base = fp->_p = fp->_nbuf;
	  fp->_bf._size = 1;
   13ac8:	00100793          	li	a5,1
  if ((p = _malloc_r (ptr, size)) == NULL)
    {
      if (!(fp->_flags & __SSTR))
	{
	  fp->_flags |= __SNBF;
	  fp->_bf._base = fp->_p = fp->_nbuf;
   13acc:	00e42023          	sw	a4,0(s0)
   13ad0:	00e42823          	sw	a4,16(s0)
	  fp->_bf._size = 1;
   13ad4:	00f42a23          	sw	a5,20(s0)
   13ad8:	f61ff06f          	j	13a38 <__smakebuf_r+0xec>

00013adc <memset>:
   13adc:	00f00813          	li	a6,15
   13ae0:	00050713          	mv	a4,a0
   13ae4:	02c87e63          	bleu	a2,a6,13b20 <memset+0x44>
   13ae8:	00f77793          	andi	a5,a4,15
   13aec:	0a079063          	bnez	a5,13b8c <memset+0xb0>
   13af0:	08059263          	bnez	a1,13b74 <memset+0x98>
   13af4:	ff067693          	andi	a3,a2,-16
   13af8:	00f67613          	andi	a2,a2,15
   13afc:	00e686b3          	add	a3,a3,a4
   13b00:	00b72023          	sw	a1,0(a4)
   13b04:	00b72223          	sw	a1,4(a4)
   13b08:	00b72423          	sw	a1,8(a4)
   13b0c:	00b72623          	sw	a1,12(a4)
   13b10:	01070713          	addi	a4,a4,16
   13b14:	fed766e3          	bltu	a4,a3,13b00 <memset+0x24>
   13b18:	00061463          	bnez	a2,13b20 <memset+0x44>
   13b1c:	00008067          	ret
   13b20:	40c806b3          	sub	a3,a6,a2
   13b24:	00269693          	slli	a3,a3,0x2
   13b28:	00000297          	auipc	t0,0x0
   13b2c:	005686b3          	add	a3,a3,t0
   13b30:	00c68067          	jr	a3,12
   13b34:	00b70723          	sb	a1,14(a4)
   13b38:	00b706a3          	sb	a1,13(a4)
   13b3c:	00b70623          	sb	a1,12(a4)
   13b40:	00b705a3          	sb	a1,11(a4)
   13b44:	00b70523          	sb	a1,10(a4)
   13b48:	00b704a3          	sb	a1,9(a4)
   13b4c:	00b70423          	sb	a1,8(a4)
   13b50:	00b703a3          	sb	a1,7(a4)
   13b54:	00b70323          	sb	a1,6(a4)
   13b58:	00b702a3          	sb	a1,5(a4)
   13b5c:	00b70223          	sb	a1,4(a4)
   13b60:	00b701a3          	sb	a1,3(a4)
   13b64:	00b70123          	sb	a1,2(a4)
   13b68:	00b700a3          	sb	a1,1(a4)
   13b6c:	00b70023          	sb	a1,0(a4)
   13b70:	00008067          	ret
   13b74:	0ff5f593          	andi	a1,a1,255
   13b78:	00859693          	slli	a3,a1,0x8
   13b7c:	00d5e5b3          	or	a1,a1,a3
   13b80:	01059693          	slli	a3,a1,0x10
   13b84:	00d5e5b3          	or	a1,a1,a3
   13b88:	f6dff06f          	j	13af4 <memset+0x18>
   13b8c:	00279693          	slli	a3,a5,0x2
   13b90:	00000297          	auipc	t0,0x0
   13b94:	005686b3          	add	a3,a3,t0
   13b98:	00008293          	mv	t0,ra
   13b9c:	fa0680e7          	jalr	a3,-96
   13ba0:	00028093          	mv	ra,t0
   13ba4:	ff078793          	addi	a5,a5,-16
   13ba8:	40f70733          	sub	a4,a4,a5
   13bac:	00f60633          	add	a2,a2,a5
   13bb0:	f6c878e3          	bleu	a2,a6,13b20 <memset+0x44>
   13bb4:	f3dff06f          	j	13af0 <memset+0x14>

00013bb8 <__sread>:
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
   13bb8:	00e59503          	lh	a0,14(a1)
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
   13bbc:	ff010113          	addi	sp,sp,-16
   13bc0:	00812423          	sw	s0,8(sp)
   13bc4:	00058413          	mv	s0,a1
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
   13bc8:	00060593          	mv	a1,a2
   13bcc:	00068613          	mv	a2,a3
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
   13bd0:	00112623          	sw	ra,12(sp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
   13bd4:	f40fc0ef          	jal	10314 <read>
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
   13bd8:	02054c63          	bltz	a0,13c10 <__sread+0x58>
    fp->_offset += ret;
   13bdc:	05042783          	lw	a5,80(s0)
   13be0:	05442683          	lw	a3,84(s0)
   13be4:	41f55613          	srai	a2,a0,0x1f
   13be8:	00a785b3          	add	a1,a5,a0
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
  return ret;
}
   13bec:	00c12083          	lw	ra,12(sp)
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
    fp->_offset += ret;
   13bf0:	00f5b733          	sltu	a4,a1,a5
   13bf4:	00c687b3          	add	a5,a3,a2
   13bf8:	00f707b3          	add	a5,a4,a5
   13bfc:	04b42823          	sw	a1,80(s0)
   13c00:	04f42a23          	sw	a5,84(s0)
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
  return ret;
}
   13c04:	00812403          	lw	s0,8(sp)
   13c08:	01010113          	addi	sp,sp,16
   13c0c:	00008067          	ret
  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
    fp->_offset += ret;
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
   13c10:	00c45703          	lhu	a4,12(s0)
   13c14:	fffff7b7          	lui	a5,0xfffff
  return ret;
}
   13c18:	00c12083          	lw	ra,12(sp)
  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
    fp->_offset += ret;
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
   13c1c:	fff78793          	addi	a5,a5,-1 # ffffefff <_gp+0xfffe96df>
   13c20:	00f777b3          	and	a5,a4,a5
   13c24:	00f41623          	sh	a5,12(s0)
  return ret;
}
   13c28:	00812403          	lw	s0,8(sp)
   13c2c:	01010113          	addi	sp,sp,16
   13c30:	00008067          	ret

00013c34 <__seofread>:
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
  return 0;
}
   13c34:	00000513          	li	a0,0
   13c38:	00008067          	ret

00013c3c <__swrite>:
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
   13c3c:	00c59703          	lh	a4,12(a1)
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
   13c40:	ff010113          	addi	sp,sp,-16
   13c44:	00812423          	sw	s0,8(sp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
   13c48:	10077793          	andi	a5,a4,256
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
   13c4c:	00912223          	sw	s1,4(sp)
   13c50:	01212023          	sw	s2,0(sp)
   13c54:	00112623          	sw	ra,12(sp)
   13c58:	00058413          	mv	s0,a1
   13c5c:	00060493          	mv	s1,a2
   13c60:	00068913          	mv	s2,a3
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
   13c64:	00078e63          	beqz	a5,13c80 <__swrite+0x44>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
   13c68:	00e59503          	lh	a0,14(a1)
   13c6c:	00200713          	li	a4,2
   13c70:	00000613          	li	a2,0
   13c74:	00000693          	li	a3,0
   13c78:	e44fc0ef          	jal	102bc <lseek>
   13c7c:	00c41703          	lh	a4,12(s0)
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
   13c80:	fffff7b7          	lui	a5,0xfffff
   13c84:	fff78793          	addi	a5,a5,-1 # ffffefff <_gp+0xfffe96df>
   13c88:	00f777b3          	and	a5,a4,a5
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
   13c8c:	00e41503          	lh	a0,14(s0)
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
   13c90:	00f41623          	sh	a5,12(s0)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
   13c94:	00090613          	mv	a2,s2
   13c98:	00048593          	mv	a1,s1
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
}
   13c9c:	00c12083          	lw	ra,12(sp)
   13ca0:	00812403          	lw	s0,8(sp)
   13ca4:	00412483          	lw	s1,4(sp)
   13ca8:	00012903          	lw	s2,0(sp)
   13cac:	01010113          	addi	sp,sp,16
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
   13cb0:	841fc06f          	j	104f0 <write>

00013cb4 <__sseek>:
       int whence)
{
  register FILE *fp = (FILE *) cookie;
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
   13cb4:	00e59503          	lh	a0,14(a1)
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
   13cb8:	ff010113          	addi	sp,sp,-16
   13cbc:	00812423          	sw	s0,8(sp)
   13cc0:	00112623          	sw	ra,12(sp)
   13cc4:	00058413          	mv	s0,a1
  register FILE *fp = (FILE *) cookie;
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
   13cc8:	df4fc0ef          	jal	102bc <lseek>
  if (ret == -1L)
   13ccc:	fff00793          	li	a5,-1
    fp->_flags &= ~__SOFF;
   13cd0:	00c45703          	lhu	a4,12(s0)
{
  register FILE *fp = (FILE *) cookie;
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
  if (ret == -1L)
   13cd4:	02f50463          	beq	a0,a5,13cfc <__sseek+0x48>
    {
      fp->_flags |= __SOFF;
      fp->_offset = ret;
    }
  return ret;
}
   13cd8:	00c12083          	lw	ra,12(sp)
  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
  if (ret == -1L)
    fp->_flags &= ~__SOFF;
  else
    {
      fp->_flags |= __SOFF;
   13cdc:	000017b7          	lui	a5,0x1
   13ce0:	00f767b3          	or	a5,a4,a5
      fp->_offset = ret;
   13ce4:	04a42823          	sw	a0,80(s0)
  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
  if (ret == -1L)
    fp->_flags &= ~__SOFF;
  else
    {
      fp->_flags |= __SOFF;
   13ce8:	00f41623          	sh	a5,12(s0)
      fp->_offset = ret;
   13cec:	04b42a23          	sw	a1,84(s0)
    }
  return ret;
}
   13cf0:	00812403          	lw	s0,8(sp)
   13cf4:	01010113          	addi	sp,sp,16
   13cf8:	00008067          	ret
{
  register FILE *fp = (FILE *) cookie;
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
  if (ret == -1L)
   13cfc:	fca59ee3          	bne	a1,a0,13cd8 <__sseek+0x24>
    fp->_flags &= ~__SOFF;
   13d00:	fffff7b7          	lui	a5,0xfffff
    {
      fp->_flags |= __SOFF;
      fp->_offset = ret;
    }
  return ret;
}
   13d04:	00c12083          	lw	ra,12(sp)
  register FILE *fp = (FILE *) cookie;
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
  if (ret == -1L)
    fp->_flags &= ~__SOFF;
   13d08:	fff78793          	addi	a5,a5,-1 # ffffefff <_gp+0xfffe96df>
   13d0c:	00f777b3          	and	a5,a4,a5
   13d10:	00f41623          	sh	a5,12(s0)
    {
      fp->_flags |= __SOFF;
      fp->_offset = ret;
    }
  return ret;
}
   13d14:	00812403          	lw	s0,8(sp)
   13d18:	01010113          	addi	sp,sp,16
   13d1c:	00008067          	ret

00013d20 <__sclose>:
       struct _reent *ptr _AND
       void *cookie)
{
  FILE *fp = (FILE *) cookie;

  return _close_r (ptr, fp->_file);
   13d20:	00e59503          	lh	a0,14(a1)
   13d24:	c40fc06f          	j	10164 <close>

00013d28 <_fclose_r>:
      struct _reent *rptr _AND
      register FILE * fp)
{
  int r;

  if (fp == NULL)
   13d28:	0e058463          	beqz	a1,13e10 <_fclose_r+0xe8>

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
   13d2c:	ff010113          	addi	sp,sp,-16
   13d30:	00812423          	sw	s0,8(sp)
   13d34:	00912223          	sw	s1,4(sp)
   13d38:	00112623          	sw	ra,12(sp)
   13d3c:	01212023          	sw	s2,0(sp)
   13d40:	00050493          	mv	s1,a0
   13d44:	00058413          	mv	s0,a1
  int r;

  if (fp == NULL)
    return (0);			/* on NULL */

  CHECK_INIT (rptr, fp);
   13d48:	00050663          	beqz	a0,13d54 <_fclose_r+0x2c>
   13d4c:	03852783          	lw	a5,56(a0)
   13d50:	0a078063          	beqz	a5,13df0 <_fclose_r+0xc8>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
   13d54:	00c41783          	lh	a5,12(s0)
      register FILE * fp)
{
  int r;

  if (fp == NULL)
    return (0);			/* on NULL */
   13d58:	00000513          	li	a0,0
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
   13d5c:	00079e63          	bnez	a5,13d78 <_fclose_r+0x50>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
}
   13d60:	00c12083          	lw	ra,12(sp)
   13d64:	00812403          	lw	s0,8(sp)
   13d68:	00412483          	lw	s1,4(sp)
   13d6c:	00012903          	lw	s2,0(sp)
   13d70:	01010113          	addi	sp,sp,16
   13d74:	00008067          	ret
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
   13d78:	00040593          	mv	a1,s0
   13d7c:	00048513          	mv	a0,s1
   13d80:	800ff0ef          	jal	12d80 <__sflush_r>
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
   13d84:	02c42783          	lw	a5,44(s0)
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
   13d88:	00050913          	mv	s2,a0
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
   13d8c:	00078a63          	beqz	a5,13da0 <_fclose_r+0x78>
   13d90:	01c42583          	lw	a1,28(s0)
   13d94:	00048513          	mv	a0,s1
   13d98:	000780e7          	jalr	a5
   13d9c:	04054e63          	bltz	a0,13df8 <_fclose_r+0xd0>
    r = EOF;
  if (fp->_flags & __SMBF)
   13da0:	00c45783          	lhu	a5,12(s0)
   13da4:	0807f793          	andi	a5,a5,128
   13da8:	04079c63          	bnez	a5,13e00 <_fclose_r+0xd8>
    _free_r (rptr, (char *) fp->_bf._base);
  if (HASUB (fp))
   13dac:	03042583          	lw	a1,48(s0)
   13db0:	00058c63          	beqz	a1,13dc8 <_fclose_r+0xa0>
    FREEUB (rptr, fp);
   13db4:	04040793          	addi	a5,s0,64
   13db8:	00f58663          	beq	a1,a5,13dc4 <_fclose_r+0x9c>
   13dbc:	00048513          	mv	a0,s1
   13dc0:	f40ff0ef          	jal	13500 <_free_r>
   13dc4:	02042823          	sw	zero,48(s0)
  if (HASLB (fp))
   13dc8:	04442583          	lw	a1,68(s0)
   13dcc:	00058863          	beqz	a1,13ddc <_fclose_r+0xb4>
    FREELB (rptr, fp);
   13dd0:	00048513          	mv	a0,s1
   13dd4:	f2cff0ef          	jal	13500 <_free_r>
   13dd8:	04042223          	sw	zero,68(s0)
  __sfp_lock_acquire ();
   13ddc:	df4ff0ef          	jal	133d0 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
   13de0:	00041623          	sh	zero,12(s0)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
   13de4:	df0ff0ef          	jal	133d4 <__sfp_lock_release>
   13de8:	00090513          	mv	a0,s2
   13dec:	f75ff06f          	j	13d60 <_fclose_r+0x38>
  int r;

  if (fp == NULL)
    return (0);			/* on NULL */

  CHECK_INIT (rptr, fp);
   13df0:	dd0ff0ef          	jal	133c0 <__sinit>
   13df4:	f61ff06f          	j	13d54 <_fclose_r+0x2c>
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
    r = EOF;
   13df8:	fff00913          	li	s2,-1
   13dfc:	fa5ff06f          	j	13da0 <_fclose_r+0x78>
  if (fp->_flags & __SMBF)
    _free_r (rptr, (char *) fp->_bf._base);
   13e00:	01042583          	lw	a1,16(s0)
   13e04:	00048513          	mv	a0,s1
   13e08:	ef8ff0ef          	jal	13500 <_free_r>
   13e0c:	fa1ff06f          	j	13dac <_fclose_r+0x84>
      register FILE * fp)
{
  int r;

  if (fp == NULL)
    return (0);			/* on NULL */
   13e10:	00000513          	li	a0,0
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
}
   13e14:	00008067          	ret

00013e18 <fclose>:

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
  return _fclose_r(_REENT, fp);
   13e18:	00050593          	mv	a1,a0
   13e1c:	8101a503          	lw	a0,-2032(gp) # 15130 <_impure_ptr>
   13e20:	f09ff06f          	j	13d28 <_fclose_r>

Disassembly of section .startup:

00000000 <_reset-0x200>:
	...

00000200 <_reset>:
 200:	00100137          	lui	sp,0x100
 204:	00016113          	ori	sp,sp,0
 208:	00012023          	sw	zero,0(sp) # 100000 <_gp+0xea6e0>
 20c:	fe012e23          	sw	zero,-4(sp)
 210:	00003437          	lui	s0,0x3
 214:	00640413          	addi	s0,s0,6 # 3006 <_reset+0x2e06>
 218:	30041073          	csrw	mstatus,s0
 21c:	10000413          	li	s0,256
 220:	0c042023          	sw	zero,192(s0)
 224:	30141073          	csrw	mtvec,s0
 228:	5d90f06f          	j	10000 <_ftext>
